[ { "title": "함수 호출 인자 및 함수 매개변수의 한정자 관계", "url": "/posts/MISRA-C3/", "categories": "MISRA C, SW Test", "tags": "", "date": "2022-11-14 00:00:00 +0900", "snippet": " 함수 호출 인자 및 함수 매개변수의 한정자 관계를 소개한다.함수 호출 인자 및 함수 매개변수의 한정자 관계 c언어에서 한정자는 변수에 제한을 걸 때 사용하는 키워드로 const, volatile, restrict가 있다. 함수를 호출 할 때 전달하는 인자의 한정자는, 함수 선언의 매개변수 한정자로 변환(추가 및 제거)된다. 예를 들어, main 함수의 int32_t * array를 void boo(const int32_t * array) 함수로 전달할 때, main 함수의 int32_t * array는 boo 함수 선언에 의하여 const 한정자가 추가되어 const int32_t * array이 된다.#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdint.h&amp;gt;#include &amp;lt;string.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;void boo(const int32_t* const array);void boo(const int32_t* const array){ int32_t test = 0; int32_t* const dest1 = (int32_t*) malloc(sizeof(int32_t) * 10U); int32_t* const source1 = (int32_t*) malloc(sizeof(int32_t) * 10U); // void* memcpy (void* dest, const void* source, size_t num) (void) memset(dest1, 0, sizeof(int32_t) * 10U); (void) memset(source1, 0, sizeof(int32_t) * 10U); (void) memset(dest2, 0, sizeof(int32_t) * 10U); (void) memset(source2, 0, sizeof(int32_t) * 10U); // array 자료형은 const int32_t* const, 값과 주소를 변경할 수 없음 // main 함수 array는 boo 함수에 전달 될 때, const int32_t* const 속성으로 변환됨 // 에러 발생 //array[0] = 1; //array = &amp;amp;test; // dest1 자료형은 int32_t* const, 주소를 변경할 수 없음 // dest1는 memcpy 함수에 전달 될 때, void* 속성으로 변환됨 // source1는 memcpy 함수에 전달 될 때, const void* 속성으로 변환됨 //void* memcpy(void* dest, const void* source, size_t num) (void) memcpy(dest1, source1, sizeof(int32_t) * 10U);}int32_t main(void) { int32_t array[10] = { 0, }; boo(array); return 0;}#include &quot;main.h&quot;int32_t* g_pa;static int32_t getGpa(int32_t *pa) { // 매개변수 pa 자료형은 int32_t *, const 키워드가 모두 제거 *pa += 100; // pa 값을 변경 pa = &amp;amp;g_pa; // pa 포인터를 변경 return g_pa;}int main(void) { int32_t a = 100; const int32_t const *pa = &amp;amp;a; // 포인터 pa는 값과 주소를 변경할 수 없음 int32_t value = getGpa(pa); return 0 ;}" }, { "title": "Project SW Test Forum 17. 유지보수 - 5", "url": "/posts/Project-SW-Test-Forum17/", "categories": "Web, Project SW Test Forum", "tags": "", "date": "2022-09-26 00:00:00 +0900", "snippet": " 유지보수 현황을 소개한다. 프로젝트 유지보수 하고 추가 기능들을 구현하였다. github: https://github.com/scribnote5/sw_test_forumfeat: 대시보드 페이지 ‘가장 많이 본 규칙’, ‘가장 많이 도움이된 규칙’ 출력 개발 대시보드에서 ‘가장 많이 본 규칙’, ‘가장 많이 도움이된 규칙’이 출력 되도록 개발feat: 가이드라인 리스트 페이지 검색 필터 추가 개발 프로젝트 정보, 가이드라인 결과가, 도구 정보, 컴파일러 검색 필터 추가feat: 관리자(기타) 페이지 접근 권한 수정 공지사항, 사용자 페이지를 제외하고 나머지 페이지는 관리자 권한 이상만 접근 하도록 수정chore: FxCop, StyleCop 변경 일부 변경하지 못한 StyleCop -&amp;gt; C# Coding Conventions, FxCop -&amp;gt; .NET Framework Design Guideline로 변경chore: application.yml 파일을 여러 파일로 분류 application.yml 파일을 배포 환경에 따라 여러 개의 파일(common.yml, local_master.yml, prod_master.yml 등)으로 분류출처: https://honeymon.io/tech/2021/01/16/spring-boot-config-data-migration.html" }, { "title": "Project SW Test Forum 16. 유지보수 - 4", "url": "/posts/Project-SW-Test-Forum16/", "categories": "Web, Project SW Test Forum", "tags": "", "date": "2022-09-01 00:00:00 +0900", "snippet": " 유지보수 현황을 소개한다. 프로젝트 유지보수 하고 추가 기능들을 구현하였다. github: https://github.com/scribnote5/sw_test_forumfix: 규칙 페이지에서 제목을 규칙명으로 변경 제목을 규칙명, 원제를 영어 규칙명으로 변경feat: 대시보드 페이지 정적시험 규칙 현황 개발 대시보드에서 출력되는 정적시험 규칙 현황에 모든 규칙 정보 현황 출력되도록 개발feat: 질문 답변 페이지 개발 질문 답변 페이지 개발feat: 규칙 페이지 입력 항목 추가 다른 도구에서 지원하는 규칙 정보 입력할 수 있도록 추가 qac 규칙 제목 길이가 긴 경우 보여주기 감추기 기능 제공feat: 도구 사용 방법, 환경 설정 페이지 개발 사이드바 도구 탭에 사용 방법, 환경 설정, 트러블 슈팅 페이지 위치 도구 사용 방법, 환경 설정 페이지 개발 트러블 슈팅 게시판에서 사용하는 불필요한 테이블 삭제fix: 파일 확장자가 없는 파일 업로드시 오류 파일 확장자가 없는 파일의 경우, 확장자명 검사를 하지 않도록 로직 변경fix: 게시글 형상 변경시 audit 게시판에 잘못된 auditType으로 작성되는 오류 audit 게시판에 정상적인 auditType으로 게시글이 등록되도록 수정style: sidebar 고정 main 레이아웃 이동시에도 sidebar가 이동하지 않고 고정됨style: header 높이 조정 header 70px -&amp;gt; 55px로 조정chore: 자바스크립트 최신 라이브러리로 버전 업데이트 자바스크립트 최신 라이브러리로 버전 업데이트chore: JPA getById 메소드 변경 JPA getById 메소드가 deprecated 됨에 따라 getReferenceById 메소드로 변경chore: 이외 기타 사항 수정 parseErrorMsg -&amp;gt; parseApiErrorMsg로 변경feat: Java Code Convetion 규칙 페이지 개발 Java Code Convetion 규칙 페이지 개발feat: CWE Java 규칙 페이지 개발 기존 CWE 규칙 페이지를 CWE C/C++ 규칙 페이지로 변경하고, CWE Java 규칙 페이지 개발feat: 도구 사용방법, 도구 트러블슈팅 검색 항목에 도구 유형 추가 도구 사용방법, 도구 트러블슈팅 검색 항목에 도구 유형 추가style: 검색 입력 칸과 검색 아이콘 margin 변경 ms-2 -&amp;gt; mx-2style: 도구 사용방법, 트러블슈팅 유형을 도구 유형으로 변경 도구 사용방법, 트러블슈팅 유형을 도구 유형으로 변경style: sidebar 메뉴 수정 padding 축소 font-size 축소 아이콘 크기 축소style: 대시보드 정적시험 규칙 현황 프로그래스 바 색상 변경 대시보드 정적시험 규칙 현황 프로그래스 바 색상 변경style: breadcrumb 수정 반응형 font-size 변경style: StyleCop, FxCop 규칙 이름 변경 C# Coding Convention, .NET Framework Design Guideline 규칙 이름으로 변경style: MISRA C compiler placeholder 변경 G++ 대신 GCC, Qt 5.15 대신 Hardware: TMS320F28xx로 변경style: 댓글 한 줄로 길게 출력 되는 버그 수정 댓글 한 줄이 너무 길어지는 경우 여러 줄로 출력 되도록 수정chore: 잘못된 출력 버그 수정 가이드라인 사례 -&amp;gt; 가이드라인 변경, 자동 완성 * 추가, 프론트엔드 오류 메시지 변경 등style: 읽기 페이지에서 위배 빈도 뒤에 있는 * 삭제 읽기 페이지에서 위배 빈도 뒤에 있는 * 삭제chore: ckeditor 템플릿 양식 수정 ckeditor guideline 템플릿 양식 수정chore: 영어 규칙명 제거 영어 규칙명 제거chore: 지식 저장소 category 분류 추가 정적시험, 동적시험 category 분류 추가style: ckeditor 5 enter 입력 시&amp;lt;p&amp;gt; 태그 대신 태그 생성 ckeditor 5 enter 입력 시 &amp;lt;p&amp;gt; 태그 대신 태그 생성build: application.yml 분리 application.yml을 프로파일 환경에 따라 여러 의 yml 파일로 분리" }, { "title": "MISRA C 2012_03_02 - 주석 내부에서 행 접합(Line-splicing) 사용 금지", "url": "/posts/MISRA-C-03-02/", "categories": "MISRA C, SW Test", "tags": "", "date": "2022-08-27 00:00:00 +0900", "snippet": " MISRA C 2012_03_02 규칙을 소개한다. MISRA C 2012 규칙을 분석 후 해석하여, 원본 내용과 의미가 다를 수 있습니다. 해당 부분 피드백 주시면 반영하겠습니다. [규칙 요약(위배 원인 -&amp;gt; 수정 방법)] // 주석이 &#39;\\&#39; 문자로 끝나는 경우 -&amp;gt; // 주석이 &#39;\\&#39; 문자로 끝나지 않도록 제거 [위험 요인] 개발자 의도와 다르게 코드가 주석 처리되거나 주석 처리되지 않을 수 있음 // 주석이 &#39;\\&#39; 문자로 끝나는 경우, 다음 줄이 주석 처리됨 &amp;nbsp; [예외 사항] 문자열 &quot;//&quot;를 // 주석 내부에서 사용 &amp;nbsp; [상세 설명] - &amp;nbsp; [비고] * 행 접합(Line-splicing): &#39;\\&#39;로 끝나는 줄은 다음 줄을 포함하여 한 줄로 해석" }, { "title": "MISRA C 2012_03_01 - 주석 문자열 /*와 //는 주석 내부에서 사용 금지", "url": "/posts/MISRA-C-03-01/", "categories": "MISRA C, SW Test", "tags": "", "date": "2022-08-27 00:00:00 +0900", "snippet": " MISRA C 2012_03_01 규칙을 소개한다. MISRA C 2012 규칙을 분석 후 해석하여, 원본 내용과 의미가 다를 수 있습니다. 해당 부분 피드백 주시면 반영하겠습니다. [규칙 요약(위배 원인 -&amp;gt; 수정 방법)] 주석 문자열 /*와 //를 주석 내부에서 중첩하여 사용 -&amp;gt; 1. 주석 내부에서 주석 문자열 /*와 // 제거 2. #if 0, #endif 전처리 지시자 사용 [위험 요인] 개발자 의도와 다르게 코드가 주석 처리되거나 주석 처리되지 않을 수 있음 &amp;nbsp; [예외 사항] 문자열 &quot;//&quot;를 // 주석 내부에서 사용 &amp;nbsp; [상세 설명] - &amp;nbsp; [비고] -" }, { "title": "MISRA C 2012_02_07 - 함수 내부에서 사용하지 않는 매개변수 선언 제거", "url": "/posts/MISRA-C-02-07/", "categories": "MISRA C, SW Test", "tags": "", "date": "2022-08-27 00:00:00 +0900", "snippet": " MISRA C 2012_02_07 규칙을 소개한다. MISRA C 2012 규칙을 분석 후 해석하여, 원본 내용과 의미가 다를 수 있습니다. 해당 부분 피드백 주시면 반영하겠습니다. [규칙 요약(위배 원인 -&amp;gt; 수정 방법)] 함수 내부에서 사용하지 않는 매개변수 선언 -&amp;gt; 함수 내부에서 사용하지 않는 매개변수 선언 제거 [위험 요인] 1. 코드 구현과 설계 명세 간의 불일치 2. 함수 정의와 함수 선언(인터페이스) 간의 불일치 &amp;nbsp; [예외 사항] - &amp;nbsp; [상세 설명] - &amp;nbsp; [비고] * 레이블을 사용하기 위해서 goto문을 사용하면 [15_01 - goto문 사용 금지]을 위배한다." }, { "title": "MISRA C 2012_02_06 - 함수 내부에서 사용하지 않는 레이블 선언 제거", "url": "/posts/MISRA-C-02-06/", "categories": "MISRA C, SW Test", "tags": "", "date": "2022-08-27 00:00:00 +0900", "snippet": " MISRA C 2012_02_06 규칙을 소개한다. MISRA C 2012 규칙을 분석 후 해석하여, 원본 내용과 의미가 다를 수 있습니다. 해당 부분 피드백 주시면 반영하겠습니다. [규칙 요약(위배 원인 -&amp;gt; 수정 방법)] 함수 내부에서 사용하지 않는 레이블 선언 -&amp;gt; 함수 내부에서 사용하지 않는 레이블 선언 제거 [위험 요인] 1. 다른 코드와 혼동할 수 있음 2. 다른 식별자와 혼동할 수 있음 &amp;nbsp; [예외 사항] - &amp;nbsp; [상세 설명] - &amp;nbsp; [비고] * 레이블을 사용하기 위해서 goto문을 사용하면 [15_01 - goto문 사용 금지]을 위배한다." }, { "title": "MISRA C 2012_02_05 - 사용하지 않는 매크로 선언 제거", "url": "/posts/MISRA-C-02-05/", "categories": "MISRA C, SW Test", "tags": "", "date": "2022-08-27 00:00:00 +0900", "snippet": " MISRA C 2012_02_05 규칙을 소개한다. MISRA C 2012 규칙을 분석 후 해석하여, 원본 내용과 의미가 다를 수 있습니다. 해당 부분 피드백 주시면 반영하겠습니다. [규칙 요약(위배 원인 -&amp;gt; 수정 방법)] 사용하지 않는 태그 선언 -&amp;gt; 사용하지 않는 태그 선언 제거 [위험 요인] 1. 다른 코드와 혼동할 수 있음 2. 다른 식별자와 혼동할 수 있음 &amp;nbsp; [예외 사항] - &amp;nbsp; [상세 설명] - &amp;nbsp; [비고] -" }, { "title": "MISRA C 2012_02_04 - 사용하지 않는 태그(struct, union, enum) 선언 제거", "url": "/posts/MISRA-C-02-04/", "categories": "MISRA C, SW Test", "tags": "", "date": "2022-08-27 00:00:00 +0900", "snippet": " MISRA C 2012_02_04 규칙을 소개한다. MISRA C 2012 규칙을 분석 후 해석하여, 원본 내용과 의미가 다를 수 있습니다. 해당 부분 피드백 주시면 반영하겠습니다. [규칙 요약(위배 원인 -&amp;gt; 수정 방법)] 사용하지 않는 태그 선언 -&amp;gt; 사용하지 않는 태그 선언 제거 [위험 요인] 1. 다른 코드와 혼동할 수 있음 2. 다른 식별자와 혼동할 수 있음 &amp;nbsp; [예외 사항] - &amp;nbsp; [상세 설명] * 태그 typedef 방법 &amp;lt;태그 이름&amp;gt;은 typedef 선언시 사용되지 않으므로, typedef 할 때 &amp;lt;태그 이름&amp;gt;을 명시하면 규칙을 위배한다. typedef &amp;lt;태그&amp;gt; &amp;lt;태그 이름&amp;gt; { &amp;nbsp; &amp;nbsp; &amp;lt;자료형&amp;gt; &amp;lt;멤버 이름&amp;gt;; } &amp;lt;자료형 이름&amp;gt;; 따라서 &amp;lt;태그 이름&amp;gt;을 생략하여 typedef 해야 한다. typedef &amp;lt;태그&amp;gt; { &amp;nbsp; &amp;nbsp; &amp;lt;자료형&amp;gt; &amp;lt;멤 버이름&amp;gt;; } &amp;lt;자료형 이름&amp;gt;; &amp;nbsp; [비고] -" }, { "title": "MISRA C 2012_02_03 - 사용하지 않는 자료형 선언 제거", "url": "/posts/MISRA-C-02-03/", "categories": "MISRA C, SW Test", "tags": "", "date": "2022-08-27 00:00:00 +0900", "snippet": " MISRA C 2012_02_03 규칙을 소개한다. MISRA C 2012 규칙을 분석 후 해석하여, 원본 내용과 의미가 다를 수 있습니다. 해당 부분 피드백 주시면 반영하겠습니다. [규칙 요약(위배 원인 -&amp;gt; 수정 방법)] 사용하지 않는 자료형 선언 -&amp;gt; 사용하지 않는 자료형 선언 제거 [위험 요인] 1. 다른 코드와 혼동할 수 있음 2. 다른 식별자와 혼동할 수 있음 &amp;nbsp; [예외 사항] - &amp;nbsp; [상세 설명] - &amp;nbsp; [비고] -" }, { "title": "MISRA C 2012_02_02 - 불필요한 코드 삭제", "url": "/posts/MISRA-C-02-02/", "categories": "MISRA C, SW Test", "tags": "", "date": "2022-08-27 00:00:00 +0900", "snippet": " MISRA C 2012_02_02 규칙을 소개한다. MISRA C 2012 규칙을 분석 후 해석하여, 원본 내용과 의미가 다를 수 있습니다. 해당 부분 피드백 주시면 반영하겠습니다. [규칙 요약(위배 원인 -&amp;gt; 수정 방법)] 불필요한 코드 존재 -&amp;gt; 불필요한 코드 삭제 [위험 요인] 1. 프로그램 논리 오류가 발생할 수 있음 2. 불필요한 코드는 컴파일러에 의해 제거 될 수 있으므로, 다른 코드와 혼동할 수 있음 &amp;nbsp; [예외 사항] 1. 언어 확장에 의해 수행되는 연산 프로그램 동작에 영향을 미치므로 불필요한 코드가 아님 예제) 어셈블리어를 호출하는 언어 확장: __asm(&quot;NOP&quot;); 2. void 형변환 의도적으로 사용되지 않는 값을 나타내므로 불필요한 코드가 아님 &amp;nbsp; [상세 설명] - &amp;nbsp; [비고] * 불필요한 코드(dead code): 프로그램 소스 코드의 일부지만, 프로그램 동작에 영향을 미치지 않는 코드 [예제 코드]#include#includevoid foo();void foo(void){ uint16_t a; int8_t *pc; // 위배: a는 초기화 이후 사용되지 않음 a = 3U; // 위배: a는 형변환 후 값이 저장되지 않음 (int32_t) a; // 위배: a는 &amp;gt;&amp;gt; 연산자 사용 후 값이 저장되지 않음 a &amp;gt;&amp;gt; 3; // 위배: ++ 연산자가 * 연산자보다 우선순위가 높으므로 * 연산자는 사용되지 않음 *pc++;}-&amp;gt;#include#includevoid foo();void foo(void){ uint16_t a; int32_t b; int8_t c = &#39;c&#39;; int8_t *pc = &amp;amp;c; // 수정: a는 초기화 이후 사용 a = 3U; // 예외 (void)a; // 수정: a는 형변환 후 값 저장 b = (int32_t)a; // 수정: a는 &amp;gt;&amp;gt; 연산자 사용 후 값 저장 a = a &amp;gt;&amp;gt; 3; // 수정: 괄호를 사용하여 우선순위 명시(* 연산자는 사용 후 ++ 연산자 사용) (*pc)++;}void foo(void);void boo(void);void foo(void){}void boo(void){ // 위배: foo 함수는 프로그램 수행에 영향을 미치지 않음 foo(); // ...}-&amp;gt;void boo(void);void boo(void){ // 수정: 프로그램 수행에 영향을 미치지 않는 foo 함수 제거 // ...}" }, { "title": "MISRA C 2012_02_01 - 도달할 수 없는 코드 삭제", "url": "/posts/MISRA-C-02-01/", "categories": "MISRA C, SW Test", "tags": "", "date": "2022-08-27 00:00:00 +0900", "snippet": " MISRA C 2012_02_01 규칙을 소개한다. MISRA C 2012 규칙을 분석 후 해석하여, 원본 내용과 의미가 다를 수 있습니다. 해당 부분 피드백 주시면 반영하겠습니다. [규칙 요약(위배 원인 -&amp;gt; 수정 방법)] 도달할 수 없는 코드 존재 -&amp;gt; 도달할 수 없는 코드 삭제 [위험 요인] 1. 프로그램 논리 오류가 발생할 수 있음 2. 시스템 성능 저하 &amp;nbsp; 1) 타겟 시스템 메모리 공간 사용량 증간 &amp;nbsp; 2) 도달할 수 없는 코드 주변 jump instruction 실행 시간 증가 &amp;nbsp; 3) 반복문에서 instruction cache 최적화 저하 &amp;nbsp; [예외 사항] - &amp;nbsp; [상세 설명] 도달할 수 없는 코드는 예외(프로그램이 개발자 의도와 다르게 수행되는 경우, 하드웨어 오류 등) 처리를 위한 방어 코드로 사용될 수 있으며, 이는 위배로 검출되지 않는다. 도달할 수 없는 코드는 컴파일러 최적화로 제거될 수 있다. 컴파일러가 switch case 문의 default 구문에 도달 불가능하다고 분석한 경우 해당 코드를 삭제할 수 있다. volatile 키워드를 사용하면 컴파일러가 default 구문을 최적화에서 제외할 수 있다. 에제) uint16_t x; switch (x) { // ... } -&amp;gt; uint16_t x; switch ( *( volatile uint16_t * ) &amp;amp;x ) { //... } &amp;nbsp; [비고] * 도달할 수 없는 코드(Unreachable code): 프로그램 소스 코드의 일부지만, 절대로 실행되지 않는 코드 * 방어 코드(Defensive code): 예상하지 못한 입력에도 소프트웨어가 정상 수행하도록 대비하는 코드 전처리기 단계에서 조건부로 제거된 코드는 이후 컴파일 단게에서 존재하지 않으므로, 해당 규칙의 적용을 받지 않는다. &amp;nbsp; [예제 코드]#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdint.h&amp;gt;struct S{ uint32_t a : 2;};void foo();void foo(struct S s){ // 구조체 S의 비트 필드 a는 0 ~ 3까지의 값을 가질 수 있다. switch (s.a) { case 0: printf(&quot;0\\n&quot;); break; case 1U: printf(&quot;1\\n&quot;); break; case 2U: printf(&quot;2\\n&quot;); break; case 3U: printf(&quot;3\\n&quot;); break; // 위배: 도달할 수 없는 코드 case 4U: printf(&quot;4\\n&quot;); break; // 예외: 도달할 수 없는 코드지만, 방어 코드로 예외 가능 default: printf(&quot;default\\n&quot;); break; }}-&amp;gt;#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdint.h&amp;gt;struct S{ uint32_t a : 2;};void foo();void foo(struct S s){ // 구조체 S의 비트 필드 a는 0 ~ 3까지의 값을 가질 수 있다. switch (s.a) { case 0: printf(&quot;0\\n&quot;); break; case 1U: printf(&quot;1\\n&quot;); break; case 2U: printf(&quot;2\\n&quot;); break; case 3U: printf(&quot;3\\n&quot;); break; // 수정: 도달할 수 없는 코드 제거 // 위배: 도달할 수 없는 코드지만, 방어 코드로 예외 가능 default: printf(&quot;default\\n&quot;); break; }}" }, { "title": "MISRA C 2012_01_03 - 정의되지 않은 행동 및 지정되지 않은 행동 발생 금지", "url": "/posts/MISRA-C-01-03/", "categories": "MISRA C, SW Test", "tags": "", "date": "2022-08-27 00:00:00 +0900", "snippet": " MISRA C 2012_01_03 규칙을 소개한다. MISRA C 2012 규칙을 분석 후 해석하여, 원본 내용과 의미가 다를 수 있습니다. 해당 부분 피드백 주시면 반영하겠습니다. [규칙 요약(위배 원인 -&amp;gt; 수정 방법)] 정의되지 않은 행동 및 지정되지 않은 행동 발생 -&amp;gt; 정의되지 않은 행동 및 지정되지 않은 행동 발생 금지 [위험 요인] 프로그램이 개발자 의도와 다르게 수행될 수 있음 &amp;nbsp; [예외 사항] - &amp;nbsp; [상세 설명] 프로그램에서 정의되지 않은 행동 및 지정되지 않은 행동이 발생하면, 프로그램이 개발자 의도와 다르게 수행되어 심각한 결함으로 이어질 수 있다. &amp;nbsp; [비고] * 정의되지 않은 행동(Undefined behavior): behavior, upon use of a non-portable or erroneous program construct or of erroneous data, for which this International Standard imposes no requirements 표준에서 정의되지 않은 모든 행동이다. 어떤 결과가 나올지 정의되어 있지 않으며, 예상치 못한 행동이 발생할 수 있다. 운이 좋으면 프로그래머가 의도한 방향으로 컴파일 될 수도 있지만, 실행 중 에러를 발생시킬 수 있다. Undefined behavior의 결과는 누구도 예측할 수 없기 때문에 반드시 피해야 한다. 예제) 초기화가 안 된 변수의 사용 부호 있는 정수형의 overflow 부호 있는 정수 자료형의 왼쪽/오른쪽 시프트 연산 범위를 벗어난 배열 접근 유효하지 않은 포인터의 역참조 * 지정되지 않은 행동(Unspecified behavior): use of an unspecified value, or other behavior where this International Standard provides two or more possibilities and imposes no further requirements on which is chosen in any instance 동작에 대한 구현은 제공하지만 문서화 되어있지 않다. 해당 기능이 컴파일러의 구현체에 따라 정의된 행동으로, 컴파일러 마다 다른 동작을 할 수는 있지만 일반적으로 예상 가능한 유효 범위 내부에서 동작한다. 예제) malloc 함수 인자로 0을 주고 실행할 때, 메모리 할당 크기가 명시되지 않음. function_call(foo(), bar()); foo() 함수와 bar() 함수의 호출 순서가 명시되지 않음. * 정의되지 않은 행동 및 지정되지 않은 행동 리스트와 이를 예방하는 방법을 Appendix H에서 제공한다. &amp;nbsp;" }, { "title": "MISRA C 2012_01_02 - 언어 확장 사용 금지", "url": "/posts/MISRA-C-01-02/", "categories": "MISRA C, SW Test", "tags": "", "date": "2022-08-27 00:00:00 +0900", "snippet": " MISRA C 2012_01_02 규칙을 소개한다. MISRA C 2012 규칙을 분석 후 해석하여, 원본 내용과 의미가 다를 수 있습니다. 해당 부분 피드백 주시면 반영하겠습니다. [규칙 요약(위배 원인 -&amp;gt; 수정 방법)] 언어 확장 사용 -&amp;gt; 다음 중 한가지 방법 선택 1. 규칙 적용을 적용하고 언어 확장 사용 금지 2. 규칙 적용을 적용하고 언어 확장 사용: 컴파일러가 제공하는 언어 확장 문서화 3. 규칙 적용하지 않고 언어 확장 사용 1) 프로젝트 설계 문서에서 정당화되어야 함 2) 언어 확장이 올바르게 사용되는지 보장하는 방법(컴파일러 확인, 컴파일러 진단 등) 문서화 [위험 요인] 1. 컴파일러 간의 이식성이 떨어짐: 언어 확장을 사용하는 프로그램을 다른 컴파일러로 빌드하는 경우 컴파일 오류가 발생함 2. 언어 확장 사용으로 인한 모든 상황을 문서에서 다루기 어려우므로, 다루지 않은 언어 확장은 위험 요인이 될 수 있음 &amp;nbsp; [예외 사항] - &amp;nbsp; [상세 설명] 임베디드 시스템에서는 언어 확장이 필요하다. 그러나 C언어 표준에서 정의한 동작을 변경시키는, 즉 C언어 표준을 위배하는 언어 확장 사용을 금지한다. 예제) C언어 표준에서는 Short Circuit Rule에 따라 &amp;amp;&amp;amp;과 ||의 우변은 좌변 결과에 따라 계산하지 않을 수 있다. 만약 컴파일러에서 좌변 결과와 무관하게 우변을 항상 계산한다면, 해당 규칙을 위배한다. &amp;nbsp; [비고] * 컴파일러 진단(compiler diagnostics): 컴파일러가 프로그램 컴파일 시 수행하는 오류 진단. 다음 4가지 경우가 있다. 이 밖에 컴파일러에서 제공하는 출력으로 전체적인 진단 정보, 원시 언어 리스팅, 기계어 리스팅, 심벌의 정의와 그들의 참조에 대한 상호 관련 리스팅 등이 있다. 1. 예비 경고:경고 메시지를 인쇄하고 컴파일 계속 수행. 2. 수정 가능:일단 오류를 수정한 뒤 이를 설명해 주는 메시지를 인쇄한 후 컴파일 계속 수행. 3. 수정 불가능:프로그램 작성자의 의도를 알아낼 수 없어 오류 진단 메시지를 인쇄한 후 오류가 발생한 구문이나 문장을 빼고 컴파일 계속 수행. 4. 불가능:더 이상의 오류 진단 정보가 소용없을 정도로 오류가 많은 경우 컴파일 중단. * Short Circuit Rule: 이미 결정된 값에 대한 불필요한 연산을 하지 않음으로 실행 속도를 높이는 규칙이다. &amp;nbsp;" }, { "title": "MISRA C 2012_01_01 - 프로그램은 C 표준과 컴파일러 번역 제한을 준수해야 함", "url": "/posts/MISRA-C-01-01/", "categories": "MISRA C, SW Test", "tags": "", "date": "2022-08-27 00:00:00 +0900", "snippet": " MISRA C 2012_01_01 규칙을 소개한다. MISRA C 2012 규칙을 분석 후 해석하여, 원본 내용과 의미가 다를 수 있습니다. 해당 부분 피드백 주시면 반영하겠습니다. [규칙 요약(위배 원인 -&amp;gt; 수정 방법)] &amp;nbsp; [위험 요인] 프로그램이 개발자 의도와 다르게 컴파일될 수 있음 &amp;nbsp; [예외 사항] - &amp;nbsp; [상세 설명] 1. C90 또는 C99 표준에 명시된 C언어 특성과 라이브러리만 사용하며, 문법 및 제한사항 위배 금지 C언어 표준과 해당 규칙에서는 컴파일러가 언어 확장 제공을 허용한다. 대부분의 임베디드 컴파일러는 하드웨어에 의존적인 코드를 효율적으로 개발하기 위한 언어 확장을 제공하며, 언어 확장은 표준에서 명시하지 않는 추가적인 특성들인 경우가 많다. 예시) C90 표준에서는 inline 키워드를 지원하지 않지만, 일부 C90 컴파일러는 inline 키워드를 지원한다. 또한 변수 타입의 메모리 영역을 한정하는 __near와 __far와 같은 키워드를 제공한다. 2. 프로그램은 컴파일러 번역 제한 초과 금지 만약 번역 제한을 초과한 경우, 컴파일 오류는 아니지만 경고가 출력될 수 있다. 해당 경우 컴파일하면 실행 파일이 생성되지만, 프로그램이 개발자 의도와 다르게 실행될 수 있다. C99 표준, C11 표준에서 명시하는 번역 제한은 다음과 같다. - 문장 블록 중첩 수: 127 - #if...#else 중첩 수: 63 - 하나의 선언에서 포인터, 배열, 함수 선언 조합 수: 12 - 하나의 선언에서 괄호 선언 중첩 수: 63 - 하나의 수식에서 괄호 수식 중첩 수: 63 - 내부 식별자 혹은 매크로 이름의 significant character 수: 63 - 외부 식별자의 significant character 수: 31 - 하나의 번역 단위에서 외부 식별자 수: 4095 - 하나의 문장 블록에서 선언되는 식별자 수: 511 - 하나의 번역 단위에서 정의되는 매크로 식별자 수: 4095 - 하나의 함수 정의에서 매개변수 수: 127 - 하나의 함수 호출에서 인자 수: 127 - 하나의 매크로 정의에서 매개변수 수: 127 - 하나의 매크로 호출에서 인자 수: 127 - 하나의 논리적 코드 라인에 문자 수: 4095 - 하나의 문자열 상수에 문자 수: 4095 - 객체 바이트 크기(호스트 환경에서만 유효): 65535 - #include 중첩 수: 15 - 하나의 switch 문에서 case 수: 1023 - 하나의 구조체, 공용체에서 필드 수: 1023 - 하나의 열거형에서 열거자 수: 1023 - 하나의 구조체 선언에서 struct, unit 정의 중첩 수: 63 &amp;nbsp; [비고] ISO/IEC 9899:201x: 5.2.4.1 Translation limits &amp;nbsp; [원문] -" }, { "title": "무기체계 소프트웨어의 신뢰성시험 기타 사항 정리", "url": "/posts/Reliability-Test4/", "categories": "SW Test", "tags": "", "date": "2022-07-15 00:00:00 +0900", "snippet": " 본 글은 무기체계 소프트웨어의 정적시험을 소개하는 글이며, ‘방위사업청 매뉴얼 제2020-8호’에 참고하여 작성하였다.블랙박스 및 화이트박스 테스팅출처: https://m.blog.naver.com/PostView.nhn?blogId=suresofttech&amp;amp;logNo=220965464819&amp;amp;proxyReferer=https%3A%2F%2Fwww.google.com%2F디버그 모드에서 값을 변경하여 커버리지를 태우는 경우 신뢰성 시험에서는 디버그 모드에서 값을 변수의 값을 변경하여 커버리지를 태우면 안된다.#define과 #undef 사용으로 컴파일 되는 코드 형상이 변경되는 경우 원칙적으로 매크로에 따라 코드 형상이 2개가 되므로 각 매크로 정의에 따라서 신뢰성 시험이 수행되어야 한다. 매크로가 정의된 경우, 매크로가 정의되지 않은 경우로 테스트를 수행할 수 있다.무기체계 소프트웨어 개발 및 관리 매뉴얼 적용 기관연구개발주관:연구개발을 주관하여 수행하는 국과연 개발 부서 및 업체사업관리부서: 체계 또는 소프트웨어 개발사업을 직접관리 혹은 조정.통제하는 부서(국과연 사업 관리 부서, 방사청 통합사업관리팀) 주로 연구개발기관에서 수행한 결과를 검토한다.기술지원기관: 방사청, 국방기술품질원 주로 사업관리부서에서 수행한 결과를 검토한다기술지원기관 업무 분장 각 개발 단계 마다 신뢰성시험 및 실사 수행 소프트웨어 형상 변경이 거의 없으면 간략하게 신뢰성시험(문서 검토)을 수행한다.소요군: 육군, 공군, 해군개발 업체에 따른 실사 주체" }, { "title": "Project SW Test Forum 15. 유지보수 - 3", "url": "/posts/Project-SW-Test-Forum15/", "categories": "Web, Project SW Test Forum", "tags": "", "date": "2022-06-16 00:00:00 +0900", "snippet": " 유지보수 현황을 소개한다. branch는 master branch와 hanwha branch 총 두 개로 나누어서 관리한다. hanwha branch에는 ‘직급 정보 변경’, ‘코딩 규칙에 해당 되는 도구 규칙명을 출력하도록 UI 변경’을 적용하였다. github: https://github.com/scribnote5/sw_test_forumfeat: 리스트 페이지에서 다른 페이지로 이동시 정보 유지 구현 리스트 페이지에서 다른 페이지로 이동시 검색 정보, 페이지 정보를 유지함 vuex로 구현feat: 코딩 규칙에 해당 되는 도구 규칙명을 출력하도록 UI 변경 코딩 규칙에 해당 되는 도구 규칙명을 출력하도록 UI 변경 hanwha branch 만 적용feat: ckeditor ‘FindAndReplace’ 플러그인 추가 ckeditor ‘FindAndReplace’ 플러그인 추가fix: MisraCppExampleComment 오류 해결 잘못된 Listner 등록으로 이슈 발생 해결fix: MisraCppExampleUpdate에서 코드 강조 기능 오류 해결 코드를 강조하기 위한 배열을 전달하지 않은 것을 수정chore: 자바, 자바스크립트 최신 라이브러리 버전으로 변경 자바, 자바스크립트 최신 라이브러리 버전으로 변경chore: localhost url cors에 등록 localhost url cors에 등록chore: 잘못되거나 불필요한 코드 수정 이외 사소한 오류 수정 및 코드 리펙토링" }, { "title": "올바른 자료형 설계로 MISRA C, MISRA CPP 규칙 위배를 사전에 줄이는 방법", "url": "/posts/Essay2/", "categories": "Essay, MISRA C, MISRA CPP, SW Test", "tags": "", "date": "2022-06-04 00:00:00 +0900", "snippet": " 올바른 자료형 설계로 MISRA C, MISRA CPP 규칙 위배를 사전에 줄이는 방법을 소개한다. MISRA C와 MISRA C++에서는 자료형이 묵시적으로 형변환 되는 것을 금지한다. unsigned 자료형 변수와 signed 자료형 변수가 연산할 때(Casting 충격), 큰 자료형과 작은 자료형이 연산할 때 묵시적 형변환이 발생하여 하단 규칙들을 위배한다. 해당 규칙들로 인하여, 개발자가 예상하지 못한 연산 결과로 인하여 side effect가 발생할 수 있다.연관 MISRA C 2012, MISRA C++ 2008 규칙MISRA C 2012 MISRA_C_2012_10_03 - 표현식의 값은 더 작은 essential 타입이나 다른 essential 타입 분류에 타입를 갖는 객체에 할당되지 않아야 함 MISRA_C_2012_10_04 - 일반 산술 변환이 수행되는 연산자의 두 피연산자들은 필히 같은 essential 타입 분류에 속하는 타입이어야 함 MISRA_C_2012_10_05 - 수식의 값은 적절하지 않은 essential type으로 변환되지 않아야 함 MISRA_C_2012_10_06 - 복합 표현식의 값은 더 큰 essential 타입의 객체에 할당되지 않아야 함 MISRA_C_2012_10_07 - 복합 수식이 기본 산술 변환을 수행하는 연산자의 피연산자로 사용된 경우, 다른 피연산자는 해당 수식의 타입보다 큰 essential 타입을 가지지 않아야 함 MISRA_C_2012_10_08 - 복합 수식의 값은 다른 essential 타입 분류에 속하는 타입이나 더 큰 essential 타입으로 변환되지 않아야 함MISRA C++ 2008 MISRA_CPP_05_00_03 - cvalue 표현식(expression)의 근본 타입(underlying type)을 다른 타입으로 묵시적 변환 금지 MISRA_CPP_05_00_04 - 근본 타입(underlying type)의 부호를 변경하는 묵시적 정수 변환 금지 MISRA_CPP_05_00_05 - 부동소수 타입과 정수 타입 사이의 묵시적 변환 금지 MISRA_CPP_05_00_06 - 정수형이나 부동소수형의 근본 타입(underlying type)의 크기를 줄이는 묵시적 형변환 금지 MISRA_CPP_05_00_07 - cvalue 표현식(expression)의 근본타입(underlying type)이 변하는 부동소수형과 정수형간의 명시적 변환금지 MISRA_CPP_05_00_08 - cvalue 표현식(expression)의 근본타입(underlying type)의 크기를 증가시키는 정수형과 부동소수형간의 명시적 변환 금지 MISRA_CPP_05_00_09 - cvalue 표현식(expression)의 정수형 근본타입(underlying type)의 부호를 변경하는 명시적 정수 변환 금지위험 요인 해당 규칙 위배가 발생하는 위험 요인은 크게 2가지가 있다.Casting 충격 첫 번째는 unsigned 정수 자료형 값과 signed 정수 자료형의 값을 연산 할 때 발생하는 “Casting 충격”이다. “Casting 충격”은 연산에서 unsigned 정수 값과 signed 정수 값을 연산(비교 연산자 포함)할 때, signed 정수 자료형 값이 unsigned 자료형으로 묵시적 형변환이 발생한다. 음수는 매우 큰 양수로 바뀌며, 이로 인하여 의도하지 않은 연산 결과가 나올 수 있다.예제) int32_t, uint32_t 자료형 기준으로 Casting 충격 발생int32_t 최소값: -2147483648int32_t 최대값: 2147483647uint32_t 최소값: 0uint32_t 최대값: 4294967295 a는 음수고 b는 양수로 조건문이 거짓이 될 것 같지만, “Casting 충격”이 발생하여 a는 unsigned 정수 자료형으로 묵시적 형변환되어 2147483648U이 되어 조건문은 참이 된다.예제)int32_t a = -1;uint32_t b = 1U;// 묵시적 형변환 발생(Casting 충격 발생), 조건문은 참if (a &amp;gt; b) { printf(&quot;true\\n&quot;);}큰 자료형과 작은 자료형 연산 두 번째는 큰 자료형과 작은 자료형이 연산할 때, 묵시적으로 형변환 할 때 발생하는 경우다. 큰 자료형과 작은 자료형이 연산할 때, 작은 자료형이 큰 자료형으로 묵시적 형변환이 발생한다. 작은 자료형(int 자료형)이 큰 자료형(double 자료형)으로 묵시적 형변환하는 경우, 코딩 규칙(MISRA_C_2012_10_03, MISRA_C_2012_10_06, MISRA_CPP_05_00_05)을 위배 한다. 자료형 확장(묵시적 형변환) -&amp;gt; char &amp;lt; short &amp;lt; int &amp;lt; long &amp;lt; long long &amp;lt; float &amp;lt; double &amp;lt; long double 같은 크기를 가지는 unsigned 자료형은 signed 자료형 보다 크기가 크다.예제) int32_t &amp;lt; uint32_t예제)int32_t foo(int64_t a, int32_t b) { // 묵시적 형변환 발생(a는 작은 자료형인 int32_t로 묵시적 형변환) return a + b;}float_t boo(double_t a, int32_t b) { // 묵시적 형변환 발생(b는 double_t로, a + b는 float_t로 묵시적 형변환) return a + b;}수정 방향 함수 반환값, 함수 매개변수, 변수 연산 결과가 다른 자료형으로 묵시적 형변환 되는 경우 발생하며, 명시적 형변환을 사용하여 위배된 규칙을 수정할 수 있다. 그러나 함수 코드가 길어지고 로직이 복잡할수록 코드 분석에 많은 시간이 소요되므로 위배 수정이 어려워 진다. 따라서 규칙 위배를 수정하기 위한 가장 좋은 방법은 프로그램 설계할 때 크기와 부호를 고려하여 자료형을 사용하는 것이다. 전체적인 프로그램 로직을 잘 고려하여, 묵시적 형변환이 발생하지 않도록 올바른 자료형으로 변수를 선언해야 한다. 해당 규칙을 수정하면 Type_Overrun, Type_Underrun, Buffer_Overrun, Buffer_Underrun 취약점 또한 예방할 수 있다. 다음 예제는 규칙 위배가 발생하지 않도록 변수 자료형을 설계하는 방법이다. 명시적 형변환을 통해 위배를 수정 할 수 있으나, 프로그램 로직을 고려하여 올바른 자료형으로 변수를 선언하는 것을 권고한다. 함수 로직이 길어지는 경우 묵시적 형변환이 발생하는 모든 연산에 명시적 형변환을 수행해야하며, 이로 인해 코드 가독성이 떨어지고 에상하지 못한 변수의 값 손실이 발생 할 수 있다.예제)int64_t msgSize;int64_t remSize;uint64_t readSize;// 묵시적 형변환 발생if(readSize &amp;gt; remSize) { readSize = remSize;}if(readSize != 0){ msgSize += readSize;}-&amp;gt; (수정 방향)int64_t msgSize;int64_t remSize;uint64_t readSize;// 명시적 형변환if(static_cast(readSize) &amp;gt; remSize) { readSize = remSize;}if(static_cast(readSize) != 0){ msgSize += readSize;}또는int64_t msgSize;int64_t remSize;// 변수 자료형을 수정int64_t readSize;if(readSize &amp;gt; remSize) { readSize = remSize;}if(readSize != 0){ msgSize += readSize;}함수 설계 및 개발 방향 다음은 해당 규칙의 위배가 발생하지 않도록 함수 설계 단계에서 고려해볼 사항이다. 수정 방향이 “자료형을 잘 설계해야 한다”는 추상적인 내용이며 함수 설계 및 개발 할 때 이를 고려하기가 결코 쉽지 않다. 다음 예제와 코드로 설명하며, 조금이라도 위배 수정에 도움이 되면 좋을 것 같다.1. 반복문의 ‘초기식 변수’ 자료형을 잘 설계해야 한다. 초기식 변수를 반복문 내에서 피연산자로 사용하는 경우, unsigned 자료형과 signed 자료형이 서로 묵시적 형변환으로 위배가 발생할 수 있다.예제)vector AxisMgr::ThreadReferenceVector(THREADS);uint32_t bRet = 0;for (int32_t i = 0; i &amp;lt; ThreadReferenceVector.size(); i++){ if (ThreadReferenceVector[i] == cur_t) { // 위배, i 자료형은 int32_t, bRet 자료형은 uint32_t bRet = i; break; }}-&amp;gt; (수정 방향)vector AxisMgr::ThreadReferenceVector(THREADS);int32_t bRet = 0;for (int32_t i = 0; i &amp;lt; ThreadReferenceVector.size(); i++){ if (ThreadReferenceVector[i] == cur_t) { // 수정, i 자료형은 int32_t, bRet 자료형은 int32_t bRet = i; break; }}2. 반복문 ‘초기식 변수’ 자료형은 조건식 변수 자료형과 같게해야 한다. 만약 ‘초기식 변수’가 반복문 내부에서 연산을 수행하는 경우, 피연산자 간의 자료형을 같게해야 한다.예제)uint32_t msgSize;uint32_t index;// 위배, i 자료형은 int32_t, msgSize 자료형은 uint32_tfor (int32_t i = 0; i &amp;lt; msgSize; i++){ // ... index += i;}-&amp;gt; (수정 방향)uint32_t msgSize;uint32_t index;// 수정, i 자료형은 int32_t, msgSize 자료형은 int32_tfor (uint32_t i = 0; i &amp;lt; msgSize; i++){ // ... index += i;}3. 배열 요소를 참조할 때 사용하는 ‘인덱스, 길이, 크기’ 등은 size_t 자료형 사용을 고려해야 한다. 일반적으로 시스템 라이브러리에서는 ‘인덱스, 길이, 크기’를 표현하기 위해 size_t 자료형을 사용한다. size_t 자료형은 시스템에서 표현할 수 있는 가장 큰 unsigned 정수 자료형으로, Linux 64bit GCC 8.1에서 size_t는 typedef unsigned __int64 size_t;로 정의되어 있다. C++ 컨테이너에서 사용하는 size_type 자료형은 size_t 자료형과 같다. sizeof 연산자는 size_t를 반환한다. C에서 size_t 자료형을 사용하는 대표적인 함수는 다음과 같다. size_t fwrite(const void* ptr, size_t size, size_t count, FILE* stream);int strncmp(const char* str1, const char* str2, size_t num);int memcmp(const void* ptr1, const void* ptr2, size_t num);void* memset(void* ptr, int value, size_t num);void* malloc(size_t size); C++에서 size_t, size_type 자료형을 사용하는 예제는 다음과 같다. std::vector::size, size_type size() const noexcept;std::vector::size, size_type max_size() const noexcept;std::basic_string::find, string (1) size_type find (const basic_string&amp;amp; str, size_type pos = 0) const noexcept;std::stoll, long long stoll (const wstring&amp;amp; str, size_t* idx = 0, int base = 10); 예제)vector AxisMgr::ThreadReferenceVector(THREADS);// vector.size() 함수는 벡터의 크기를 반환// 위배, i 자료형은 int32_t, ThreadReferenceVector.size() 자료형은 size_tfor (int32_t i = 0; i &amp;lt; ThreadReferenceVector.size(); i++)-&amp;gt; (수정 방향)vector AxisMgr::ThreadReferenceVector(THREADS);// vector.size() 함수는 벡터의 크기를 반환// 벡터의 크기를 구하는 size() 함수는 size_t 자료형을 반환for (size_t i = 0; i &amp;lt; ThreadReferenceVector.size(); i++)예제)queue msgQueue;// msgQueue.size() 함수는 큐의 크기를 반환// 위배, msgQueue.size() 자료형은 size_t 이지만, signed int 상수를 뺄셈uint32_t index = msgQueue.size() - 1;-&amp;gt; (수정 방향)queue msgQueue;// msgQueue.size() 함수는 큐의 크기를 반환// 수정, msgQueue.size() 자료형은 size_t 이지만, unsigned int 상수를 뺄셈uint32_t index = _sgQueue.size() - 1U;4. 매크로 및 매크로 함수를 사용하지 않는다. 매크로 및 매크로 함수는 자료형을 검사하지 않으므로, 잘못된 자료형으로 형변환 될 수 있다. 또한 매크로가 코드로 치환되는 과정에서 개발자가 예상하지 못한 연산자 우선순위 영향으로 인하여 의도하지 않은 결과가 나올 수 있다. 따라서 C/C++에서 매크로 및 매크로 함수를 유의하여 사용해야 한다. MiSRA C 2012에서는 매크로를 사용할 수 있지만, 매크로 함수 사용을 금지한다.(MISRA_C_2012_DIR_04_09) MISRA CPP 2008에서는 include guard를 위한 매크로 이외의 매크로 사용을 금지한다. (MISRA_CPP16_02_02) 기개발된 코드와의 호환성을 위해 매크로 관련 규칙을 정적시험에서 사전 제외하는 사례가 빈번하게 있다. C에서 매크로에 리터럴 접미사(예제, 1000U, 234L 등) 를 사용하면 위배를 수정할 수 있으며, 매크로 대신 전역 상수 및 enum으로 대체할 수 있다. C++에서 매크로를 클래스 정적 멤버 상수 또는 enum으로 대체할 수 있다. C/C++에서 매크로 함수는 인라인 함수로 대체하여 사용 할 수 있다.예제)#define BUF_SIZE 100uint32_t length;// 위배, i 자료형은 int32_t, BUF_SIZE는 signed 정수 자료형으로 인식for(int32 i = 0; i &amp;lt; length - BUF_SIZE; i++) {}-&amp;gt; (수정 방향)#define BUF_SIZE 100Uuint32_t length;// 수정, i 자료형은 int32_t, BUF_SIZE는 unsigned 정수 자료형으로 인식for(uint32 i = 0; i &amp;lt; length - BUF_SIZE; i++) {.}예제)#define MESSAGE_BYTES_SIZE ((((36) + 4) / 4 ))uint32_t n3DataWords;// 위배, n3DataWords 자료형은 uint32_t, MESSAGE_BYTES_SIZE는 signed 정수 자료형으로 인식int32_t sizeWord = n3DataWords + MESSAGE_BYTES_SIZE;-&amp;gt; (수정 방향)#define MESSAGE_BYTES_SIZE ((((36U) + 4U) / 4U ))uint32_t n3DataWords;// 수정, n3DataWords 자료형은 uint32_t, MESSAGE_BYTES_SIZE는 unsigned 정수 자료형으로 인식int32_t sizeWord = n3DataWords + MESSAGE_BYTES_SIZE;또는#define MESSAGE_BYTES_SIZE ((((36) + 4) / 4 ))int32_t n3DataWords;// 수정, n3DataWords 자료형은 int32_t, MESSAGE_BYTES_SIZE는 signed 정수 자료형으로 인식int32_t sizeWord = n3DataWords + MESSAGE_BYTES_SIZE;5. 프로그램 로직을 고려하여 클래스 멤버 필드 자료형, 구조체 멤버 변수 자료형, 함수 반환 및 매개변수 자료형, 변수 자료형 등을 잘 설계해야 한다. 함수 호출 할 때 전달 인자 자료형 및 반환 자료형을 고려하여 변수를 선언해야 한다.예제)int32_t GetId();uint32_t id;int32_t label;int32_t subLabel;// 위배, id 자료형은 uint32_t, GetId() 반환값 자료형은 int32_tid = GetId();label = (id % 100000) / 10000;subLabel = (id % 1000) / 100;id = id * 100;-&amp;gt; (수정 방향)int32_t GetId();int32_t id;int32_t label;int32_t subLabel;// 수정, id 자료형은 int32_t, GetId() 반환값 자료형은 int32_tid = GetId();label = (id % 100000) / 10000;subLabel = (id % 1000) / 100;id = id * 100;예제)void SetOffset(uint32_t byteOffset, uint32_ bitOffset);int32_t GetBitOffset();uint32_t wordBitOffset;// 위배, wordBitOffset 자료형은 uint32_t, GetBitOffset() 함수 반환값 자료형은 int32_tinBuffer.SetOffset(wordBitOffset + GetBitOffset());-&amp;gt; (수정 방향)void SetOffset(uint32_t byteOffset, uint32_ bitOffset);uint32_t GetBitOffset();uint32_t wordBitOffset;// 수정, wordBitOffset 자료형은 uint32_t, GetBitOffset() 함수 반환값 자료형은 uint32_tinBuffer.SetOffset(wordBitOffset + GetBitOffset());" }, { "title": "Project SW Test Forum 14. 유지보수 - 2", "url": "/posts/Project-SW-Test-Forum14/", "categories": "Web, Project SW Test Forum", "tags": "", "date": "2022-04-14 00:00:00 +0900", "snippet": " 유지보수 현황을 소개한다. 프로젝트 유지보수 하고 C# 코딩 규칙 페이지를 구현하였다. github: https://github.com/scribnote5/sw_test_forumfeat: C# 코딩 규칙 페이지 구현 FxCop, StyleCop 코딩 규칙 페이지 구현feat: 리스트 페이지에서 글 번호가 순차적으로 출력되도록 수정 글 번호가 게시글의 PK 출력 대신, 순차적인 글 번호를 출력하도록 수정feat: 헤더에 사용자 아이디 출력 헤더에 사용자 아이디 출력fix: 규칙 삭제할 때 해당 규칙과 연관된 데이터 모두 삭제 규칙을 삭제하면 이와 연관된 데이터(예제, 예제 댓글, 가이드라인, 가이드라인 댓글, 가이드라인 좋아요, 가이드라인 첨부파일)을 모두 삭제 가이드라인 삭제하면 연관된 데이터(좋아요, 댓글, 첨부파일)을 모두 삭제fix: 사용자 수정 접근 오류 수정 사용자가 자신을 수정할 수 없었던 오류 수정fix: 오류 메시지 수정 오류 메시지를 잘못 출력하는 경우 수정fix: 컴파일러 정보, 프로젝트 정보 입력 값이 누락되는 오류 수정 자동 완성 제안을 위해서 각 규칙 페이지 정보가 누락되는 오류 수정style: root 사용자 외 설정 페이지 접근 불가 root 사용자 외 다른 사용자가 설정 페이지 링크를 클릭하지 못하도록 수정style: IP로 사용자 로그인 지역 알 수 없는 경우 처리 해당 경우 “No Data”로 출력되도록 수정style: 규칙 보기 페이지에서 가이드라인 리스트 ellipsiss 처리 행이 길어지는 경우 …(ellipsis) 처리style: 버튼 여백 수정-각 페이지에 존재하는 버튼 x축 여백(mx-4)을 x축 여백(mx-3)으로 변경style: 모바일 페이지에서 파일 업로드 ‘드래그 앤 드랍으로 업로드 할 수 있습니다.’ 출력 여백 추가 ‘드래그 앤 드랍으로 업로드 할 수 있습니다.’에 x축 여백 추가chore: JWT 유효기간 변경 한 달에서 3일로 변경chore: 잘못된 코드 수정 이외 사소한 오류 수정" }, { "title": "Project SW Test Forum 13. 유지보수 - 1", "url": "/posts/Project-SW-Test-Forum13/", "categories": "Web, Project SW Test Forum", "tags": "", "date": "2022-03-18 00:00:00 +0900", "snippet": " 유지보수 현황을 소개한다. 프로젝트에 MISRA C++ 규칙을 입력하는 도중 다양한 이슈를 발견하고 유지보수 하였다. 테스트에 많은 시간을 투자하지 못하였기에, 사용 도중에 예기치 못한 이슈가 많이 발견되었다. 역시 테스트에 많은 시간을 투자하여 이슈를 찾는 것이 중요하다.(QA팀이 있는 이유) github: https://github.com/scribnote5/sw_test_forumfeat: 비밀번호 문의 구현 로그인 페이지에서 ‘비밀번호 문의’를 선택하면 관리자 권한 사용자의 간략한 정보와 메일 주소를 출력fix: 가이드라인 결과 출력 수정 가이드라인 결과에서 ‘,’가 잘못 출력 되는 부분 수정refactor: 폰트 저장소 변경 웹 폰트에서 로컬로 변경chore: / 경로 이동 redirect / 경로 이동시 /login으로 redirectchore: ckeditor content 변경 ckeditor 규칙 설명 문구 변경chore: JWT 유효기간 변경 하루에서 한 달로 변경fix: 데이터 기록 검색 기능 오류 수정 게시글 수정할 때 auditType 잘못 입력되는 것 수정 데이터 기록 검색 기능이 로그인 기록 검색 기능으로 구현된 오류 수정fix: get 방식 검색 오류 수정 특수 문자 입력 후 검색하면, 특수 문자가 누락되는 오류 encodeURIComponet 함수 사용하여 해결출처: https://steady-snail.tistory.com/111feat: 검색 편의성 기능 구현 검색어 입력 후 엔터키를 입력하면 검색되는 기능 구현feat: 좋아요 기능 구현 규칙 가이드라인 페이지에서 좋아요 기능 구현, 가이드라인을 ‘좋아요‘ 내림차순으로 정렬 규칙 가리드라인 리스트 페이지에서 ‘좋아요(하트)’ 갯수를 확인할 수 있다. 규칙 가리드라인 읽기 페이지에서 ‘좋아요(하트)’ 갯수를 확인할 수 있고, ‘좋아요’와 ‘좋아요 취소’를 할 수 있다.fix: 예제 및 가이드라인 목록 버튼 선택 시 잘못된 경로 이동 수정 규칙 읽기 페이지 -&amp;gt; 예제 및 가이드라인 게시글 선택 -&amp;gt; 목록 버튼 선택 시 전체 목록 페이지 이동을 해당 규칙 예제 및 가이드라인으로 이동style: 비어있는 해시태그 스타일 적용 해시태그에도 스타일 적용fix: Spring boot XSS filter(HTML escape) 제거 Vue에서는 XSS 공격 대비를 위한 HTML escape가 이미 구현되어 있으므로, Spring boot HTML escape 코드 주석 처리 이에 따라 댓글 등록시 XSS 취약점이 발생하지 않도록 코드 수정출처: https://kr.vuejs.org/v2/guide/security.htmlhttps://stackoverflow.com/questions/54979287/replace-n-to-new-line-on-vuejschore: 잘못된 코드 수정 규칙 리스트 페이지 잘못된 출력, 리스트 정렬 중복 수정, 잘못된 변수 사용, 태그 및 스타일 중복 사용" }, { "title": "MISRA_C_2012_08_06 외부 연결 식별자는 하나의 외부정의(external definition)를 가져야 한다.", "url": "/posts/MISRA-C-08-06/", "categories": "MISRA C, SW Test", "tags": "", "date": "2022-03-14 00:00:00 +0900", "snippet": " MISRA_C_2012_08_06 규칙을 소개한다. 여러 개의 정의를 가졌거나 또는 다른 파일 내에 정의가 존재하지 않으면 일반적으로 링킹(linking)시에 오류가 발생하며, 오류가 발생하지 않으면 정의하지 않은 행동이 발생한다. 다른 파일 내에서의 동일한 식별자로 정의된 객체나 함수는 내용이 같더라도 허용되지 않는다.(one definition rule 위반) MISRA_C_2012 규칙에서, 전역 변수 및 함수를 선언하여 사용하는 방법은 다음과 같다.&amp;lt;common.h&amp;gt;#ifndef COMMON_HEADER#define COMMON_HEADER#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdint.h&amp;gt;typedef char char_t;// 전역 변수 extern 선언 및 일반 선언extern int32_t common_data;int32_t common_data;#endif&amp;lt;foo.h&amp;gt;#include &quot;common.h&quot;// 함수 선언은 헤더 파일에 존재, 함수명 중복 금지void foo(void);&amp;lt;foo.c&amp;gt;#include &quot;foo.h&quot;// 함수 선언은 c 파일에 존재void foo(void) { common_data = 200; (void)printf(&quot;foo common_data: %d \\n&quot;, common_data);}&amp;lt;main.c&amp;gt;#include &quot;common.h&quot;#include &quot;foo.h&quot;int32_t main() { common_data = 100; (void)printf(&quot;main common_data: %d \\n&quot;, common_data); foo(); (void)printf(&quot;main common_data: %d \\n&quot;, common_data); return 0;}" }, { "title": "Project Lab 29. 추가 개발 및 유지보수 - 3", "url": "/posts/Project-Lab29/", "categories": "Web, Project Lab", "tags": "", "date": "2022-02-23 00:00:00 +0900", "snippet": " 추가 개발 및 유지보수 현황을 소개한다.버그 수정: 관리자 album 해시태그 비정상 작동 사용자 album 페이지에 메인 해시태그가 중복되어 출력되는 것을 확인하였으며, 이를 통해서 album 페이지 해시태그 로직이 잘못된 것을 확인함 관리자 album 페이지에서 해시태그가 정상적으로 작동되지 않는 오류 수정" }, { "title": "Project SW Test Forum 12. pdf 파일 출력 기능 구현 - 1", "url": "/posts/Project-SW-Test-Forum12/", "categories": "Web, Project SW Test Forum", "tags": "", "date": "2022-02-22 00:00:00 +0900", "snippet": " Vue.js 3에서 pdf 파일 출력 기능 개발 과정을 소개한다. github: https://github.com/scribnote5/sw_test_forumpdf 파일 출력 기능 및 구현 결과 아직 Project SW Test Forum이 활성화 되어 있지 않은 단계에서, 작성한 게시글을 pdf로 출력하여 공유하는 방식이 많은 사람의 관심 및 이목을 끄는데 효과적이라고 생각하였다. 또한 본사 직원이 아닌 다른 사람에게 정보를 공유해야 하는 경우, 회원 권한을 줄 수 없으므로 게시글을 pdf로 출력하여 전달해야 한다. 하단 이미지에서 ‘pdf 출력’ 버튼을 선택하면 로딩바가 보여지고, 로딩바가 사라지면 생성된 pdf 파일을 다운 받을 수 있다. 생성된 pdf 파일은 다음 이미지와 같다. pdf 파일 상단, 좌우에 약간의 여백이 존재한다. pdf 파일 페이지 변경시 이미지가 잘리는 부분은 라이브러리의 한계로 해결이 어렵다. html 태그 식별자(일반적으로 id) 마다 출력하는 페이지를 지정한다면, 해당 문제를 해결 할 수 있다. 읽기 페이지에서만 ‘pdf 출력’ 버튼이 존재한다. 다음 이미지와 같이 리스트 페이지에서는 버튼이 없다. ‘pdf 출력’ 버튼을 읽기 페이지에서만 출력하도록 구현하고, 버튼 유무에 따라 레이아웃이 깨지지 않도록 수정하는데 생각보다 많은 시간이 소요되었다.pdf 파일 출력 기능 구현 pdf 파일 출력 html2canvas(html 코드를 이미지 파일로 생성)와 jspdf(이미지 파일을 pdf 파일로 생성)라이브러리를 사용하여 기능을 개발하였다 하단 출처를 참고하여 개발하였다. 이외 pdf 파일 내 상단, 좌우 여백은 html2canvas와 jspdf 높이 및 넓이 설정을 알아본 다음 수정하였다.&amp;lt;module-app-web\\front\\src\\components\\common\\Breadcrumb.vue&amp;gt;&amp;lt;script&amp;gt;import {jsPDF} from &quot;jspdf&quot;;import html2canvas from &quot;html2canvas&quot;;export default { name: &quot;Breadcrumb&quot;, components: {}, props: { page: String, subPage: String, paths: Array, title: String, }, setup(props) { const printPdf = async () =&amp;gt; { document.getElementById(&quot;loading-wrapper&quot;).style.visibility = &quot;visible&quot;; await createPdf(); document.getElementById(&quot;loading-wrapper&quot;).style.visibility = &quot;hidden&quot;; } const createPdf = () =&amp;gt; { return new Promise((resolve, reject) =&amp;gt; { html2canvas(document.getElementsByClassName(&quot;page-content&quot;)[0], { logging: false, allowTaint: true, useCORS: true, scale: 3 // 기본 해상도 3배 증가 } ).then(canvas =&amp;gt; { let filename = &#39;OTA-REPORT_&#39; + Date.now() + &#39;.pdf&#39;; let doc = new jsPDF(&#39;p&#39;, &#39;mm&#39;, &#39;a4&#39;); let imgData = canvas.toDataURL(&#39;image/png&#39;); let imgWidth = 200; // A4: 210 let pageHeight = 297; // A4: 297 let imgHeight = (canvas.height * imgWidth / canvas.width) - 10; let heightLeft = imgHeight; let position = 10; doc.addImage(imgData, &#39;png&#39;, 5, position, imgWidth, imgHeight); heightLeft -= pageHeight; while (heightLeft &amp;gt;= 0) { position = heightLeft - imgHeight + 10; doc.addPage(); doc.addImage(imgData, &#39;png&#39;, 5, position, imgWidth, imgHeight); heightLeft -= pageHeight; } doc.save(props.title); resolve(true); }); }); } return { // function printPdf, isEmpty } }}&amp;lt;/script&amp;gt;출처: https://soye0n.tistory.com/247" }, { "title": "Project SW Test Forum 11. CodeMirror 하이라이트 기능 구현 - 1", "url": "/posts/Project-SW-Test-Forum11/", "categories": "Web, Project SW Test Forum", "tags": "", "date": "2022-02-14 00:00:00 +0900", "snippet": " Vue.js 3에서 CodeMirror 하이라이트 기능 개발 과정을 소개한다. github: https://github.com/scribnote5/sw_test_forum코드 하이라이트 기능? 회사 업무에서 정적시험 규칙 자료 및 가이드라인을 작성할 때, 규칙 위배 코드에는 빨간 글자색을, 규칙 수정 코드에는 파란 글자색으로 표현하였다. 사용자가 문서를 읽을 때 가독성을 향상시키지만, Project SW Test Forum에서는 코드 색상 처리 기능을 고려하지 못하였다. 따라서 가독성을 향상시키기 위해서 코드 색상 처리 기능을 추가 구현하게 되었다. 코드 색상 처리 기능은 글자 색을 변경하는 방식으로 기획하였으나, 코드 배경 색상이 더 가독성을 뛰어나다고 생각하여 해당 방식으로 구현하였다. 그리고 CodeMirror 관련 코드를 크게 수정하였다. 전반적인 코드 가독성 및 알고리즘 로직을 수정하였다.CodeMirror 하이라이트(코드 배경 색상 변경) 기능 구현 CodeMirror 라이브러리를 사용하여 하이라이트 기능을 개발하였다. 코드를 블록 후 ‘하이라이트’ 버튼을 선택하면 블록된 코드 배경색이 빨간색 또는 초록색으로 변경된다. ‘하이라이트’된 코드 블록 후 ‘되돌리기’ 버튼을 선택하면 배경색이 원래대로 돌아온다. 참고한 코드는 다음 출처와 같다.(CodeMirror 메뉴얼과 구글링을 통해서 기능을 구현 하였다. 그러나 구글링을 통하여 이미 구현된 코드를 발견하였다. 메뉴얼을 숙지하지 않은 상태로 구현하다 보니 코드가 깔끔하지 못하고 엉망진창 상태라서, 하단 출처 코드로 대체하였다. 구글링을 꼼꼼히 하자…)CodeMirror Marker 생성 CodeMirror에서는 marker 기능을 통하여 코드 내 클래스를 삽입할 수 있다. 해당 기능을 통하여 하이라이트 기능을 구현하였다. marker는 line(코드 행)과 ch(코드 열)로 생성 할 수있다. marker.getCursor 함수는 CodeMirror 에디터에서 선택된 line(행)과 ch(열) 영역을 반환한다.nonCompliantExample.markText(nonCompliantExample.getCursor(true), nonCompliantExample.getCursor(false), {className: &quot;bad-case-highlight&quot;});CodeMirror Marker 검색 및 삭제 marker.findMarkers() 함수는 line과 ch 사이에 존재하는 모든 marker을 검색한다. marker.clear() 함수는 mark를 삭제한다.nonCompliantExample.findMarks(nonCompliantExample.getCursor(true), nonCompliantExample.getCursor(false)).forEach(marker =&amp;gt; marker.clear());CodeMirror Marker 경로 저장 marker.find() 함수는 marker의 시작 위치와 종료 위치를 반환한다. 반환된 값을 사용하여 marker 경로를 배열에 저장한다. marker 경로는 DB에 저장되고, CodeMirror를 호출 할 때 marker 경로를 불러와 marker을 생성한다.for (const marker of nonCompliantExample.getAllMarks()) { badCasePosition.push([marker.find().from.line, marker.find().from.ch, marker.find().to.line, marker.find().to.ch]);}출처: http://jsfiddle.net/aljordan82/4ewe9/구현 결과 CodeMirror 에디터에서 블럭 지정 후, 하이라이트 버튼을 클릭하면 코드 배경화면이 빨간색(Bad case)와 초록색(Good case)로 변경된다. CodeMirror 에디터에서 하이라이트된 지정된 코드를 블럭 지정 후, 되돌리기 버튼을 클릭하면 배경화면 색상이 원래대로 돌아온다." }, { "title": "Project SW Test Forum 10. 운영 서버 배포 및 후기 - 1", "url": "/posts/Project-SW-Test-Forum10/", "categories": "Web, Project SW Test Forum", "tags": "", "date": "2022-02-08 00:00:00 +0900", "snippet": " Vue.js 3와 Spring boot로 개발한 프로젝트 배포 과정을 소개한다. github: https://github.com/scribnote5/sw_test_forum운영서버 배포를 위한 Vue.js 프로젝트 빌드 운영서버 환경은 prod 실행모드에서 실행되도록 설정(환경변수가 prod 모드에 맞춰짐) 하였으며, 다음 명령어를 사용하여 프로젝트를 prod 실행모드로 빌드한다. ‘프로젝트명-dist’라는 디렉터리(module-app-web-dist)가 생성되며, nginx를 사용하여 서버를 실행한다.$ npm run build -- --mode prod 빌드하면 생성되는 ‘프로젝트명-dist’ 디렉터리 경로는 다음과 같이 설정하면 변경할 수 있다.&amp;lt;module-app-web\\front\\vue.config.js&amp;gt;// ...module.exports = { outputDir: path.resolve(__dirname, &quot;./module-app-web-dist&quot;), // ...출처: https://stackoverflow.com/questions/50772662/npm-run-build-mode-env-mode-not-working-as-expectedhttps://hello-bryan.tistory.com/268운영서버 배포를 위한 Spring boot 프로젝트 빌드 다음 명령어를 사용하여 빌드한다.$ ./gradlew clean bootJar서버 설치 및 설정 서버 운영체제는 Ubuntu 20.04 이며, 서버 구축에 필요한 패키지 설치 과정은 ‘Project Lab 23, 26. 개발 및 운영 서버 배포 - 1’ 게시글을 참고하였다. nginx에서 Vue.js 프로젝트를 실행하는 설정은 다음과 같다. loaction의 root에 Vue.js 프로젝트 빌드한 디렉터리 경로를 넣어주면 된다. 이후 nginx 설정을 다시 불러오는 nginx -s reload 명령어를 수행하면 된다.&amp;lt;/etc/nginx/nginx.conf&amp;gt;# ... server { listen 8080; server_name ...; location / { root &amp;lt;path&amp;gt;/module-app-web-dist; index index.html; try_files $uri $uri/ /index.html; proxy_cookie_path / &quot;/; secure; SameSite=None&quot;; } # 봇 정보 수집 방지 location /robots.txt { return 200 &quot;User-agent: *\\nDisallow: /&quot;; } }}DevTools failed to load SourceMap 경고 메시지 없애기 운영서버에 접속하면 다음 하단 이미지와 같은 DevTools failed to load SourceMap 경고 메시지가 출력되었다. 오류가 발생하여 출력되는 메시지는 아니지만, 은근히 신경쓰여서? 다음과 같이 코드를 수정하여 해결하였다. 오류가 출력되는 파일로 이동하여, // # sourceMappingURL=ckeditor.js.map 코드를 다음과 같이 주석 처리하거나 삭제하면 된다.출처: https://sens.tistory.com/566Project SW Test Forum 개발 하면서… 약 7개월 간 개발을 끝으로, 프로젝트를 마무리 지었다. 회사 업무 시스템에 한계를 느껴 개발한 두 번째 개인 프로젝트로서, Project Lab의 한계를 느껴 SPA(Single Page Application)인 Vue.js를 도입하였다. 이미 Project Lab을 통해서 개발된 코드를 재활용하면, Project SW Test Forum을 금방 개발할 수 있었지만, 새로운 기술에 대한 궁금증과 도전의식에 더 많은 시간을 투자하게 되었다. Vue.js를 새로 접한다고 해도 Project Lab. 코드를 재활용하면 길어야 4개월이면 개발 완료할 것이라고 생각했다. 그러나 개발 가능한 시간의 부족함(회사 일 병행, 그냥 개발 귀찮음, 예기치 못한 다양한 오류 등)을 접하면서 개발 완료까지 많은 시간이 걸렸다. 내 초기 의도와 다르게 회사 업무 시스템을 변경하는 것은 생각보다 어려웠다. 좋은 취지에서 개발하였지만 이를 활성화 하고 많은 사람들의 참여를 유도하는 것은 별개였다. 팀원분들과 직속 임원분에게 개발 의견을 전달하였고 많은 사람들이 프로젝트를 만든 취지에 대해서 모두 공감하였다. 그러나 내가 시간을 투자하여 유의미한 데이터를 넣지 않는한 묻혀버릴 프로젝트라고 생각한다. 아직 유의미한 데이터가 없는 웹사이트에 다른 사람들이 방문하지 않을 것이기 때문이다. 해당 프로젝트를 활성화 시키기 위해서는 초기 데이터를 넣는 작업이 중요하다. 프로젝트에 데이터는 시간이 될 때 마다 차츰 작성할 예정이다. 이는 업무 시간 뿐만 아니라 개인적인 시간이 많이 투자 될 수 있기에 조심스러운 부분이다. 넣어야 할 데이터는 산더미이다. 같이 일하고 있는 한화시스템에서 정적시험 규칙 정리 웹사이트를 만들어서 사용 중이며, 코드를 수정하여 전사적으로 사용할 게획이다. 이에 따른 코드 수정 요청이 들어왔는데, 오래전에 만들어진 웹사이트다 보니 완성도는 떨어진다.(무려 bootstrap 3를 사용하고 있고, 20년전 디자인 및 UI) 또한, Node.js 기반으로 개발된 프로젝트다 보니 코드를 분석하는데 쉽지 않았다. 담당자분에게 내가 만든 웹페이지를 권고하고 싶었지만, 차마 일이 커질 것 같아서 애기하지 못하였다. 프로젝트 완료하여 기분이 좋아야 하지만, 아직 사용자가 없어서 아쉬울 따름이다. 다음에는 무엇을 만들어 볼까?Project SW Test Forum. 개발 이후…(22.06.05) 오래된 프로젝트 코드 분석 및 개발에 한계를 느낀 나는 최근 한화시스템 담당자분에게 내가 만든 웹페이지를 대안으로 제안하였고, 높은 완성도와 기능에 크게 좋아하시면서 사용하기로 결정하였다.(내 입으로 말하기 그렇지만, 한화시스템에서 기존에 사용하는 웹페이지와의 퀄리티가 차원이 다르다.) 한화시스템 담당자분은 약간의 요구사항을 요청하였고, 정적시험 규칙 정리 자료를 제공하기로 하였다. 현재 사외망 서버 PC에 환경을 구성하였으며 이번년도 하반기에 일반 사용자에게 배포하는 것을 목표로 데이터를 등록할 예정이다. 놀라운 점은 LIG 넥스원에서는 Confluence를 사용하여, 전사적으로 정적시험 규칙 자료들을 공유하고 있었고 완성도 또한 높아 보였다. 주변에서 완성도 높은 웹사이트를 무료로 제공하는 것에 의문을 표현하는 팀원이 있었다. 많은 사람들이 내가 만든 사이트를 사용하고 나로 인하여 업무 시스템을 개선하는 것에 큰 성취감을 느끼기에 만족한다. 나의 작은 노력이 많은 사람들의 업무 프로세스에 혁신을 가져오면 좋겠다.전체적인 프로젝트 웹페이지 프로젝트의 주요 웹페이지 스크린샷은 다음과 같다.로그인 페이지메인 페이지(대시 보드) 전체적인 통계 및 게시글 리스트를 확인 할 수 있다.정적시험 규칙 읽기 페이지 정적시험 규칙을 선택하면, 읽기 페이지로 이동한다. 해당 페이지에서 규칙에 대한 설명, 예제 코드, 가이드라인을 확인 할 수 있다.도구 트러블 슈팅 작성 페이지 도구 트러블 슈팅을 해결한 방법을 작성하는 페이지다. 어떠한 형식으로 작성해야 하는지에 대한 템플릿을 제공한다. 또한 에디터에서 # 특수문자로 문자를 입력하면, 오류 로그가 발생한 도구 경로를 자동으로 제안한다.(CKEditor mention 기능)지식 저장소 작성 페이지 테스트에 대한 다양한 지식을 작성하는 페이지다. 실사, 교육자료, 공부하면서 정리한 내용 등을 작성할 계획이다.로그인 기록 사용자들의 로그인 기록을 확인 할 수 있다.설정 페이지 메인 페이지에서 출력하는 정적시험 규칙 및 개발자에게 메일 보내기를 설정하는 페이지다." }, { "title": "Project SW Test Forum 9. 기타 기능 구현 - 1", "url": "/posts/Project-SW-Test-Forum9/", "categories": "Web, Project SW Test Forum", "tags": "", "date": "2022-02-06 00:00:00 +0900", "snippet": " Vue.js 3와 커스텀 플러그인(에디터 크기 변경) 구현 과정을 소개한다. github: https://github.com/scribnote5/sw_test_forum해시태그 구현 페이스북, 트위터 등에서 사용하는 해시태그를 구현하였다. 게시글의 메타 데이터로 분류 및 검색에 큰 도움이 될 것이라고 생각하였다. 해시태그는 ‘#태그 이름’ 으로 등록할 수 있으며, 특수 문자는 사용 할 수 없다. 등록 버튼을 클릭하면 해시태그가 추가되며, x 버튼을 선택하여 등록된 해시태그를 삭제 할 수 있다. 등록된 해시태그는 드래그 앤 드랍으로 이동할 수 있다. 해시태그는 다음과 같이 출력된다. Vue에서 HashTags 컴포넌트로 props에 pageInformation(리스트 페이지인지, 등록 페이지인지, 수정 페이지인지에 대한 정보)와 hashTags(해시태그 데이터)를 전달하면 된다. DB에는 ‘#해시태그#해시태그#해시태그’ 데이터 형태로 저장된다.&amp;lt;module-app-web\\front\\src\\components\\common\\HashTags.vue&amp;gt;&amp;lt;template&amp;gt; &amp;lt;span v-if=&quot;pageInformation === &#39;list&#39;&quot;&amp;gt; &amp;lt;span v-if=&quot;isEmpty(hashTags)&quot;&amp;gt; #- &amp;lt;/span&amp;gt; &amp;lt;span v-else v-for=&quot;(hashTag, i) in hashTags.split(&#39;#&#39;)&quot; :key=&quot;i&quot;&amp;gt; &amp;lt;span v-if=&quot;i === 0&quot; class=&quot;hash-tag-in-list&quot;&amp;gt;#&amp;lt;/span&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;div v-if=&quot;pageInformation === &#39;write&#39; || pageInformation === &#39;update&#39;&quot;&amp;gt; &amp;lt;div class=&quot;autoComplete_wrapper d-flex justify-content-between&quot;&amp;gt; &amp;lt;div class=&quot;d-flex w100-80px&quot;&amp;gt; &amp;lt;input type=&quot;text&quot; name=&quot;hashTag&quot; id=&quot;hashTag&quot; class=&quot;form-control&quot; placeholder=&quot;#태그 이름↵(특수 문자 사용 불가)&quot;/&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&quot;d-flex&quot;&amp;gt; &amp;lt;button @click=&quot;hashTagsAddEvent()&quot; class=&quot;btn btn-sm btn-outline-main-blue&quot;&amp;gt;등록&amp;lt;img :src=&quot;require(`@/assets/images/write-main-blue.svg`)&quot; class=&quot;ms-2&quot;&amp;gt;&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div id=&quot;hashTagsWrapper&quot; class=&quot;my-2 py-1&quot;&amp;gt; &amp;lt;input type=&quot;hidden&quot; name=&quot;hashTags&quot; id=&quot;hashTags&quot; model=&quot;hashTags&quot; class=&quot;form-control&quot; readonly/&amp;gt; &amp;lt;span v-if=&quot;pageInformation === &#39;update&#39; &amp;amp;&amp;amp; !isEmpty(hashTags)&quot; v-for=&quot;(hashTag, i) in hashTags.split(&#39;#&#39;)&quot; :key=&quot;i&quot;&amp;gt; &amp;lt;span draggable=&quot;true&quot; :id=&quot;&#39;hashTagData&#39; + i&quot;&amp;gt; &amp;lt;span :id=&quot;&#39;hashTagSpace&#39; + i&quot; class=&quot;hash-tag-space&quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span :id=&quot;&#39;hashTagContent&#39; + i&quot; class=&quot;hash-tag&quot;&amp;gt; #&amp;lt;img :id=&quot;&#39;cancelFileIcon&#39; + i&quot; src=&quot;/x-circle-main-black.svg&quot; class=&quot;ms-2&quot; @click=&quot;cancelHashTagEvent(i)&quot;&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div id=&quot;hashTagsStatementWrapper&quot;&amp;gt; &amp;lt;img :src=&quot;require(`@/assets/images/drag.png`)&quot; style=&quot;height: 20px&quot;&amp;gt; &amp;amp;nbsp;&amp;lt;span id=&quot;hashTagsStatement&quot;&amp;gt;해시태그는 드래그 앤 드랍으로 위치를 변경할 수 있습니다.&amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;p id=&quot;hashTagsErrorMessage&quot; class=&quot;error-message&quot;&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div v-if=&quot;pageInformation === &#39;read&#39;&quot;&amp;gt; &amp;lt;span v-if=&quot;isEmpty(hashTags)&quot;&amp;gt; #- &amp;lt;/span&amp;gt; &amp;lt;span v-else v-for=&quot;(hashTag, i) in hashTags.split(&#39;#&#39;)&quot; :key=&quot;i&quot;&amp;gt; &amp;lt;span class=&quot;hash-tag&quot;&amp;gt;#&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; &amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt;&amp;lt;/template&amp;gt;&amp;lt;style lang=&quot;scss&quot;&amp;gt;.hash-tag-in-list { font-size: $small-font-size; background-color: $darkest-main-white; color: $the-darkest-main-grey; border-radius: .5rem; padding: .3rem;}.hash-tag { background-color: $darkest-main-white; color: $the-darkest-main-grey; border-radius: .5rem; display: inline-block; padding: .3rem; margin: .2rem 0;}.hash-tag-space { padding: .25rem .5rem;}&amp;lt;/style&amp;gt;&amp;lt;script&amp;gt;import {onBeforeMount, onBeforeUnmount} from &quot;vue&quot;;import {isEmpty} from &quot;@/utils/empty-util&quot;;export default { name: &quot;HashTags&quot;, props: { pageInformation: String, hashTags: String }, setup(props) { let hashTagId = 0; onBeforeMount(async () =&amp;gt; { if (props.pageInformation === &#39;write&#39; || props.pageInformation === &#39;update&#39;) { document.addEventListener(&quot;dragstart&quot;, dragstart); document.addEventListener(&quot;dragend&quot;, dragend); document.addEventListener(&quot;dragenter&quot;, dragenter); document.addEventListener(&quot;dragover&quot;, dragover); document.addEventListener(&quot;dragleave&quot;, dragleave); document.addEventListener(&quot;drop&quot;, drop); } }); onBeforeUnmount(async () =&amp;gt; { if (props.pageInformation === &#39;write&#39; || props.pageInformation === &#39;update&#39;) { document.removeEventListener(&quot;dragstart&quot;, dragstart); document.removeEventListener(&quot;dragend&quot;, dragend); document.removeEventListener(&quot;dragenter&quot;, dragenter); document.removeEventListener(&quot;dragover&quot;, dragover); document.removeEventListener(&quot;dragleave&quot;, dragleave); document.removeEventListener(&quot;drop&quot;, drop); } }); /* dragstart event */ const dragstart = (event) =&amp;gt; { event.dataTransfer.setData(&quot;Text&quot;, event.target.id); document.getElementById(&quot;hashTagsStatement&quot;).innerHTML = &quot;드래그 앤 드랍으로 위치를 이동 해주세요.&quot;; document.getElementById(&quot;hashTagsStatement&quot;).style.color = &quot;red&quot;; event.target.style.opacity = &quot;0.4&quot;; } /* dragend event */ const dragend = (event) =&amp;gt; { document.getElementById(&quot;hashTagsStatement&quot;).innerHTML = &quot;해시태그는 드래그 앤 드랍으로 위치를 변경할 수 있습니다.&quot;; document.getElementById(&quot;hashTagsStatement&quot;).style.color = &quot;black&quot;; event.target.style.opacity = &quot;1&quot;; } /* dragenter event */ const dragenter = (event) =&amp;gt; { let eventTargetId = event.target.id; event.preventDefault(); // hashTagsWrapper인 경우 hashTag가 가장 마지막으로 이동 if (event.target.id == &quot;hashTagsWrapper&quot;) { event.target.style.border = &quot;2px dotted red&quot;; } // hashTagSpace인 경우 hashTag를 hashTagSpace 앞으로 이동 else if (/[0-9]/g.test(eventTargetId) &amp;amp;&amp;amp; /hashTagSpace/.test(eventTargetId)) { event.target.style.border = &quot;2px dotted red&quot;; } } /* dragover event */ const dragover = (event) =&amp;gt; { event.preventDefault(); } /* dragleave event */ const dragleave = (event) =&amp;gt; { let eventTargetId = event.target.id; event.preventDefault(); // hashTagsWrapper인 경우 hashTag가 가장 마지막으로 이동 if (event.target.id == &quot;hashTagsWrapper&quot;) { event.target.style.removeProperty(&quot;border&quot;); } // hashTagSpace인 경우 hashTag를 hashTagSpace 앞으로 이동 else if (/[0-9]/g.test(eventTargetId) &amp;amp;&amp;amp; /hashTagSpace/.test(eventTargetId)) { event.target.style.removeProperty(&quot;border&quot;); } } /* drop event */ const drop = (event) =&amp;gt; { let eventTargetId = event.target.id; let numberIndex; let targetIdIndex; event.preventDefault(); // hashTagsWrapper인 경우 hashTag가 가장 마지막으로 이동 if (event.target.id == &quot;hashTagsWrapper&quot;) { document.getElementById(&quot;hashTagsStatement&quot;).style.color = &quot;&quot;; event.target.style.border = &quot;&quot;; document.getElementById(&quot;hashTagsWrapper&quot;).appendChild(document.getElementById(event.dataTransfer.getData(&quot;Text&quot;))); } // hashTagSpace인 경우 hashTag를 hashTagSpace 앞으로 이동 else if (/[0-9]/g.test(eventTargetId) &amp;amp;&amp;amp; /hashTagSpace/.test(eventTargetId)) { numberIndex = eventTargetId.search(/[0-9]/g); targetIdIndex = eventTargetId.substring(numberIndex, eventTargetId.length); document.getElementById(&quot;hashTagsStatement&quot;).style.color = &quot;&quot;; event.target.style.border = &quot;&quot;; document.getElementById(&quot;hashTagData&quot; + targetIdIndex).before(document.getElementById(event.dataTransfer.getData(&quot;Text&quot;))); } } /* hash tags add event */ const hashTagsAddEvent = () =&amp;gt; { hashTagId = isEmpty(props.hashTags) ? hashTagId : hashTagId + (hashTagId &amp;lt; props.hashTags.split(&#39;#&#39;).length ? props.hashTags.split(&#39;#&#39;).length : 0); let regExp = /^[#][a-zA-Zㄱ-힣0-9\\s|s]*$/; let hashTag = document.getElementsByName(&quot;hashTag&quot;)[0].value; if (regExp.test(hashTag)) { const tempHashTagId = hashTagId; const tag = &#39;&amp;lt;span draggable=&quot;true&quot; id=&quot;hashTagData&#39; + hashTagId + &#39;&quot;&amp;gt;&#39; + &#39;&amp;lt;span id=&quot;hashTagSpace&#39; + hashTagId + &#39;&quot; class=&quot;hash-tag-space&quot;&amp;gt; &amp;lt;/span&amp;gt;&#39; + &#39;&amp;lt;span id=&quot;hashTagContent&#39; + hashTagId + &#39;&quot; class=&quot;hash-tag&quot;&amp;gt;&#39; + hashTag + &#39;&amp;lt;img id=&quot;cancelFileIcon&#39; + tempHashTagId + &#39;&quot; src=&quot;/x-circle-main-black.svg&quot; class=&quot;ms-2&quot;&amp;gt;&#39; + &#39;&amp;lt;/span&amp;gt;&#39; + &#39;&amp;lt;/span&amp;gt;&#39;; document.getElementById(&quot;hashTagsWrapper&quot;).insertAdjacentHTML(&quot;beforeend&quot;, tag); document.getElementById(&quot;cancelFileIcon&quot; + tempHashTagId).onclick = function () { cancelHashTagEvent(tempHashTagId); } document.getElementsByName(&quot;hashTag&quot;)[0].value = &quot;&quot;; hashTagId++; } else { document.getElementById(&quot;hashTagsErrorMessage&quot;).innerText = &quot;해시태그를 잘못 입력했습니다.&quot;; document.getElementsByName(&quot;hashTag&quot;)[0].focus(); } } /* hash tag를 취소하는 경우 */ const cancelHashTagEvent = (hashTagId) =&amp;gt; { document.getElementById(&quot;hashTagData&quot; + hashTagId).remove(); } return { // variable // function isEmpty, hashTagsAddEvent, cancelHashTagEvent } }}&amp;lt;/script&amp;gt;우선순위 구현 리스트 페이지에서 우선순위에 따라 게시글 출력 순서를 변경하는 기능을 구현하였다. 리스트 페이지에서 우선순위가 있는 게시글은 상단에 고정되고 스피커 아이콘이 출력되어, 우선순위가 적용된 것을 확인 할 수 있다. 우선순위가 적용된 게시글은 페이지 이동, 검색 할 때에 영향을 받는다. 만약 1번 페이지에서 2번 페이지로 이동하거나, 검색 결과에 해당되지 않는 경우 리스트 페이지에서 출력되지 않는다. 우선순위 구현할 때 고려해야 할 점은 크게 2가지가 있었다.1. 우선순위가 등록된 게시글이 있는 상태에서, 게시글 새로 등록 우선순위가 등록된 게시글이 있을 때, 우선순위를 중복하여 등록하면 문제가 발생한다. 따라서 다음과 같이 이미 등록된 우선순위는 select에서 선택할 수 없도록 구현하였다.2. 우선순위가 설정된 게시글 수정 1번 문제를 해결하면, 우선순위가 설정된 게시글의 우선순위를 변경하지 않고 수정하면 기존 게시글의 우선순위가 중복되므로 게시글을 등록할 수 없다. 따라서 다음과 같이 현재 게시글의 우선순위를 select에서 출력하도록 구현하였다. 우선순위가 높은 리스트 조회, 우선순위가 낮은 리스트 조회 api가 2개로 분류된다.&amp;lt;module-app-web\\front\\src\\components\\misra_c\\misra_c\\MisraCList.vue&amp;gt;&amp;lt;!-- ... --&amp;gt; &amp;lt;!-- misraCListByPriority --&amp;gt; &amp;lt;tr v-for=&quot;(misraC, i) in misraCListByPriority&quot; :key=&quot;i&quot;&amp;gt; &amp;lt;!-- Desktop 번호 --&amp;gt; &amp;lt;td class=&quot;d-none d-lg-table-cell text-center&quot;&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; &amp;lt;!-- Mobile --&amp;gt; &amp;lt;span class=&quot;d-inline d-lg-none mobile-number&quot;&amp;gt;. &amp;lt;/span&amp;gt; &amp;lt;!-- 공통 --&amp;gt; &amp;lt;img :src=&quot;require(`@/assets/images/speaker.jpg`)&quot; class=&quot;speaker-icon&quot;/&amp;gt; &amp;lt;Frequency page-information=&quot;list&quot; :frequency=&quot;misraC.frequency&quot;&amp;gt; &amp;lt;/Frequency&amp;gt; &amp;lt;router-link :to=&quot;&#39;/misra-c/read/&#39; + misraC.idx&quot;&amp;gt;&amp;lt;/router-link&amp;gt; &amp;lt;span class=&quot;comment-count&quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;img v-if=&quot;misraC.newIcon&quot; :src=&quot;require(`@/assets/images/new_post.svg`)&quot; class=&quot;new-icon&quot;/&amp;gt; &amp;lt;!-- Mobile --&amp;gt; &amp;lt;div class=&quot;d-inline d-lg-none&quot;&amp;gt; &amp;lt;div&amp;gt; &amp;lt;span class=&quot;mobile-content&quot;&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;br&amp;gt; &amp;lt;span class=&quot;mobile-content&quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;amp;nbsp; &amp;lt;span class=&quot;mobile-content&quot;&amp;gt; 조회수: &amp;lt;/span&amp;gt; &amp;amp;nbsp; &amp;lt;span class=&quot;mobile-content&quot;&amp;gt;&amp;lt;HashTags pageInformation=&quot;list&quot; :hash-tags=&quot;misraC.hashTags&quot;&amp;gt;&amp;lt;/HashTags&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;!-- Desktop --&amp;gt; &amp;lt;td class=&quot;d-none d-lg-table-cell&quot;&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;td class=&quot;d-none d-lg-table-cell text-start&quot;&amp;gt; &amp;lt;HashTags pageInformation=&quot;list&quot; :hash-tags=&quot;misraC.hashTags&quot;&amp;gt;&amp;lt;/HashTags&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;td class=&quot;d-none d-lg-table-cell text-center&quot;&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;td class=&quot;d-none d-lg-table-cell text-center&quot;&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;!-- misraCList --&amp;gt; &amp;lt;tr v-for=&quot;(misraC, i) in misraCList.content&quot; :key=&quot;i&quot;&amp;gt; &amp;lt;!-- Desktop 번호 --&amp;gt; &amp;lt;td class=&quot;d-none d-lg-table-cell text-center&quot;&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; &amp;lt;!-- Mobile --&amp;gt; &amp;lt;span class=&quot;d-inline d-lg-none mobile-number&quot;&amp;gt;. &amp;lt;/span&amp;gt; &amp;lt;!-- 공통 --&amp;gt; &amp;lt;img v-if=&quot;misraC.priority &amp;lt;= 5&quot; :src=&quot;require(`@/assets/images/speaker.jpg`)&quot; class=&quot;speaker-icon&quot;/&amp;gt; &amp;lt;Frequency page-information=&quot;list&quot; :frequency=&quot;misraC.frequency&quot;&amp;gt; &amp;lt;/Frequency&amp;gt; &amp;lt;router-link :to=&quot;&#39;/misra-c/read/&#39; + misraC.idx&quot;&amp;gt; &amp;lt;/router-link&amp;gt; &amp;lt;span class=&quot;comment-count&quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;img v-if=&quot;misraC.newIcon&quot; :src=&quot;require(`@/assets/images/new_post.svg`)&quot; class=&quot;new-icon&quot;/&amp;gt; &amp;lt;!-- Mobile --&amp;gt; &amp;lt;div class=&quot;d-inline d-lg-none&quot;&amp;gt; &amp;lt;div&amp;gt; &amp;lt;span class=&quot;mobile-content&quot;&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;br&amp;gt; &amp;lt;span class=&quot;mobile-content&quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;amp;nbsp; &amp;lt;span class=&quot;mobile-content&quot;&amp;gt;조회수: &amp;lt;/span&amp;gt; &amp;amp;nbsp; &amp;lt;span class=&quot;mobile-content&quot;&amp;gt;&amp;lt;HashTags pageInformation=&quot;list&quot; :hash-tags=&quot;misraC.hashTags&quot;&amp;gt;&amp;lt;/HashTags&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;!-- Desktop --&amp;gt; &amp;lt;td class=&quot;d-none d-lg-table-cell&quot;&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;td class=&quot;d-none d-lg-table-cell text-start&quot;&amp;gt; &amp;lt;HashTags pageInformation=&quot;list&quot; :hash-tags=&quot;misraC.hashTags&quot;&amp;gt;&amp;lt;/HashTags&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;td class=&quot;d-none d-lg-table-cell text-center&quot;&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;td class=&quot;d-none d-lg-table-cell text-center&quot;&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt;&amp;lt;!-- ... --&amp;gt;&amp;lt;script&amp;gt;// ... /* 검색 */ const searchList = async (pageParam) =&amp;gt; { //우선순위가 있는 list if (pageParam.page === 1 &amp;amp;&amp;amp; isEmpty(searchKeyword.value)) { await axios.get(process.env.VUE_APP_MODULE_APP_API_URL + &quot;/api/misra-c/high-priority-list&quot;, {}, ) .then((response) =&amp;gt; { misraCListByPriority.value = response.data; // dayjs for (const misraC of misraCListByPriority.value) { misraC.createdDate = dayjs(misraC.createdDate).format(&quot;YYYY.MM.DD.&quot;); } }) .catch((error) =&amp;gt; { parseErrorMsg(error.response); }) .then(() =&amp;gt; { }); } else { misraCListByPriority.value.length = 0; } //우선순위가 없는 list const searchParam = { &quot;searchType&quot;: searchType.value, &quot;searchKeyword&quot;: searchKeyword.value }; const params = {...pageParam, ...searchParam}; const uri = createUri(process.env.VUE_APP_MODULE_APP_API_URL + &quot;/api/misra-c/list&quot;, params); await axios.get(uri, {}, ) .then((response) =&amp;gt; { // misraCList.value.content.length = 0; misraCList.value = response.data; startNumber.value = Math.floor(misraCList.value.number / 10) * 10 + 1; endNumber.value = (misraCList.value.totalPages &amp;gt; startNumber.value + 9) ? startNumber.value + 9 : (misraCList.value.totalPages == 0 ? 1 : misraCList.value.totalPages); // dayjs for (const misraC of misraCList.value.content) { misraC.createdDate = dayjs(misraC.createdDate).format(&quot;YYYY.MM.DD.&quot;); } }) .catch((error) =&amp;gt; { parseErrorMsg(error.response); }) .then(() =&amp;gt; { }); }// ...&amp;lt;/script&amp;gt;&amp;lt;module-app-web\\front\\src\\components\\common\\Priority.vue&amp;gt;&amp;lt;template&amp;gt; &amp;lt;span v-if=&quot;pageInformation === &#39;read&#39;&quot;&amp;gt; &amp;lt;span v-if=&quot;priority &amp;lt; maxPriority&quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span v-else&amp;gt;우선순위가 설정되어 있지 않습니다.&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;div v-if=&quot;pageInformation === &#39;write&#39; || pageInformation === &#39;update&#39;&quot;&amp;gt; &amp;lt;select name=&quot;priority&quot; id=&quot;priority&quot; class=&quot;form-control&quot; v-model=&quot;priority&quot;&amp;gt; &amp;lt;option v-for=&quot;(priority, i) in priorityArray&quot; :key=&quot;i&quot; :value=&quot;i+1&quot; :disabled=&quot;priority !== null ? priority.disabled : false&quot;&amp;gt; &amp;lt;span v-if=&quot;priority === null&quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span v-else-if=&quot;priority !== null &amp;amp;&amp;amp; i+1 !== maxPriority&quot;&amp;gt;. &amp;lt;/span&amp;gt; &amp;lt;span v-else&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/option&amp;gt; &amp;lt;/select&amp;gt; &amp;lt;/div&amp;gt;&amp;lt;/template&amp;gt;&amp;lt;style lang=&quot;scss&quot;&amp;gt;&amp;lt;/style&amp;gt;&amp;lt;script&amp;gt;export default { name: &quot;Priority&quot;, props: { pageInformation: String, priority: Number, maxPriority: Number, priorityArray: Object }}&amp;lt;/script&amp;gt; 6의 크기를 가지는 우선순위 배열을 생성하며, 마지막 배열 요소는 우선순위를 설정하지 않는 경우다. 우선순위가 설정된 게시글을 조회한 리스트를 반복문에서 순회하며, 우선순위가 설정되어 있는 요소이거나 현재 수정 중인 요소에 색인을 설정한다.&amp;lt;module-domain-core\\src\\main\\java\\com\\suresoft\\sw_test_forum\\misra_c\\misra_c\\service\\MisraCService.java&amp;gt;// .../*** 작성할 때, 우선순위가 높은 리스트 조회** @return*/public PriorityDto[] findAllByHighPriorityAscWhenWrite() { List&amp;lt;MisraCDto&amp;gt; highPriorityList = misraCRepositoryImpl.findAllByHighPriorityAscCheckPriority(); PriorityDto[] priorityDtoArray = new PriorityDto[6]; priorityDtoArray[5] = new PriorityDto(false, &quot;우선순위를 설정하지 않습니다.&quot;); for (MisraCDto highPriority : highPriorityList) { priorityDtoArray[(int) highPriority.getPriority() - 1] = new PriorityDto(true, &quot;우선순위가 설정되어 있습니다.&quot;); } return priorityDtoArray;}// .../*** 수정할 때, 우선순위가 높은 리스트 조회** @return*/public PriorityDto[] findAllByHighPriorityAscWhenUpdate(long idx) { List&amp;lt;MisraCDto&amp;gt; highPriorityList = misraCRepositoryImpl.findAllByHighPriorityAscCheckPriority(); MisraC misraCPriority = misraCRepositoryImpl.findMisraCPriorityByIdx(idx); PriorityDto[] priorityDtoArray = new PriorityDto[6]; priorityDtoArray[5] = new PriorityDto(false, &quot;우선순위를 설정하지 않습니다.&quot;); for (MisraCDto highPriority : highPriorityList) { if (misraCPriority.getPriority() == highPriority.getPriority()) { priorityDtoArray[(int) highPriority.getPriority() - 1] = new PriorityDto(false, &quot;지금 설정된 우선순위 입니다.&quot;); } else { priorityDtoArray[(int) highPriority.getPriority() - 1] = new PriorityDto(true, &quot;우선순위가 설정되어 있습니다.&quot;); } } return priorityDtoArray;}&amp;lt;module-domain-core\\src\\main\\java\\com\\suresoft\\sw_test_forum\\misra_c\\misra_c\\repository\\MisraCRepositoryImpl.java&amp;gt;/*** 우선순위 확인 할 때, 우선순위 높은 리스트 조회** @return*/public List&amp;lt;MisraCDto&amp;gt; findAllByHighPriorityAscCheckPriority() { return queryFactory.select( Projections.bean( MisraCDto.class, misraC.priority ) ) .from(misraC) .where(misraC.priority.loe(5)) .orderBy(misraC.priority.asc()) .fetch();}자동완성(autoComplete.js) 구현 이미 등록된 게시글의 데이터를 바탕으로 자동으로 입력값을 제안하는 기능을 구현하였다. 비슷한 유형의 자바스크립트 라이브러리가 많이 존재하는데, 이중 바닐라 자바스크립트로 구현된 autoComplete.js 라이브러리가 장점으로 생각하여 선택하게 되었다.출처: https://tarekraafat.github.io/autoComplete.js/#/Vue.js Composition API에서 tooltip 구현 아이콘에 마우스 커서를 올리면 부가 설명이 출력되는 tooltip 기능을 구현하였다. Vue.js에서 ‘Bootstrap Vue’를 사용하지 않고 일반 bootstrap으로 tooltip 기능을 적용은 쉽지 않았다. 하단 출처를 참고하여 bootstrap tooltip을 사용하였지만, bootstrap 라이브러리를 중복으로 import(main.js 파일과, bootstrap tooltip을 사용하는 파일)하여 다른 기능들이 작동하지 않는 오류가 발생하였다.출처:https://therichpost.com/vue-3-bootstrap-5-tooltip-working-example/ 따라서 하단 출처를 참고하여 직접 구현하는 방식으로 변경하였다.출처:https://www.w3schools.com/howto/howto_css_tooltip.asp코드 출력(CodeMirror) 구현 IDE 처럼 코드 Syntax HighLighting 기능을 제공하는 CodeMirror을 사용하여 코드 출력 기능을 구현하였다. Vue.js에서 CodeMirror를 사용하는 예제는 많지만 Vue.js 3 Composition API에서 CodeMirror을 사용하는 예제는 적어 구현에 많은 어려움을 겪었다. 이중 정적시험 규칙 상세보기 페이지에서 예저 코드를 출력하는 기능 구현이 쉽지 않았다. 이는 동적으로 예제 코드를 출력하는 기능(즉, 리스트 크기에 따라서 CodeMirror가 동적으로 출력)으로, CodeMirror을 동적으로 생성하면 에러가 발생했기 때문이다. 이를 해결하기 위해서 비효율적이지만 CodeMirror을 미리 생성하고 리스트 크기에 맞게 숨김 처리하는 로직으로 구현하였다. 간단한 코드 미러 코드는 다음과 같다.&amp;lt;module-app-web\\front\\src\\components\\common\\ExampleList.vue&amp;gt;&amp;lt;template&amp;gt; &amp;lt;div&amp;gt; &amp;lt;div v-if=&quot;pageInformation === &#39;write&#39; || pageInformation === &#39;update&#39;&quot;&amp;gt; &amp;lt;div class=&quot;mb-4&quot;&amp;gt; &amp;lt;div class=&quot;d-flex flex-column flex-lg-row&quot;&amp;gt; &amp;lt;div class=&quot;w-100 me-3 mb-3 mb-lg-0&quot; style=&quot;overflow:hidden&quot;&amp;gt; &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Bad Case 코드&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;textarea name=&quot;nonCompliantExample&quot; id=&quot;nonCompliantExample&quot; v-model=nonCompliantExample :placeholder=&quot;codeMirror.editorData&quot;/&amp;gt; &amp;lt;p id=&quot;nonCompliantExampleErrorMessage&quot; class=&quot;error-message&quot;&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&quot;w-100 mb-3 mb-lg-0&quot; style=&quot;overflow:hidden&quot;&amp;gt; &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Good Case 코드&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;textarea name=&quot;compliantExample&quot; id=&quot;compliantExample&quot; v-model=compliantExample :placeholder=&quot;codeMirror.editorData&quot;/&amp;gt; &amp;lt;p id=&quot;compliantExampleErrorMessage&quot; class=&quot;error-message&quot;&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;&amp;lt;!-- ... --&amp;gt;&amp;lt;/template&amp;gt;&amp;lt;style lang=&quot;scss&quot;&amp;gt;// CodeMirror@import &#39;~@/assets/css/codemirror.css&#39;;@import &#39;~codemirror/theme/eclipse.css&#39;;@import &#39;~codemirror/theme/dracula.css&#39;;&amp;lt;/style&amp;gt;&amp;lt;script&amp;gt;// vue.jsimport {onMounted, ref, watchEffect} from &quot;vue&quot;;// CodeMirrorimport CodeMirror from &#39;codemirror/lib/codemirror.js&#39;;import &#39;codemirror/mode/clike/clike.js&#39;;import &#39;codemirror/addon/display/placeholder.js&#39;;import {codeMirror} from &#39;@/assets/plugins/code-mirror/code-mirror.js&#39;export default { name: &quot;ExampleList&quot;, props: { pageInformation: String, nonCompliantExampleValue: String, compliantExampleValue: String, exampleList: Object, exampleLinkList: Array, exampleTitleList: Array, link: String, mode: String, }, setup(props) { let rulePageReadLength = 3; let displayNoneFlag = 0; let nonCompliantExample = ref(&quot;&quot;); let compliantExample = ref(&quot;&quot;); let nonCompliantExampleWhenRead = ref(&quot;&quot;); let compliantExampleWhenRead = ref(&quot;&quot;); let nonCompliantExampleWhenRulePageReadList = ref([]); let compliantExampleWhenRulePageReadList = ref([]); const writeAndReadOption = { lineNumbers: true, lineWrapping: true, indentWithTabs: true, indentUnit: 4, viewportMargin: Infinity, mode: props.mode, theme: &#39;eclipse&#39; } const readOption = { readOnly: true, lineNumbers: true, indentUnit: 4, mode: props.mode, theme: &#39;eclipse&#39;, } onMounted(async () =&amp;gt; { codeMirror.initCodeMirror(); if (props.pageInformation === &quot;write&quot; || props.pageInformation === &quot;update&quot;) { // ... } else if (props.pageInformation === &quot;read&quot;) { nonCompliantExampleWhenRead = CodeMirror.fromTextArea(document.getElementsByName(&#39;nonCompliantExampleWhenRead&#39;)[0], readOption); nonCompliantExampleWhenRead.save(); compliantExampleWhenRead = CodeMirror.fromTextArea(document.getElementsByName(&#39;compliantExampleWhenRead&#39;)[0], readOption); compliantExampleWhenRead.save(); } // ...&amp;lt;/script&amp;gt;출처: https://velog.io/@sian/Vue%EC%97%90-Code-mirror-%EC%A0%81%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0https://codemirror.net/2/mode/clike/https://codepen.io/DerkJanS/pen/zzbRNQ" }, { "title": "Project SW Test Forum 8. Vue.js CKEditor 5(Custom Pugin 개발) - 2", "url": "/posts/Project-SW-Test-Forum8/", "categories": "Web, Project SW Test Forum", "tags": "", "date": "2022-02-02 00:00:00 +0900", "snippet": " Vue.js 3와 커스텀 플러그인(에디터 크기 변경) 구현 과정을 소개한다. github: https://github.com/scribnote5/sw_test_forum에디터 크기 변경 플러그인의 필요성 회사 그룹웨어에서 사용하는 TinyMCE WYSIWYG에서는 에디터 크기를 전체화면으로 변경하는 플러그인을 제공한다. 해당 기능은 내용이 길어지거나 이미지를 삽입하는 업무 메일을 작성할 때, 매우 유용하게 사용하였다. 그러나 아쉽게도 CKEditor 4에서는 에디터 크기 변경 플러그인을 지원하지만 CKEditor 5에서는 지원하지 않았다. CKEditor 5 공식 포럼에 메일로 문의하였지만 css로 크기 조절이 가능하기에, 동적으로 크기 조절 플러그인을 지원하지 않는다고 하였다. 따라서 해당 플러그인을 구현하기로 하였다.CKEditor 5 커스텀 플러그인 개발 CKEditor 5 커스텀 플러그인은 공식 문서에서 제공하며 하단 출처를 참고하여 개발하였다.출처: https://ckeditor.com/docs/ckeditor5/latest/framework/guides/plugins/creating-simple-plugin.html에디터 아이콘 추가 에디터를 ‘최대’ 크기로 늘리는 경우, ‘최소’ 크기로 줄이는 경우 기능과 일치하는 아이콘이 위치해야 한다. 아이콘 이미지를 public 폴더와 assets 폴더에 추가하여 읽어오려고 하였지만, CKEditor에서 해당 아이콘 이미지를 인식하지 못하여 오류가 발생하였다. 따라서 CKEditor의 이미지가 라이브러리 이미지 파일이 위치한 경로에 아이콘 이미지를 추가하여 읽어오는 방식으로 구현하였다. CKEditor 라이브러리에 의존적이라는 단점이 발생하지만 이를 해결하는 방법을 찾지 못하였다. 이는 CKEditor 라이브러리에 의존적이며 버전이 변경되는 경우 아이콘 이미지를 다시 옮겨야 하는 단점이 있지만, 이를 해결하는 방법을 찾지 못하였다.&amp;lt;module-app-web\\front\\src\\assets\\plugins\\ckeditor\\ckeditor-editor-resize.js&amp;gt;// ...// import extendIcon from &#39;/public/extend-black.svg&#39;;// import shrinkIcon from &#39;/public/shrink-black.svg&#39;;// import extendIcon from &#39;@/assets/images/shrink-black.svg&#39;;// import shrinkIcon from &#39;@/assets/images/shrink-black.svg&#39;;import extendIcon from &#39;@ckeditor/ckeditor5-core/theme/icons/extend-black.svg&#39;;import shrinkIcon from &#39;@ckeditor/ckeditor5-core/theme/icons/shrink-black.svg&#39;;// ...에디터 크기 변경 플러그인 구현- 에디터 크기를 조절 기능은 css 코드를 삽입하고 삭제하는 자바스크립트‘document.styleSheets[0].insertRule’, ‘document.styleSheets[0].deleteRule’ 함수를 사용하여 구현하였다.- 에디터 크기 변경 할 때 아이콘이 변경되며, HTML body의 scroll bar가 숨겨지거나 보여진다.module-app-web\\front\\src\\assets\\plugins\\ckeditor\\ckeditor-editor-resize.jsimport Plugin from &#39;@ckeditor/ckeditor5-core/src/plugin&#39;;import ButtonView from &#39;@ckeditor/ckeditor5-ui/src/button/buttonview&#39;;// import extendIcon from &#39;/public/extend-black.svg&#39;;// import shrinkIcon from &#39;/public/shrink-black.svg&#39;;// import extendIcon from &#39;@/assets/images/shrink-black.svg&#39;;// import shrinkIcon from &#39;@/assets/images/shrink-black.svg&#39;;import extendIcon from &#39;@ckeditor/ckeditor5-core/theme/icons/extend-black.svg&#39;;import shrinkIcon from &#39;@ckeditor/ckeditor5-core/theme/icons/shrink-black.svg&#39;;class EditorResize extends Plugin { init() { const editor = this.editor; editor.ui.componentFactory.add(&#39;editorResize&#39;, locale =&amp;gt; { const view = new ButtonView(locale); let isFullSize = false; view.set({ label: &#39;Extend editor&#39;, icon: extendIcon, tooltip: true }); // Callback executed once the image is clicked. view.on(&#39;execute&#39;, () =&amp;gt; { editor.model.change(writer =&amp;gt; { if (isFullSize) { document.styleSheets[0].deleteRule(0); document.styleSheets[0].deleteRule(0); document.styleSheets[0].deleteRule(0); document.styleSheets[0].insertRule( &quot;.ck-editor__editable:not(.ck-editor__nested-editable) { &quot; + &quot;height: 550px; }&quot;); view.set({ label: &#39;Extend editor&#39;, icon: extendIcon, tooltip: true }); isFullSize = false; editor.editing.view.focus() } else { document.styleSheets[0].insertRule( &quot;.ck.ck-editor { &quot; + &quot;position: fixed !important; &quot; + &quot;top: 0px ; &quot; + &quot;left: 0px ; &quot; + &quot;z-index: 1200 ; &quot; + &quot;width:&quot; + window.innerWidth + &quot;px !important; }&quot;); document.styleSheets[0].insertRule( &quot;.ck-editor__editable:not(.ck-editor__nested-editable) { &quot; + &quot;height: calc(&quot; + window.innerHeight + &quot;px - 77px) !important; }&quot;); document.styleSheets[0].insertRule( &quot;body { overflow-y: hidden }&quot;); view.set({ label: &#39;Shrink editor&#39;, icon: shrinkIcon, tooltip: true }); isFullSize = true; editor.editing.view.focus() } }); }); return view; }); }}export {EditorResize}에디터 초기화 시 커스텀 플러그인 호출 editorConfig 객체의 plugins 속성에 EditorResize를, toolbar 속성에 ‘editorResize’를 추가하면 된다.&amp;lt;module-app-web\\front\\src\\assets\\plugins\\ckeditor\\ckeditor-init.js&amp;gt;// ...import {EditorResize} from &quot;./ckeditor-editor-resize&quot;const editor = ClassicEditor;let editorConfig = { plugins: [ // ... Essentials, HtmlEmbed, UploadAdapter, //EasyImage, //CloudServices, Mention, // MentionCustomization, SourceEditing, EditorResize ], toolbar: { items: [ // ... &#39;|&#39;, &#39;undo&#39;, &#39;redo&#39;, &#39;|&#39;, &#39;sourceEditing&#39;, &#39;|&#39;, &#39;editorResize&#39; ], shouldNotGroupWhenFull: true }, // ...};구현 결과 에디터 크기가 최소 일 때와 에디터 크기가 최대 일 때의 이미지다." }, { "title": "Project SW Test Forum 7. CRUD 게시판 구현 및 오류 해결(벡엔드) - 2", "url": "/posts/Project-SW-Test-Forum7/", "categories": "Web, Project SW Test Forum", "tags": "", "date": "2022-02-02 00:00:00 +0900", "snippet": " Vue.js 3와 Spring boot로 CRUD 게시판 구현 및 오류 해결 과정을 소개한다. github: https://github.com/scribnote5/sw_test_forum테이블 조회할 때 비즈니스 로직에서 사용하는 컬럼만 조회 공지사항 목록 페이지에서 noticeRepository.findAll 메소드를 사용하면 모든 컬럼을 조회한다. 해당 페이지에서 사용하지 않는 컬럼 또한 조회하게 되며, 이는 불필요한 컴퓨터 자원을 낭비한다고 생각하였다. 따라서 QueryDSL를 사용하여, 비즈니스 로직에서 사용하는 컬럼만 조회하도록 변경하였다.&amp;lt;module-domain-core\\src\\main\\java\\com\\suresoft\\sw_test_forum\\admin_page\\notice\\repository\\NoticeRepositoryImpl.java&amp;gt;/*** 우선순위가 높은 리스트 조회** @return*/public List&amp;lt;NoticeDto&amp;gt; findAllByHighPriorityAsc() { return queryFactory.select( Projections.bean( NoticeDto.class, notice.idx, notice.createdDate, notice.createdByIdx, notice.activeStatus, notice.views, notice.title, notice.priority ) ) .from(notice) .where(notice.priority.loe(5)) .orderBy(notice.priority.asc()) .fetch();}출처: https://icarus8050.tistory.com/5QueryDsl 조인 QueryDsl에서 연관관계 없이 다른 엔티티과의 조인은 ‘join(엔티티).on(엔티티.키.eq(엔티티.키)’로 사용할 수 있다.&amp;lt;module-domain-core\\src\\main\\java\\com\\suresoft\\sw_test_forum\\admin_page\\notice\\repository\\NoticeRepositoryImpl.java&amp;gt;/*** 우선순위 낮은 리스트 조회** @param pageable* @param misraCSearchDto* @return*/public PageImpl&amp;lt;MisraCDto&amp;gt; findAll(Pageable pageable, MisraCSearchDto misraCSearchDto) { JPQLQuery&amp;lt;MisraCDto&amp;gt; query = queryFactory.select( Projections.bean( MisraCDto.class, misraC.idx, misraC.createdDate, misraC.createdByIdx, misraC.activeStatus, misraC.views, misraC.title, misraC.priority, misraC.frequency, hashTags.content.as(&quot;hashTags&quot;) ) ) .from(misraC) .join(hashTags).on(misraC.hashTagsIdx.eq(hashTags.idx)) .where(searchCondition(misraCSearchDto)) .orderBy(misraC.idx.desc()); long totalCount = query.fetchCount(); List&amp;lt;MisraCDto&amp;gt; results = getQuerydsl().applyPagination(pageable, query).fetch(); return new PageImpl&amp;lt;&amp;gt;(results, pageable, totalCount);}출처: https://jojoldu.tistory.com/396https://velog.io/@geunwoobaek/Query-Dsl-%ED%99%9C%EC%9A%A9" }, { "title": "Project SW Test Forum 6. CRUD 게시판 구현 및 오류 해결(프론트엔드) - 1", "url": "/posts/Project-SW-Test-Forum6/", "categories": "Web, Project SW Test Forum", "tags": "", "date": "2022-02-02 00:00:00 +0900", "snippet": " Vue.js 3와 Spring boot로 CRUD 게시판 구현 및 오류 해결 과정을 소개한다. github: https://github.com/scribnote5/sw_test_forum프로젝트 레이아웃 변경 Bootstrap 공식 홈페이지에 있는 예제 프로젝트를 참고하여 반응형 레이아웃을 개발 하였으며, 이중 Header, Sidebar, Footer 템플릿을 사용하였다.출처: https://getbootstrap.com/docs/5.0/examples/Vue.js 환경 변수 설정 프론트엔드 서버와 백엔드 서버 간의 비동기 통신을 위해서 사용하는 백엔드 서버 주소는 개발 환경과 운영 환경에서 다르다. 실행될 때 호출되는 벡엔드 서버 주소를 다르게 호출하기 위해서는 Vue.js 환경 변수를 사용해야 한다. 각 환경에 따른 .env 파일을 생성한다.&amp;lt;module-app-web\\front\\.env.local&amp;gt;NODE_ENV=localBASE_URL=/loginVUE_APP_MODULE_APP_API_URL=http://localhost:8082&amp;lt;module-app-web\\front\\.env.prod&amp;gt;NODE_ENV=prodBASE_URL=/loginVUE_APP_MODULE_APP_API_URL=http://서버주소:8082 터미널에서 프론트엔드 서버를 환경에 맞게 실행한다.# local 환경에서 수행$ npm run local ‘process.env.환경변수 이름’으로 환경 변수에 접근할 수 있다.&amp;lt;module-app-web\\front\\src\\components\\cwe\\cwe\\CweList.vue&amp;gt;// ...// onBeforeMount, initonBeforeMount(async () =&amp;gt; { fireSuccessToast(&quot;cwe&quot;); await searchList({&quot;page&quot;: 1}); await axios.get(process.env.VUE_APP_MODULE_APP_API_URL + &quot;/api/cwe/list-access-authority&quot;, {}, ) .then((response) =&amp;gt; { access.value = response.data; }) .catch((error) =&amp;gt; { parseErrorMsg(error.response); }) .then(() =&amp;gt; { });})// ...출처: https://velog.io/@skyepodium/vue-%EC%8B%A4%ED%96%89-%EB%AA%A8%EB%93%9C%EC%99%80-%ED%99%98%EA%B2%BD-%EB%B3%80%EC%88%98-%EC%84%A4%EC%A0%95Vue.js Composition API 적용 재사용성과 가독성을 높이기 위해서 Vue.js 3에서 새로 도입된 Composition API를 적용하였다.출처:https://kyounghwan01.github.io/blog/Vue/vue3/composition-api/#composition-api%E1%84%80%E1%85%A1-%E1%84%82%E1%85%A1%E1%84%8B%E1%85%A9%E1%84%80%E1%85%A6-%E1%84%83%E1%85%AC%E1%86%AB-%E1%84%87%E1%85%A2%E1%84%80%E1%85%A7%E1%86%BCVue 전역 Sass 변수 설정 다음 명령어로 sass-loader를 설치할 수 있다.$ npm install sass-loader sass webpack --save-dev 본 프로젝트에서는 sass-loader가 8버전을 사용하므로, prependData proeprty를 사용하여 전역에서 scss 파일을 include 하였다.&amp;lt;module-app-web\\front\\vue.config.js&amp;gt;module.exports = { css: { loaderOptions: { sass: { prependData: ` @import &quot;@/assets/css/variable.scss&quot;; @import &quot;@/assets/css/general.scss&quot;; @import &quot;@/assets/css/layout.scss&quot;; ` } } }}출처: https://m.blog.naver.com/mgveg/221900939600axios 설정 main.js에서는 다음과 같이 전역으로 axios csrf 전달 옵션, JWT 토큰 전달 옵션, 로딩 바를 설정하였다. 로딩 바는 각 컴포넌트 상단에 위치한다. axios 인터셉터를 사용하여 요청이 시작할 때 로딩 바가 생성되며 종료될 때 로딩 바가 사라진다.&amp;lt;module-app-web\\front\\src\\main.js&amp;gt;// axios 설정axios.defaults.xsrfCookieName = &#39;XSRF-TOKEN&#39; // csrf 기본 설정을 명시적으로 선언axios.defaults.xsrfHeaderName = &#39;X-XSRF-TOKEN&#39; // csrf 기본 설정을 명시적으로 선언axios.defaults.withCredentials = true; // 다른 origin에 JWT를 전달하기 위한 설정// axios.defaults.headers.common[&#39;Access-Control-Allow-Origin&#39;] = &#39;*&#39;; // cors 설정// axios.defaults.headers.common[&#39;Access-Control-Allow-Headers&#39;] = &#39;Origin, Content-Type, X-Auth-Token&#39;; // cors 설정// 요청 인터셉터 추가axios.interceptors.request.use( (config) =&amp;gt; { // 요청을 보내기 전에 수행할 일 document.getElementById(&quot;loading-wrapper&quot;).style.visibility = &quot;visible&quot;; return config; }, (error) =&amp;gt; { // 오류 요청을 보내기전 수행할 일 document.getElementById(&quot;loading-wrapper&quot;).style.visibility = &quot;hidden&quot;; return Promise.reject(error); });// 응답 인터셉터 추가axios.interceptors.response.use( (response) =&amp;gt; { document.getElementById(&quot;loading-wrapper&quot;).style.visibility = &quot;hidden&quot;; // 응답 데이터를 가공 return response; }, (error) =&amp;gt; { // 오류 응답을 처리 document.getElementById(&quot;loading-wrapper&quot;).style.visibility = &quot;hidden&quot;; return Promise.reject(error); });&amp;lt;module-app-web\\front\\src\\components\\common\\Loading.vue&amp;gt;&amp;lt;template&amp;gt; &amp;lt;div class=&quot;container-fluid&quot;&amp;gt; &amp;lt;div id=&quot;loading-wrapper&quot;&amp;gt; &amp;lt;img :src=&quot;require(`@/assets/images/loading.gif`)&quot; id=&quot;loading&quot; alt=&quot;Loading&quot;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;&amp;lt;/template&amp;gt;&amp;lt;style lang=&quot;scss&quot;&amp;gt;#loading-wrapper { position: fixed; left: 50%; top: 50%; transform: translate(-50%, -50%); z-index: 1000; visibility: hidden;}&amp;lt;/style&amp;gt;&amp;lt;script&amp;gt;// vue.jsexport default { name: &quot;Loading&quot;}&amp;lt;/script&amp;gt;출처: https://jess2.xyz/vue/axios/https://heewon26.tistory.com/103동적으로 img 태그 생성할 때 img src의 절대 경로를 불러오는 방법 파일 드래그 앤 드랍 기능을 개발할 때, 동적으로 생성되는 첨부 파일의 취소 이미지 파일을 img 태그의 src를 바인딩하여 불러 올 수 없다. public 폴더에 위치된 정적한 assets 들은 webpack으로 복사되지 않으므로, 절대 경로를 통하여 접근할 수 있다. 하단 출처를 참고하여, 동적으로 img 태그가 생성되는 경우, public 폴더에 위치시킨 다음 img 파일을 호출하였다.&amp;lt;module-app-web\\front\\src\\components\\common\\FileUpload.vue&amp;gt;const tag = &#39;&amp;lt;div id=&quot;uploadFileId&#39; + tempUploadFileId + &#39;&quot; + class=&quot;d-flex&quot;&amp;gt;&#39; + &#39;&amp;lt;span class=&quot;d-flex align-items-center&quot;&amp;gt;&#39; + file.name + &quot;,&amp;amp;nbsp; 파일 크기: &quot; + convertFileSize(file.size) + &#39;&amp;lt;/span&amp;gt;&#39; + &#39;&amp;lt;img id=&quot;cancelFileIcon&#39; + tempUploadFileId + &#39;&quot; src=&quot;/x-circle-main-black.svg&quot; class=&quot;ms-2&quot;&amp;gt;&#39; + &#39;&amp;lt;/div&amp;gt;&#39;;출처: https://cli.vuejs.org/guide/html-and-static-assets.html#the-public-folder자바스크립트: 일반 함수를 모두 화살표 함수로 변경 자바스크립트 함수 표현식 보다 화살표 함수를 사용하면 조금 더 간결하게 함수를 만들 수 있다. 따라서 화살표 함수로 모두 대체 하였다. await axios.get(process.env.VUE_APP_MODULE_APP_API_URL + &quot;/api/misra-cpp/list-access-authority&quot;, {}, ) .then(function (response) { // ... }) .catch(function (error) { // ... }) .then(function () { // ... }); await axios.get(process.env.VUE_APP_MODULE_APP_API_URL + &quot;/api/misra-cpp/list-access-authority&quot;, {}, ) .then((response) =&amp;gt; { // ... }) .catch((error) =&amp;gt; { // ... }) .then(() =&amp;gt; { // ... });})출처: https://ko.javascript.info/arrow-functions-basicshttps://ko.javascript.info/arrow-functions-basicsVue.js TypeError: Cannot read property of undefined 오류 백엔드 서버에서 수신 받은 JSON key와 자바스크립트 객체 property가 매핑되지 않거나 객체 property가 선언되지 않으면, vue에서 브라우저로 렌더링 할 때 발생하는 오류다. 따라서 자바스크립트 객체 property를 JSON key와 매핑되도록 선언해야 한다.&amp;lt;module-app-web\\front\\src\\components\\admin_page\\notice\\NoticeRead.vue&amp;gt;&amp;lt;tr&amp;gt; &amp;lt;td colspan=&quot;2&quot;&amp;gt; &amp;lt;div class=&quot;float-end&quot;&amp;gt; &amp;lt;span class=&quot;float-end&quot;&amp;gt; &amp;lt;strong class=&quot;additional-information-title&quot;&amp;gt;작성자: &amp;lt;/strong&amp;gt;&amp;lt;span class=&quot;additional-information-content&quot;&amp;gt; , &amp;lt;/span&amp;gt; &amp;lt;strong class=&quot;additional-information-title&quot;&amp;gt;작성일: &amp;lt;/strong&amp;gt;&amp;lt;span class=&quot;additional-information-content&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt; &amp;lt;strong class=&quot;additional-information-title&quot;&amp;gt;최종 수정자: &amp;lt;/strong&amp;gt;&amp;lt;span class=&quot;additional-information-content&quot;&amp;gt; , &amp;lt;/span&amp;gt; &amp;lt;strong class=&quot;additional-information-title&quot;&amp;gt;최종 수정일: &amp;lt;/strong&amp;gt;&amp;lt;span class=&quot;additional-information-content&quot;&amp;gt;, &amp;lt;/span&amp;gt; &amp;lt;strong class=&quot;additional-information-title&quot;&amp;gt;조회수: &amp;lt;/strong&amp;gt; &amp;lt;span class=&quot;additional-information-content&quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;// ...setup() { // variable let notice = ref(); // 기존 let notice = ref({createdByUser: {department: &#39;&#39;, name: &#39;&#39;}, lastModifiedByUser: {department: &#39;&#39;, name: &#39;&#39;}}); // 수정}Vue.js 라우트 메타 필드 라우트 메타 필드를 사용하여 웹 페이지 제목, 네비게이션 가드, 레이아웃을 설정하였다.웹 페이지 제목 DOM이 업데이트 된 후 실행되는 nextTick을 사용하여, 컴포넌트가 변경되는 경우 메타 필드 title 속성 값으로 웹 페이지 제목을 변경한다.네비게이션 가드 로그인하지 않은 사용자가 로그인이 필요한 URI에 접근하거나 존재하지 않는 URI로 접근할 때 메타 필드 authRequired 속성 값으로 접근을 허용하지 않도록 구현하였다. vueCookies를 사용하여 로그인 한 사용자가 login 페이지로 이동하는 경우 경고창을 띄어서 원래 페이지로 이동하도록 구현하였다.레이아웃 구성 로그인 페이지는 Header, Sidebar, Footer을 사용하여 템플릿을 구성하지 않는다. 라우트에서 meta 필드의 layoutView 속성 값을 사용하여 Header, Sidebar, Footer 레이아웃 적용 여부를 구분하였다.&amp;lt;module-app-web\\front\\src\\router\\index.js&amp;gt;const routes = [ { path: &#39;/login&#39;, name: &#39;Login&#39;, component: Login, meta: {title: &#39;SW Test Forum - 로그인&#39;, layoutView: false, authRequired: false} }, { path: &#39;/dashboard&#39;, name: &#39;Dashboard&#39;, component: Dashboard, meta: {title: &#39;SW Test Forum - 대시보드&#39;, layoutView: true, authRequired: true} },// ...]router.beforeEach(async function (to, from, next) { // page title 설정 //nextTick은 Dom이 업데이트 된 후 실행 nextTick(() =&amp;gt; { document.title = to.meta.title; }); // 잘못된 URI로 매핑되는 경우, Error404 if (to.name === &#39;Error404&#39;) { await error.fire({ text: &quot;페이지를 찾을 수 없습니다.&quot;, }); router.go(-1); } // to: 이동할 url에 해당하는 라우팅 객체 else if ( to.matched.some((routeInfo) =&amp;gt; { return routeInfo.meta.authRequired; })) { if (vueCookies.get(&#39;isHasToken&#39;)) { next(); } // 권한이 없는 경우, Error401 else { await error.fire({ text: &quot;로그인이 필요합니다.&quot;, }); next(&#39;/login&#39;); //router.go(-1); } } else { if (vueCookies.get(&#39;isHasToken&#39;)) { await warning.fire({ text: &quot;로그아웃을 하신 다음, 다른 계정으로 로그인 해주세요.&quot;, }); next(&#39;/dashboard&#39;); } else { next(); } }});export default router&amp;lt;module-app-web\\front\\src\\App.vue&amp;gt;&amp;lt;template&amp;gt; &amp;lt;body v-if=&quot;this.$route.meta.layoutView === true&quot;&amp;gt; &amp;lt;Header/&amp;gt; &amp;lt;main&amp;gt; &amp;lt;Sidebar/&amp;gt; &amp;lt;router-view/&amp;gt; &amp;lt;/main&amp;gt; &amp;lt;Footer/&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;body v-else&amp;gt; &amp;lt;router-view/&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/template&amp;gt;출처: https://joshua1988.github.io/web-development/vuejs/vue-router-navigation-guards/Vue.js 브러우저 뒤로가기 클릭시 스크롤 위치 브라우저에서 뒤로가기 버튼을 클릭하면 브라우저의 scroll 위치가 최상단으로 변경된다. 브라우저 scroll 위치가 현재 위치로 고정하도록 변경하였다.&amp;lt;module-app-web\\front\\src\\router\\index.js&amp;gt;const router = createRouter({ history: createWebHistory(process.env.BASE_URL), routes, scrollBehavior(to, from, savedPosition, popstate) { //브러우저 뒤로가기 버튼을 클릭하는 경우, scroll 위치를 변경하지 않음 if (isEmpty(savedPosition)) { // isEmpty는 사용자 정의 함수로 savedPosition 객체가 비어있는 경우 최상단으로 scroll 이동 return new Promise((resolve, reject) =&amp;gt; { resolve({left: 0, top: 0}) }) } else { return new Promise((resolve, reject) =&amp;gt; { behavior: &#39;smooth&#39;, resolve({left: savedPosition.left, top: savedPosition.top}) }) } }})유효성 검사 프론트엔드와 백엔드 모두 유효성 검사 로직을 구현 하였다. 백엔드로 데이터를 송신 전, 각 데이터에 해당되는 유효성 검사 로직이 수행된다. 만약 유효성 검사에 실패하면, input 태그에 focus가 맞춰지며, input 태그 하단에 에러 메시지를 출력한다.&amp;lt;module-app-web\\front\\src\\utils\\validation-util.js&amp;gt;// .../* 길이 및 공백 validation */const validateLengthAndIsEmpty = (name, value) =&amp;gt; { let result; let errorMessage = document.getElementById(name + &quot;ErrorMessage&quot;); if (!validateWhiteSpace(value)) { result = &quot;공란이 될 수 없습니다.&quot;; document.getElementsByName(name)[0].focus(); } else if (value.length &amp;gt; 255) { result = &quot;길이는 255 보다 작아야 합니다. \\n&quot; + &quot;(현재 입력된 길이: &quot; + value.length + &quot;)&quot;; document.getElementsByName(name)[0].focus(); } else { result = &quot;&quot;; } errorMessage.innerText = result; return isEmpty(result);}// ...&amp;lt;module-app-web\\front\\src\\components\\cwe\\cwe\\CweWrite.vue&amp;gt;&amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;제목&amp;lt;span class=&quot;required-field&quot;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;span class=&quot;auto-completed-field&quot;&amp;gt;*&amp;lt;/span&amp;gt;&amp;lt;/th&amp;gt; &amp;lt;td style=&quot;overflow: visible&quot;&amp;gt; &amp;lt;div class=&quot;autoComplete_wrapper&quot;&amp;gt; &amp;lt;input type=&quot;text&quot; name=&quot;title&quot; id=&quot;title&quot; v-model=&quot;title&quot; class=&quot;form-control&quot; placeholder=&quot;[RTE_Buffer_Overrun] 배열 최대 범위보다 큰 요소 접근을 금지한다.&quot;&amp;gt; &amp;lt;p id=&quot;titleErrorMessage&quot; class=&quot;error-message&quot;&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;if (!(validateLengthAndIsEmpty(&quot;title&quot;, title.value) &amp;amp;&amp;amp; validateLength(&quot;hashTags&quot;, hashTags.value) &amp;amp;&amp;amp; validateLength(&quot;language&quot;, language.value) &amp;amp;&amp;amp; validateLength(&quot;cweId&quot;, cweId.value))) { return false;}Vue.js 공통 컴포넌트 분리 중복하여 많이 사용하는 레이아웃 및 기능들은 컴포넌트로 생성하여 common 폴더에 위치 시켰다. 해당 컴포넌트들은 다른 컴포넌트에 등록되어 사용된다. 기능상 컴포넌트 및 자바스크립트 파일에서 많이 사용하는 객체 및 함수는 plugins 폴더에 위치 시켰다. 해당 파일들은 다른 파일에서 사용된다." }, { "title": "Project SW Test Forum 5. 프로젝트 구조 설계 - 1", "url": "/posts/Project-SW-Test-Forum5/", "categories": "Web, Project SW Test Forum", "tags": "", "date": "2022-01-25 00:00:00 +0900", "snippet": " 본격적인 개발에서 앞서 프로젝트 구조를 설계 과정을 소개한다. github: https://github.com/scribnote5/sw_test_forumProject Lab CRUD 게시판 마이그레이션 Project Lab에서 개발한 Spring boot + Thymeleaf CRUD 게시판을 기반으로 Project Test 환경(Vue.js)에 맞게 마이그레이션 한다. Project SW Test Forum 웹 페이지의 기본 언어는 영어 대신 한글을 사용한다.사이드바 설계 다음과 같이 사이드바를 구성하였으며, 이에 따른 기능들을 구현하였다.웹 페이지 요구사항에 따른 설계 요구사항에 따라 제공하는 기능들은 크게 정적시험 규칙(MISRA C 정리, MISRA C++ 정리, CWE 정리, 메트릭 정리), 도구 트러블 슈팅, 관리자 페이지로 3가지로 분류 할 수 있다.정적시험 규칙 정적시험 규칙을 예제 코드와 더불어 상세히 설명하고 이에 대한 과거 가이드라인을 소개하는 페이지다. ‘MISRA C 정리’ 항목을 예를 들면, ‘MISRA C 규칙’은 ‘MISRA C 규칙에 대한 상세 설명과 해당 규칙에 대한 예제 코드와 가이드라인 리스트 일부를 출력한다. 또한, 해당 규칙 페이지를 통해서만 예제 코드와 가이드라인 사례를 작성할 수 있다.(‘MISRA C 예제 코드’, ‘MISRA C 가이드라인 사례’ 페이지에는 작성 기능이 없다.) ‘MISRA C 예제 코드’는 모든 규칙에 대한 예제 코드 리스트를 출력한다. ‘MISRA C 규칙’ 페이지에서 예제 코드가 출력되며 선택하면 읽기 페이지로 이동하여 자세한 내용을 확인 할 수 있다. 하단 이미지는 ‘MISRA C 예제 코드’ 등록 페이지다. ‘MISRA C 가이드라인 사례’는 모든 규칙에 대한 가이드라인 사례 리스트를 출력한다. ‘MISRA C 규칙’ 페이지에서 가이드라인 항목을 선택하면 읽기 페이지로 이동하여 자세한 내용을 확인 할 수 있다. 하단 이미지는 ‘MISRA C 가이드라인 사례’ 등록 페이지다.도구 트러블 슈팅 도구를 사용하면서 겪은 유형 별(오류, 설치 및 설정, 기능, 정보, 기타)로 소개하는 페이지다.지식 저장소 신뢰성 시험을 수행하면서 공부한 내용을 정리한 페이지다.관리자 페이지 웹 페이지를 사용하면서 필요한 전체적인 정보(공지사항, 사용자, 로그인 기록, 데이터 기록, 설정)을 관리하는 페이지다.기능 요구사항에 따른 설계 웹 페이지에서 필요한 기능 요구사항은 다음과 같다.우선순위 리스트 페이지에서 출력되는 게시글 순서를 변경 할 수 있다.해시태그 일반적인 해시태그 기능으로 드래그 앤 드랍으로 위치를 변경할 수 있다.소스 코드 출력 CodeMirror 라이브러리를 사용하여 에디터에서 제공하는 편집기 템플릿 형태로 소스 코드를 출력한다.자동 완성 이미 저장된 데이터를 기반으로 자동 완성 기능을 제공한다.파일 업로드(드래그 앤 드랍) 여러 개의 파일을 일반적인 방법(경로 지정)과 드래그 앤 드랍으로 업로드 할수 있다.경고창 자바스크립트 경고창(alert) 대신 sweetalert2로 대체한다.WYSIWYG(CKEditor) 지원 CKEditor을 사용하여 게시판에서 에디터를 사용할 수 있다. CKEditor에서 제공하는 플러그인 및 기능들을 사용하여 편의 기능을 제공한다. mention(자동완성), 드래그 앤 드랍 파일 업로드, 에디터 크기 조절, 초기 템플릿 제공이 이에 해당된다.반응형 웹페이지(모바일 지원) 브라우저 크기에 따라 웹 페이지 레이아웃이 변경되며, 모바일 환경을 지원한다.댓글 작성 각 게시글 별로 댓글을 작성할 수 있다.로그인 기록 및 데이터 기록 이력 로그인 기록(로그인 실패 유무, 로그인 위치, IP 주소 등)과 데이터 기록(사용자 이름, 내용 등)을 이력으로 남긴다.Project Lab CRUD 게시판 마이그레이션 Project Lab에서 개발한 Spring boot + Thymeleaf CRUD 게시판을 기반으로 Project SW Test Forum 환경(Vue.js)에 맞게 마이그레이션 하였다. 마이그레이션을 수행하면서 고려한 점은 다음과 같다.영어 -&amp;gt; 한글 Project Lab 웹 페이지의 기본 언어는 영어지만, Project SW Test Forum 웹 페이지의 기본 언어는 한글을 사용한다.기능 별 컴포넌트 분리 각 기능 별로 컴포넌트들을 분리하여 재활용과 유지보수에 용이하게 설계 하였다.컴포넌트 간의 데이터 전달 방법 부모에서 자식 컴포넌트에 데이터 전달하는 방법은 props를 사용하였고, 자식에서 부모 컴포넌트에 데이터를 전달하는 방법은 name 속성에 접근하여 값을 얻어오는 방식(바닐라 스크립트)를 사용하였다. vuex를 사용하였다면 코드가 좀 더 깔끔했을 거라 생각하지만, 아쉬움이 남는다.최적화 Spring boot JPA findAll 메소드명으로 쿼리를 수행하면, 테이블의 모든 컬럼을 가져온다. 이는 API 서버와 Web 서버 간의 통신에 오버헤드가 발생한다고 생각하였다. 따라서 QueryDsl을 사용하여 Web 서버에서 출력하는 데이터만 조회하도록 구현하였다. 다음 이미지는 공지사항 게시판 리스트 조회를 QueryDsl로 구현한 소스 코드다." }, { "title": "Project Lab 28. 추가 개발 및 유지보수 - 2", "url": "/posts/Project-Lab28/", "categories": "Web, Project Lab", "tags": "", "date": "2022-01-19 00:00:00 +0900", "snippet": " 추가 개발 및 유지보수 현황을 소개한다.디자인 구현: 사용자 home 페이지 레이아웃 변경 사용자 home 페이지에서 보여주는 introduction 글자 수가 많아 짐에 따라, introduction wrapper 검은색 영역 크기를 늘리고 글자 크기를 줄임 이에 따른 모바일 페이지 레이아웃 또한 변경 수정 전 수정 후버그 수정: 관리자 introduction 개행 문자 출력 오류 관리자 introduction read 페이지에서 개행 문자가 출력되지 않는 오류 수정" }, { "title": "Project Lab 27. 추가 개발 및 유지보수 - 1", "url": "/posts/Project-Lab27/", "categories": "Web, Project Lab", "tags": "", "date": "2021-10-10 00:00:00 +0900", "snippet": " 추가 개발 및 유지보수 현황을 소개한다.에러 수정: Login History read 페이지 접근 에러 수정 접근 에러 수정기능 개발 - 프론트엔드: 사용자 event 페이지 출력 변경 데스크탑 페이지인 경우 2 컬럼으로 출력 되도록 변경버그 수정: 사용자 user read 페이지 모바일 출력 변경 모바일 페이지에서 레이아웃이 깨지는 현상 수정버그 수정: 사용자 home 페이지 border 깨지는 것 수정 모바일 페이지에서 notice board, seminar의 border가 깨지는 것 수정버그 수정: 사용자, 관리자 home 페이지 모바일 화면 레이아웃 깨지는 것 수정 모바일 페이지에서 notice board, seminar에서 width 깨지는 것 수정기능 개발: 사용자 user read 페이지 출력 변경 연구실 인원 현황(전체, 교수, 박사, 석사, 학부생, 졸업생)에 따라서 다르게 출력 되도록 변경버그 수정: CKEditor 일부 기능이 적용되지 않는 버그 수정 폰트 색상, 폰트 크기, 가로줄, 기울여 쓰기, 굵게 쓰기 등 일부 태그를 중첩하여 사용할 때 적용되지 않는 버그 수정에러 수정: 관리자 album update 페이지 해시태그가 드래그 앤 드랍 되지 않는 에러 수정 해시태그 드래그 앤 드랍 기능이 정상적으로 작동하도록 수정버그 수정: 사용자 home 페이지 모바일 화면 레이아웃 깨지는 것 수정 모바일 페이지에서 event 데이터가 길어지는 경우 width가 깨지는 것 수정버그 수정: 일부 리스트 페이지에서 데이터가 없는 경우 출력되는 안내 문구 레이아웃 깨지는 것 수정 리스트 페이지에서 데이터가 없을 때 출력되는 ‘~ not founded’ 안내 문구 레이아웃 깨지지 않도록 수정" }, { "title": "Project SW Test Forum 4. Vue.js와 Spring boot에서 JWT 기반 로그인 구현 - 1", "url": "/posts/Project-SW-Test-Forum4/", "categories": "Web, Project SW Test Forum", "tags": "", "date": "2021-08-08 00:00:00 +0900", "snippet": " Vue.js와 Spring boot에서 JWT 기반 로그인을 구현한 과정을 소개한다. github: https://github.com/scribnote5/sw_test_forumJWT(JSON Web Token)란? JSON 포맷에 사용자 인증정보를 저장하는 토큰이다. JWT를 사용하여 토큰 기반 사용자 인증 시스템 즉 로그인을 구현할 수 있다. 인프런 Spring Boot JWT Tutorial 인강을 기반으로 개발하였다.출처: https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-jwtJWT과 세션 인증 방법과 비교 로그인 중인 사용자의 수가 많아지면 시스템에 과부하가 발생한다. 로그인한 사용자가 많아지면 메모리를 많이 사용하게 되기 때문이다. 서버 확장에 유리하다. 분산 시스템을 설계하는 경우, 세션 정보를 다른 프로세스간 동기화하는 과정이 어렵다.출처: https://backend-intro.vlpt.us/4/JWT는 어디에 저장해야 하는가? 두 방식 모두 보안에 완벽한 것은 없다. 취약점을 보완한다고 하면 cookie에 저장하는 방식이 local storage에 저장하는 방식보다 더 안전하다고 생각한다. 많은 개발자들이 JWT 토큰을 cookie에 저장하는 방식을 사용하고 있다. 클라이언트 뿐만 아니라 서버에서 추가적으로 XSS 취약점을 보완해야 한다.HTML Web Storage(Local Storage) 브라우저에 데이터를 저장하는 방법이다. XSS 취약점이 존재한다.-&amp;gt; 프론트엔드 프레임워크에서 XSS 취약점을 예방하기 위한 방법을 제공한다. 그러나 완벽하지 않다. Cookie 브라우저에 쿠키로 저장하는 방법으로, HTTP 요청을 보낼 때 마다 자동으로 쿠키가 서버에 전송된다. XSS 취약점이 존재한다.-&amp;gt; httpOnly 옵션을 추가하여 서버에 쿠키를 저장하면, 클라이언트는 쿠키에 접근할 수 없다. 또한 secure 옵션을 추가하면 https를 통해서만 접근 가능하다. 해당 옵션들은 클라이언트가 아닌 서버에서 설정한다. 그러나 완벽하지 않다. CSRF 취약점이 존재한다.-&amp;gt; CSRF 위조를 검사하는 토큰을 사용한다.나의 결론? Local Storage는 Cookie 보다 사용하기 편하지만, 결국 Cookie를 선택하게 되었다. Cookie의 경우 CSRF 토큰을 사용하면 CSRF 취약점을 보완 할 수 있다. Cookie에 httpOnly 옵션과 secure 옵션을 추가하여도 XSS 공격을 보완 할 수 없다. 그러나 Local Storage 보다 조금 더 보안에 유리하기 때문에 Cookie를 선택하였다. 자세한 내용은 하단 출처를 참고하였다. Conclusion Although cookies still have some vulnerabilities, it’s preferable compared to localStorage whenever possible. Why? Both localStorage and cookies are vulnerable to XSS attacks but it’s harder for the attacker to do the attack when you’re using httpOnly cookies. Cookies are vulnerable to CSRF attacks but it can be mitigated using sameSite flag and anti-CSRF tokens. You can still make it work even if you need to use the Authorization: Bearer header or if your JWT is larger than 4KB. This is also consistent with the recommendation from the OWASP community: 출처:https://dev.to/cotter/localstorage-vs-cookies-all-you-need-to-know-about-storing-jwt-tokens-securely-in-the-front-end-15idhttps://velog.io/@0307kwon/JWT%EB%8A%94-%EC%96%B4%EB%94%94%EC%97%90-%EC%A0%80%EC%9E%A5%ED%95%B4%EC%95%BC%ED%95%A0%EA%B9%8C-localStorage-vs-cookiehttps://mygumi.tistory.com/375JWT 토큰 연장 방식 Access Token의 만료 시간이 짧은 경우, 보안에는 유리하지만 자주 로그인을 해야하는 단점이 있다.Sliding Session 이러한 보안과 편의성을 모두 해결할 수 있는 방법으로 Sliding Session 전략이 있다. 해당 방식은 특정 페이지에 접속하는 경우, Access Token을 새로 발급하여 로그인 기간을 연장하는 방식이다.Refresh Token 다른 방식으로는 Refresh Token 전략이 있다. 해당 방식은 처음 로그인할 때 Access Token과 Refresh Token을 발급한다. 만약 Access Token이 만료되는 경우 Refresh Token을 사용하여 Access Token을 새로 발급한다. Refresh Token은 Access Token 보다 더 긴 만료 기간을 부여한다.나의 결론? 두 방식을 적용하지 않았다. Access Token의 만료 기간을 1일로 정하였으며, 이는 로그인이 유지되는 충분한 기간으로 판단하여 Sliding Session 전략을 사용하지 않았다. Refresh Token 전략의 필요성에 대하여 의문이 존재한다. Refresh Token은 Access Token을 발급 받기 위해 사용되므로, Refresh Token 역시 보안이 굉장히 중요하다. Refresh Token을 Cookie에 저장하든 Local Storage에 저장하든 보안 취약점이 발생하는데, 이를 공격하여 Access Token을 얻을 수 있기 때문이다. OAuth2 제공자 중 Refresh Token을 사용하지 않는 제공자(github, foursquare)도 존재한다.출처: https://zzossig.io/posts/etc/what_is_the_point_of_refresh_token/https://velog.io/@insutance/JWT-token-%EB%A7%8C%EB%A3%8Chttps://blog.ull.im/engineering/2019/02/07/jwt-strategy.htmlSpring boot에서 JWT 구현 Spring boot에서 JWT를 발급하는 기본 로직은 하단 출처를 참고하여 개발하였다.출처: https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-jwtSpring boot에서 JWT 구현 - 수정 Access Token을 Cookie에 저장하도록 수정하였으며, 이로 인해 발생하는 문제점을 보완 하기 위해서 다음 항목 별로 코드를 수정 및 보완 하였다.Cookie httpOnly httpOnly 옵션을 추가하여 서버에서 쿠키를 저장하면, 클라이언트는 쿠키에 접근할 수 없다. 처음 인증할 때 Access Token를 쿠키에 저장하여 응답한다면, HTTP 통신을 할 때 자동으로 Set-Cookie 헤더에 Access Token이 저장된다. 쿠키 보안 문제를 해결하기 위해 만들어진 Samsite 쿠키는 None, Lax, Strict 정책이 있다. Samsite 쿠키는 서로 다른 도메인 간 쿠키를 전송하는 옵션으로, 같은 도메인을 사용하는 웹 페이지는 고려 대상이 아니다. 따라서 가장 높은 보안 단계인 Strict 정책을 적용하였다. Spring boot에서 Cookie에 httpOnly 옵션 등 기타 설정 방법은 하단 출처를 참고하였다.출처: https://dncjf64.tistory.com/292https://seob.dev/posts/%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%BF%A0%ED%82%A4%EC%99%80-SameSite-%EC%86%8D%EC%84%B1/https://www.hahwul.com/2020/01/18/samesite-lax/&amp;lt;module-app-api\\src\\main\\java\\com\\suresoft\\sw_test_forum\\controller\\common\\AuthorityController.java&amp;gt; @PostMapping(&quot;/authenticate&quot;) public ResponseEntity authenticate(@Valid @RequestBody LoginDto loginDto, HttpServletResponse response) { // authenticationToken 생성, username + moduleName //... // authenticate 메소드가 실행될 때 loadUserByUsername 메소드 호출 // ... // JWT token 생성, token subject는 userIdx와 username으로 구성 User user = userService.findUserIdxByUsername(loginDto.getUsername()); String jwt = tokenProvider.createToken(user.getIdx(), authentication); ResponseCookie resCookie = ResponseCookie.from(&quot;accessToken&quot;, jwt) .httpOnly(true)// .domain(&quot;&quot;) // 해당 도메인에서만 유효한 쿠키 .sameSite(&quot;Strict&quot;) // None, Strict, Lax// .secure(true) // HTTPS가 적용된 요청에만 전송되는 쿠키 .path(&quot;/&quot;) .maxAge(Math.toIntExact(1 * 24 * 60 * 60)) .build(); response.addHeader(&quot;Set-Cookie&quot;, resCookie.toString()); return new ResponseEntity(user, HttpStatus.OK); } 인증된 JWT는 쿠키에 저장되어 클라이언트에 전송된다. 이후 클라이언트에서는 서버로 JWT를 전달해야 하는데, axios에서는 하단 설정을 추가하면 JWT를 쿠키에 저장하여 전송 한다. 서버는 클라이언트 쿠키에 저장된 JWT를 사용하여 인증을 수행한다.&amp;lt;module-app-web\\front\\src\\main.js&amp;gt;// axios 설정// ...axios.defaults.withCredentials = true; // 다른 origin에 JWT를 전달하기 위한 설정출처: https://dncjf64.tistory.com/292https://cherish-it.tistory.com/11CSRF(Cross Site Request Forgery) 웹 사이트의 취약점을 이용하여 이용자가 의도하지 하지 않은 요청을 통한 공격이다.CSRF 시나리오 출처: https://codevang.tistory.com/282 가장 간단한 해결책으로는 CSRF 토큰을 헤더 정보에 포함하여 서버에 요청하는 것이다. 클라이언트에서 axios를 사용하는 경우 CSRF 토큰을 전송 설정은 기본 값으로 되어 있다.&amp;lt;module-app-web\\front\\src\\main.js&amp;gt;// axios 설정axios.defaults.xsrfCookieName = &#39;XSRF-TOKEN&#39; // csrf 기본 설정을 명시적으로 선언axios.defaults.xsrfHeaderName = &#39;X-XSRF-TOKEN&#39; // csrf 기본 설정을 명시적으로 선언출처: https://zetawiki.com/wiki/Vue.js_%2B_axios_%2B_django_CSRF_%ED%86%A0%ED%81%B0_%EC%84%A4%EC%A0%95_%EB%A7%9E%EC%B6%94%EA%B8%B0 서버에서는 클라이언트에서 송신한 CSRF Token이 유효한지 검사해야 한다. Spring boot에서 CSRF 설정을 방법은 하단 출처를 참고하였다.&amp;lt;module-app-api\\src\\main\\java\\com\\suresoft\\sw_test_forum\\config\\SecurityConfig.java&amp;gt;@Configuration@EnableWebSecurity@EnableGlobalMethodSecurity(prePostEnabled = true)public class SecurityConfig extends WebSecurityConfigurerAdapter { // ... @Override protected void configure(HttpSecurity http) throws Exception { http // csrf 설정 .csrf() .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()) .ignoringAntMatchers(&quot;/api/auths/authenticate&quot;) // ...출처: https://cheese10yun.github.io/spring-csrf/CORS preflight 요청은 권한 확인 제외 클라이언트(요청하는 쪽)이 서버(요청 받는 쪽)과 본격적인 통신을 수행하기 전에 OPTIONS 메소드로 preflight를 전송한다. 실제 요청과 응답을 주고 받기 전 클라이언트에 CORS 권한이 있는지 ‘사전검사’를 한 후에 클라이언트에서 실제 요청을 보낸다. 하지만 preflight를 보내는 경우에도 JWT가 있는지 검사하여 에러가 발생한다. 따라서 preflight(request method가 OPTIONS)를 전송할 때를 JWT 유효성 검사에서 제외하였다.&amp;lt;module-app-api\\java\\com\\suresoft\\sw_test_forum\\jwt\\JwtFilter.java&amp;gt; @Override public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException { HttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest; String requestURI = httpServletRequest.getRequestURI(); Cookie cookie = WebUtils.getCookie(httpServletRequest, &quot;accessToken&quot;); String jwt = &quot;&quot;; if (!EmptyUtil.isEmpty(cookie)) { jwt = cookie.getValue(); } log.info(&quot;jwt: &quot; + jwt); log.info(&quot;requestURI: &quot; + requestURI); if (StringUtils.hasText(jwt) &amp;amp;&amp;amp; tokenProvider.validateToken(jwt)) { Authentication authentication = tokenProvider.getAuthentication(jwt); SecurityContextHolder.getContext().setAuthentication(authentication); log.info(&quot;Security Context에 &#39;{}&#39; 인증 정보를 저장했습니다, uri: {}&quot;, authentication.getName(), requestURI); } else if (&quot;OPTIONS&quot;.equals(httpServletRequest.getMethod())) { log.info(&quot;preflight: OPTIONS 요청&quot;); } else if (&quot;/api/auths/authenticate&quot;.equals(requestURI)) { log.info(&quot;/api/auths/authenticate 요청&quot;); } else { log.error(&quot;유효한 JWT 토큰이 없습니다, uri: {}&quot;, requestURI); } filterChain.doFilter(servletRequest, servletResponse); }출처: https://velog.io/@ojwman/spring-boot-cors-header-preflightSpring boot에서 XSS(Cross-site Scripting) 취약점 방어 Spring boot에서 XSS 취약점을 방어 수단으로 lucy-xss-servlet-filter를 사용할 수 있다. 그러나 Form Data에 대해서 적용되기에, 프론트엔드 서버와 백엔드 서버 간의 통신에서 사용하는 Request Payload에 대해서는 적용되지 않는다. 따라서 MessageConverter를 사용하여 JSON 문자열을 생성할 때 XSS 취약점을 방어하도록 처리하였다.출처: https://exhibitlove.tistory.com/3" }, { "title": "Project SW Test Forum 3. Vue.js CKEditor 5 - 1", "url": "/posts/Project-SW-Test-Forum3/", "categories": "Web, Project SW Test Forum", "tags": "", "date": "2021-07-17 00:00:00 +0900", "snippet": " Vue.js 3에서 CKEditor5를 적용하는 과정을 소개한다. github: https://github.com/scribnote5/sw_test_forumCKEditor란? 일반적으로 게시판에 글을 작성할 때 다양한 편집 기능을 제공하는 WYSIWYG 중 하나다. CKEditor 이외에도 Summernote, TinyMCE, Froala Editor 등 다양한 WYSIWYG가 존재한다. CKEditor를 선택한 계기는 기존에는 summernote를 사용하였지만, 애니메이션 효과가 적용되지 않아서 변경하게 되었다. 또한 summernote에 비하여 다양한 플러그인(기능)을 제공하고 디자인도 더 깔끔하고 세련되었다고 생각하여, 최신 버전인 CKEditor5를 선택하게 되었다.CKEditor Vue.js에 적용 Project Lab에서는 Spring Boot 템플릿 엔진인 Thymeleaf를 사용하였으며, CKEditor Online Builder를 사용하여 CKEditor를 적용하였다. 하단 출처의 웹페이지에서 원하는 템플릿, 플러그인, 메뉴바 위치 등을 선택하여 빌드하면 이를 다운 받아 사용 할 수 있다.출처: https://ckeditor.com/ckeditor-5/online-builder Vue.js에서 CKEditor를 사용하려면 CKEditor Online Builder가 아닌 CKEditor 공식 문서를 참고해야 한다.출처: https://ckeditor.com/docs/ckeditor5/latest/builds/guides/integration/frameworks/vuejs-v3.html CKEditor 관련 모듈 설치 CKEidtor를 사용하기 위한 필수 모듈이다.npm install --save \\ @ckeditor/ckeditor5-vue \\ @ckeditor/ckeditor5-dev-webpack-plugin \\ @ckeditor/ckeditor5-dev-utils \\ postcss-loader@3 \\ raw-loader@0.5.1 CKEditor 관련 모듈(템플릿, plugins)를 설치한다. CKEditor 플러그인을 알아보면서 편집에 필요한 기본 플러그인, 편의성을 제공하는 플러그인, 응용 플러그인을 모두 추가하였다. 해당 설정대로 진행하면 어느정도 보장된 수준의 플러그인을 제공한다. 개발자가 구현하려는 시스템에 따라서 CKEditor에서 사용할 모듈을 추가 및 제거하면 된다.&amp;lt;package.json&amp;gt;... &quot;dependencies&quot;: { &quot;@ckeditor/ckeditor5-adapter-ckfinder&quot;: &quot;^27.1.0&quot;, &quot;@ckeditor/ckeditor5-alignment&quot;: &quot;^27.1.0&quot;, &quot;@ckeditor/ckeditor5-basic-styles&quot;: &quot;^27.1.0&quot;, &quot;@ckeditor/ckeditor5-build-classic&quot;: &quot;^27.1.0&quot;, &quot;@ckeditor/ckeditor5-ckfinder&quot;: &quot;^27.1.0&quot;, &quot;@ckeditor/ckeditor5-cloud-services&quot;: &quot;^27.1.0&quot;, &quot;@ckeditor/ckeditor5-code-block&quot;: &quot;^27.1.0&quot;, &quot;@ckeditor/ckeditor5-dev-utils&quot;: &quot;^24.4.2&quot;, &quot;@ckeditor/ckeditor5-dev-webpack-plugin&quot;: &quot;^24.4.2&quot;, &quot;@ckeditor/ckeditor5-editor-classic&quot;: &quot;^27.1.0&quot;, &quot;@ckeditor/ckeditor5-essentials&quot;: &quot;^27.1.0&quot;, &quot;@ckeditor/ckeditor5-font&quot;: &quot;^27.1.0&quot;, &quot;@ckeditor/ckeditor5-highlight&quot;: &quot;^27.1.0&quot;, &quot;@ckeditor/ckeditor5-horizontal-line&quot;: &quot;^27.1.0&quot;, &quot;@ckeditor/ckeditor5-html-embed&quot;: &quot;^27.1.0&quot;, &quot;@ckeditor/ckeditor5-image&quot;: &quot;^27.1.0&quot;, &quot;@ckeditor/ckeditor5-indent&quot;: &quot;^27.1.0&quot;, &quot;@ckeditor/ckeditor5-link&quot;: &quot;^27.1.0&quot;, &quot;@ckeditor/ckeditor5-media-embed&quot;: &quot;^27.1.0&quot;, &quot;@ckeditor/ckeditor5-paragraph&quot;: &quot;^27.1.0&quot;, &quot;@ckeditor/ckeditor5-paste-from-office&quot;: &quot;^27.1.0&quot;, &quot;@ckeditor/ckeditor5-remove-format&quot;: &quot;^27.1.0&quot;, &quot;@ckeditor/ckeditor5-special-characters&quot;: &quot;^27.1.0&quot;, &quot;@ckeditor/ckeditor5-table&quot;: &quot;^27.1.0&quot;, &quot;@ckeditor/ckeditor5-theme-lark&quot;: &quot;^27.1.0&quot;, &quot;@ckeditor/ckeditor5-vue&quot;: &quot;^2.0.1&quot;, &quot;@ckeditor/ckeditor5-word-count&quot;: &quot;^27.1.0&quot;,}... vue.js ‘/’(root) 경로에 하단의 vue.js.config 파일을 생성한다.&amp;lt;vue.js.config&amp;gt;const path = require( &#39;path&#39; );const CKEditorWebpackPlugin = require( &#39;@ckeditor/ckeditor5-dev-webpack-plugin&#39; );const { styles } = require( &#39;@ckeditor/ckeditor5-dev-utils&#39; );module.exports = { // The source of CKEditor is encapsulated in ES6 modules. By default, the code // from the node_modules directory is not transpiled, so you must explicitly tell // the CLI tools to transpile JavaScript files in all ckeditor5-* modules. transpileDependencies: [ /ckeditor5-[^/\\\\]+[/\\\\]src[/\\\\].+\\.js$/, ], configureWebpack: { plugins: [ // CKEditor needs its own plugin to be built using webpack. new CKEditorWebpackPlugin( { // See https://ckeditor.com/docs/ckeditor5/latest/features/ui-language.html language: &#39;en&#39;, // Append translations to the file matching the `app` name. translationsOutputFile: /app/ } ) ] }, // Vue CLI would normally use its own loader to load .svg and .css files, however: // 1. The icons used by CKEditor must be loaded using raw-loader, // 2. The CSS used by CKEditor must be transpiled using PostCSS to load properly. chainWebpack: config =&amp;gt; { // (1.) To handle the editor icons, get the default rule for *.svg files first: const svgRule = config.module.rule( &#39;svg&#39; ); // Then you can either: // // * clear all loaders for existing &#39;svg&#39; rule: // // svgRule.uses.clear(); // // * or exclude ckeditor directory from node_modules: svgRule.exclude.add( path.join( __dirname, &#39;node_modules&#39;, &#39;@ckeditor&#39; ) ); // Add an entry for *.svg files belonging to CKEditor. You can either: // // * modify the existing &#39;svg&#39; rule: // // svgRule.use( &#39;raw-loader&#39; ).loader( &#39;raw-loader&#39; ); // // * or add a new one: config.module .rule( &#39;cke-svg&#39; ) .test( /ckeditor5-[^/\\\\]+[/\\\\]theme[/\\\\]icons[/\\\\][^/\\\\]+\\.svg$/ ) .use( &#39;raw-loader&#39; ) .loader( &#39;raw-loader&#39; ); // (2.) Transpile the .css files imported by the editor using PostCSS. // Make sure only the CSS belonging to ckeditor5-* packages is processed this way. config.module .rule( &#39;cke-css&#39; ) .test( /ckeditor5-[^/\\\\]+[/\\\\].+\\.css$/ ) .use( &#39;postcss-loader&#39; ) .loader( &#39;postcss-loader&#39; ) .tap( () =&amp;gt; { return styles.getPostCssConfig( { themeImporter: { themePath: require.resolve( &#39;@ckeditor/ckeditor5-theme-lark&#39; ), }, minify: true } ); } ); }};CKEditor 설정 CKEditor에서 사용하는 css 파일로, CKEditor를 사용할 때 import 하지 않으면 css가 적용되지 않아 레이아웃이 깨진다.&amp;lt;/src/assets/css/ckeditor.css&amp;gt;/* * CKEditor 5 (v27.0.0) content styles. * Generated on Wed, 24 Mar 2021 08:00:59 GMT. * For more information, check out https://ckeditor.com/docs/ckeditor5/latest/builds/guides/integration/content-styles.html */ :root { --ck-color-mention-background: hsla(341, 100%, 30%, 0.1); --ck-color-mention-text: hsl(341, 100%, 30%); --ck-highlight-marker-blue: hsl(201, 97%, 72%); --ck-highlight-marker-green: hsl(120, 93%, 68%); --ck-highlight-marker-pink: hsl(345, 96%, 73%); --ck-highlight-marker-yellow: hsl(60, 97%, 73%); --ck-highlight-pen-green: hsl(112, 100%, 27%); --ck-highlight-pen-red: hsl(0, 85%, 49%); --ck-image-style-spacing: 1.5em; --ck-todo-list-checkmark-size: 16px;}/* ckeditor5 height */.ck-editor__editable { min-height: 500px;}/* ckeditor5-font/theme/fontsize.css */.ck-content .text-tiny { font-size: .7em;}/* ckeditor5-font/theme/fontsize.css */.ck-content .text-small { font-size: .85em;}/* ckeditor5-font/theme/fontsize.css */.ck-content .text-big { font-size: 1.4em;}/* ckeditor5-font/theme/fontsize.css */.ck-content .text-huge { font-size: 1.8em;}/* ckeditor5-code-block/theme/codeblock.css */.ck-content pre { padding: 1em; color: hsl(0, 0%, 20.8%); background: hsla(0, 0%, 78%, 0.3); border: 1px solid hsl(0, 0%, 77%); border-radius: 2px; text-align: left; direction: ltr; tab-size: 4; white-space: pre-wrap; font-style: normal; min-width: 200px;}/* ckeditor5-code-block/theme/codeblock.css */.ck-content pre code { background: unset; padding: 0; border-radius: 0;}/* ckeditor5-horizontal-line/theme/horizontalline.css */.ck-content hr { margin: 15px 0; height: 4px; background: hsl(0, 0%, 87%); border: 0;}/* ckeditor5-highlight/theme/highlight.css */.ck-content .marker-yellow { background-color: var(--ck-highlight-marker-yellow);}/* ckeditor5-highlight/theme/highlight.css */.ck-content .marker-green { background-color: var(--ck-highlight-marker-green);}/* ckeditor5-highlight/theme/highlight.css */.ck-content .marker-pink { background-color: var(--ck-highlight-marker-pink);}/* ckeditor5-highlight/theme/highlight.css */.ck-content .marker-blue { background-color: var(--ck-highlight-marker-blue);}/* ckeditor5-highlight/theme/highlight.css */.ck-content .pen-red { color: var(--ck-highlight-pen-red); background-color: transparent;}/* ckeditor5-highlight/theme/highlight.css */.ck-content .pen-green { color: var(--ck-highlight-pen-green); background-color: transparent;}/* ckeditor5-image/theme/imagestyle.css */.ck-content .image-style-side { float: right; margin-left: var(--ck-image-style-spacing); max-width: 50%;}/* ckeditor5-image/theme/imagestyle.css */.ck-content .image-style-align-left { float: left; margin-right: var(--ck-image-style-spacing);}/* ckeditor5-image/theme/imagestyle.css */.ck-content .image-style-align-center { margin-left: auto; margin-right: auto;}/* ckeditor5-image/theme/imagestyle.css */.ck-content .image-style-align-right { float: right; margin-left: var(--ck-image-style-spacing);}/* ckeditor5-image/theme/imagecaption.css */.ck-content .image &amp;gt; figcaption { display: table-caption; caption-side: bottom; word-break: break-word; color: hsl(0, 0%, 20%); background-color: hsl(0, 0%, 97%); padding: .6em; font-size: .75em; outline-offset: -1px;}/* ckeditor5-image/theme/image.css */.ck-content .image { display: table; clear: both; text-align: center; margin: 1em auto;}/* ckeditor5-image/theme/image.css */.ck-content .image img { display: block; margin: 0 auto; max-width: 100%; min-width: 50px;}/* ckeditor5-image/theme/imageresize.css */.ck-content .image.image_resized { max-width: 100%; display: block; box-sizing: border-box;}/* ckeditor5-image/theme/imageresize.css */.ck-content .image.image_resized img { width: 100%;}/* ckeditor5-image/theme/imageresize.css */.ck-content .image.image_resized &amp;gt; figcaption { display: block;}/* ckeditor5-language/theme/language.css */.ck-content span[lang] { font-style: italic;}/* ckeditor5-block-quote/theme/blockquote.css */.ck-content blockquote { overflow: hidden; padding-right: 1.5em; padding-left: 1.5em; margin-left: 0; margin-right: 0; font-style: italic; border-left: solid 5px hsl(0, 0%, 80%);}/* ckeditor5-block-quote/theme/blockquote.css */.ck-content[dir=&quot;rtl&quot;] blockquote { border-left: 0; border-right: solid 5px hsl(0, 0%, 80%);}/* ckeditor5-basic-styles/theme/code.css */.ck-content code { background-color: hsla(0, 0%, 78%, 0.3); padding: .15em; border-radius: 2px;}/* ckeditor5-table/theme/table.css */.ck-content .table { margin: 1em auto; display: table;}/* ckeditor5-table/theme/table.css */.ck-content .table table { border-collapse: collapse; border-spacing: 0; width: 100%; height: 100%; border: 1px double hsl(0, 0%, 70%);}/* ckeditor5-table/theme/table.css */.ck-content .table table td,.ck-content .table table th { min-width: 2em; padding: .4em; border: 1px solid hsl(0, 0%, 75%);}/* ckeditor5-table/theme/table.css */.ck-content .table table th { font-weight: bold; background: hsla(0, 0%, 0%, 5%);}/* ckeditor5-table/theme/table.css */.ck-content[dir=&quot;rtl&quot;] .table th { text-align: right;}/* ckeditor5-table/theme/table.css */.ck-content[dir=&quot;ltr&quot;] .table th { text-align: left;}/* ckeditor5-page-break/theme/pagebreak.css */.ck-content .page-break { position: relative; clear: both; padding: 5px 0; display: flex; align-items: center; justify-content: center;}/* ckeditor5-page-break/theme/pagebreak.css */.ck-content .page-break::after { content: &#39;&#39;; position: absolute; border-bottom: 2px dashed hsl(0, 0%, 77%); width: 100%;}/* ckeditor5-page-break/theme/pagebreak.css */.ck-content .page-break__label { position: relative; z-index: 1; padding: .3em .6em; display: block; text-transform: uppercase; border: 1px solid hsl(0, 0%, 77%); border-radius: 2px; font-family: Helvetica, Arial, Tahoma, Verdana, Sans-Serif; font-size: 0.75em; font-weight: bold; color: hsl(0, 0%, 20%); background: hsl(0, 0%, 100%); box-shadow: 2px 2px 1px hsla(0, 0%, 0%, 0.15); -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none;}/* ckeditor5-media-embed/theme/mediaembed.css */.ck-content .media { clear: both; margin: 1em 0; display: block; min-width: 15em;}/* ckeditor5-list/theme/todolist.css */.ck-content .todo-list { list-style: none;}/* ckeditor5-list/theme/todolist.css */.ck-content .todo-list li { margin-bottom: 5px;}/* ckeditor5-list/theme/todolist.css */.ck-content .todo-list li .todo-list { margin-top: 5px;}/* ckeditor5-list/theme/todolist.css */.ck-content .todo-list .todo-list__label &amp;gt; input { -webkit-appearance: none; display: inline-block; position: relative; width: var(--ck-todo-list-checkmark-size); height: var(--ck-todo-list-checkmark-size); vertical-align: middle; border: 0; left: -25px; margin-right: -15px; right: 0; margin-left: 0;}/* ckeditor5-list/theme/todolist.css */.ck-content .todo-list .todo-list__label &amp;gt; input::before { display: block; position: absolute; box-sizing: border-box; content: &#39;&#39;; width: 100%; height: 100%; border: 1px solid hsl(0, 0%, 20%); border-radius: 2px; transition: 250ms ease-in-out box-shadow, 250ms ease-in-out background, 250ms ease-in-out border;}/* ckeditor5-list/theme/todolist.css */.ck-content .todo-list .todo-list__label &amp;gt; input::after { display: block; position: absolute; box-sizing: content-box; pointer-events: none; content: &#39;&#39;; left: calc( var(--ck-todo-list-checkmark-size) / 3 ); top: calc( var(--ck-todo-list-checkmark-size) / 5.3 ); width: calc( var(--ck-todo-list-checkmark-size) / 5.3 ); height: calc( var(--ck-todo-list-checkmark-size) / 2.6 ); border-style: solid; border-color: transparent; border-width: 0 calc( var(--ck-todo-list-checkmark-size) / 8 ) calc( var(--ck-todo-list-checkmark-size) / 8 ) 0; transform: rotate(45deg);}/* ckeditor5-list/theme/todolist.css */.ck-content .todo-list .todo-list__label &amp;gt; input[checked]::before { background: hsl(126, 64%, 41%); border-color: hsl(126, 64%, 41%);}/* ckeditor5-list/theme/todolist.css */.ck-content .todo-list .todo-list__label &amp;gt; input[checked]::after { border-color: hsl(0, 0%, 100%);}/* ckeditor5-list/theme/todolist.css */.ck-content .todo-list .todo-list__label .todo-list__label__description { vertical-align: middle;}/* ckeditor5-html-embed/theme/htmlembed.css */.ck-content .raw-html-embed { margin: 1em auto; min-width: 15em; font-style: normal;}/* ckeditor5-mention/theme/mention.css */.ck-content .mention { background: var(--ck-color-mention-background); color: var(--ck-color-mention-text);}@media print { /* ckeditor5-page-break/theme/pagebreak.css */ .ck-content .page-break { padding: 0; } /* ckeditor5-page-break/theme/pagebreak.css */ .ck-content .page-break::after { display: none; }} CKEditor 플러그인, 메뉴바를 초기화하는 파일이다. CKEditor 플러그인을 알아보면서 편집에 필요한 기본 플러그인, 편의성을 제공하는 플러그인, 응용 플러그인을 모두 추가하였다. 해당 설정대로 진행하면 어느정도 보장된 수준의 플러그인을 제공한다. 워드를 바탕으로 메뉴바 기능을 정렬하여, 익숙한 사용성을 제공하려고 하였다. 개발자가 구현하려는 시스템에 따라서 수정하면 된다.&amp;lt;/src/assets/plugins/ckeditor/ckeditor-init.js&amp;gt;import ClassicEditor from &#39;@ckeditor/ckeditor5-editor-classic/src/classiceditor&#39;import Essentials from &#39;@ckeditor/ckeditor5-essentials/src/essentials&#39;import Bold from &#39;@ckeditor/ckeditor5-basic-styles/src/bold&#39;import Italic from &#39;@ckeditor/ckeditor5-basic-styles/src/italic&#39;import Code from &#39;@ckeditor/ckeditor5-basic-styles/src/code&#39;import Strikethrough from &#39;@ckeditor/ckeditor5-basic-styles/src/strikethrough&#39;import Subscript from &#39;@ckeditor/ckeditor5-basic-styles/src/subscript&#39;import Superscript from &#39;@ckeditor/ckeditor5-basic-styles/src/superscript&#39;import Underline from &#39;@ckeditor/ckeditor5-basic-styles/src/underline&#39;import Image from &#39;@ckeditor/ckeditor5-image/src/image&#39;import ImageCaption from &#39;@ckeditor/ckeditor5-image/src/imagecaption&#39;import ImageStyle from &#39;@ckeditor/ckeditor5-image/src/imagestyle&#39;import ImageToolbar from &#39;@ckeditor/ckeditor5-image/src/imagetoolbar&#39;import ImageResize from &#39;@ckeditor/ckeditor5-image/src/imageresize&#39;import ImageInsert from &#39;@ckeditor/ckeditor5-image/src/imageinsert&#39;import ImageUpload from &#39;@ckeditor/ckeditor5-image/src/imageupload&#39;import AutoImage from &#39;@ckeditor/ckeditor5-image/src/autoimage&#39;import SpecialCharacters from &#39;@ckeditor/ckeditor5-special-characters/src/specialcharacters&#39;import SpecialCharactersCurrency from &#39;@ckeditor/ckeditor5-special-characters/src/specialcharacterscurrency&#39;import SpecialCharactersLatin from &#39;@ckeditor/ckeditor5-special-characters/src/specialcharacterslatin&#39;import SpecialCharactersMathematical from &#39;@ckeditor/ckeditor5-special-characters/src/specialcharactersmathematical&#39;import FontBackgroundColor from &#39;@ckeditor/ckeditor5-font/src/fontbackgroundcolor&#39;import FontFamily from &#39;@ckeditor/ckeditor5-font/src/fontfamily&#39;import FontSize from &#39;@ckeditor/ckeditor5-font/src/fontsize&#39;import FontColor from &#39;@ckeditor/ckeditor5-font/src/fontcolor&#39;import Link from &#39;@ckeditor/ckeditor5-link/src/link&#39;import Linkimage from &#39;@ckeditor/ckeditor5-link/src/linkimage&#39;import AutoLink from &#39;@ckeditor/ckeditor5-link/src/autolink&#39;import Table from &#39;@ckeditor/ckeditor5-table/src/table&#39;import TableToolbar from &#39;@ckeditor/ckeditor5-table/src/tabletoolbar&#39;import TableProperties from &#39;@ckeditor/ckeditor5-table/src/tableproperties&#39;import TableCellProperties from &#39;@ckeditor/ckeditor5-table/src/tablecellproperties&#39;import Heading from &#39;@ckeditor/ckeditor5-heading/src/heading&#39;import Title from &#39;@ckeditor/ckeditor5-heading/src/title&#39;import Indent from &#39;@ckeditor/ckeditor5-indent/src/indent&#39;import IndentBlock from &#39;@ckeditor/ckeditor5-indent/src/indentblock&#39;import List from &#39;@ckeditor/ckeditor5-list/src/list&#39;import ListStyle from &#39;@ckeditor/ckeditor5-list/src/liststyle&#39;import MediaEmbed from &#39;@ckeditor/ckeditor5-media-embed/src/mediaembed&#39;import BlockQuote from &#39;@ckeditor/ckeditor5-block-quote/src/blockquote&#39;import RemoveFormat from &#39;@ckeditor/ckeditor5-remove-format/src/removeformat&#39;import WordCount from &#39;@ckeditor/ckeditor5-word-count/src/wordcount&#39;import PasteFromOffice from &#39;@ckeditor/ckeditor5-paste-from-office/src/pastefromoffice&#39;import TextTransformation from &#39;@ckeditor/ckeditor5-typing/src/texttransformation&#39;import CKFinderUploadAdapter from &#39;@ckeditor/ckeditor5-adapter-ckfinder/src/uploadadapter&#39;import CodeBlock from &#39;@ckeditor/ckeditor5-code-block/src/codeblock&#39;import Highlight from &#39;@ckeditor/ckeditor5-highlight/src/highlight&#39;import HorizontalLine from &#39;@ckeditor/ckeditor5-horizontal-line/src/horizontalline&#39;import Paragraph from &#39;@ckeditor/ckeditor5-paragraph/src/paragraph&#39;import Alignment from &#39;@ckeditor/ckeditor5-alignment/src/alignment&#39;import Htmlembed from &#39;@ckeditor/ckeditor5-html-embed/src/htmlembed&#39;import UploadAdapter from &#39;@ckeditor/ckeditor5-adapter-ckfinder/src/uploadadapter&#39;import Autoformat from &#39;@ckeditor/ckeditor5-autoformat/src/autoformat&#39;import EasyImage from &#39;@ckeditor/ckeditor5-easy-image/src/easyimage&#39;import CloudServices from &#39;@ckeditor/ckeditor5-cloud-services/src/cloudservices&#39;import { CustomUploadAdapterPlugin } from &#39;./ckeditor-upload-adapter.js&#39;const editor = ClassicEditor;const editorData = &#39;&amp;lt;p&amp;gt;Content of the editor.&amp;lt;/p&amp;gt;&#39;;const editorConfig = { plugins: [ Essentials, Bold, Italic, Code, Strikethrough, Subscript, Superscript, Underline, Image, ImageCaption, ImageStyle, ImageToolbar, ImageResize, ImageInsert, ImageUpload, AutoImage, SpecialCharacters, SpecialCharactersCurrency, SpecialCharactersLatin, SpecialCharactersMathematical, FontBackgroundColor, FontFamily, FontSize, FontColor, Link, Linkimage, AutoLink, Table, TableToolbar, TableProperties, TableCellProperties, Heading, Title, Indent, IndentBlock, MediaEmbed, List, ListStyle, BlockQuote, RemoveFormat, WordCount, PasteFromOffice, TextTransformation, CKFinderUploadAdapter, CodeBlock, Highlight, HorizontalLine, Paragraph, Alignment, Htmlembed, UploadAdapter, Autoformat, EasyImage, CloudServices ], toolbar: { items: [ &#39;heading&#39;, &#39;|&#39;, &#39;fontFamily&#39;, &#39;fontSize&#39;, &#39;fontColor&#39;, &#39;fontBackgroundColor&#39;, &#39;highlight&#39;, &#39;|&#39;, &#39;blockQuote&#39;, &#39;bold&#39;, &#39;italic&#39;, &#39;underline&#39;, &#39;strikethrough&#39;, &#39;removeFormat&#39;, &#39;|&#39;, &#39;alignment&#39;, &#39;|&#39;, &#39;bulletedList&#39;, &#39;numberedList&#39;, &#39;|&#39;, &#39;outdent&#39;, &#39;indent&#39;, &#39;|&#39;, &#39;imageInsert&#39;, &#39;insertTable&#39;, &#39;|&#39;, &#39;link&#39;, &#39;horizontalLine&#39;, &#39;specialCharacters&#39;, &#39;superscript&#39;, &#39;subscript&#39;, &#39;|&#39;, &#39;mediaEmbed&#39;, &#39;codeBlock&#39;, &#39;htmlEmbed&#39;, &#39;code&#39;, &#39;|&#39;, &#39;undo&#39;, &#39;redo&#39; ] }, language: &#39;en&#39;, image: { // Configure the available styles. styles: [ &#39;alignLeft&#39;, &#39;alignCenter&#39;, &#39;alignRight&#39; ], // Configure the available image resize options. resizeOptions: [ { name: &#39;imageResize:original&#39;, label: &#39;Original&#39;, value: null }, { name: &#39;imageResize:75&#39;, label: &#39;75%&#39;, value: &#39;75&#39; }, { name: &#39;imageResize:50&#39;, label: &#39;50%&#39;, value: &#39;50&#39; }, { name: &#39;imageResize:25&#39;, label: &#39;25%&#39;, value: &#39;25&#39; } ], // You need to configure the image toolbar, too, so it shows the new style // buttons as well as the resize buttons. toolbar: [ &#39;imageStyle:alignLeft&#39;, &#39;imageStyle:alignCenter&#39;, &#39;imageStyle:alignRight&#39;, &#39;|&#39;, &#39;imageResize&#39;, &#39;|&#39;, &#39;imageTextAlternative&#39; ] }, table: { contentToolbar: [ &#39;tableColumn&#39;, &#39;tableRow&#39;, &#39;mergeTableCells&#39;, &#39;tableCellProperties&#39;, &#39;tableProperties&#39; ] }, extraPlugins: [CustomUploadAdapterPlugin]};export { editor, editorData, editorConfig }; CKEditor Content 영역에 파일을 드래그앤드랍 하는 경우 발생하는 이벤트를 처리하는 파일이다. 드래그앤드랍 기능을 구현할 수 있다. API 서버를 구현되어 있을 때, 파일 드래그앤드랍 이벤트가 발생하는 경우 비동기 방식으로 파일이 API 서버로 전송되어 업로드 된다. xhr.open(‘POST’, ‘localhost’ + ‘/api/attachedFiles/upload’, true); 에 파일 업로드를 처리하는 API 서버 URI를 입력하면 된다.&amp;lt;/src/assets/plugins/ckeditor/ckeditor-upload-adapter.js&amp;gt;/* ckeditor custom image upload */class CustomUploadAdapter { constructor(loader) { this.loader = loader; } upload() { return this.loader.file.then(file =&amp;gt; new Promise(((resolve, reject) =&amp;gt; { this._initRequest(); this._initListeners(resolve, reject, file); this._sendRequest(file); }))) } _initRequest() { const xhr = this.xhr = new XMLHttpRequest(); xhr.open(&#39;POST&#39;, &#39;localhost&#39; + &#39;/api/attachedFiles/upload&#39;, true); // 이미지 파일을 업로드하는 파일 주소 xhr.responseType = &#39;json&#39;; } _initListeners(resolve, reject, file) { const xhr = this.xhr; const loader = this.loader; const genericErrorText = &#39;Couldn\\&#39;t upload file.&#39; xhr.addEventListener(&#39;error&#39;, () =&amp;gt; { reject(genericErrorText) }) xhr.addEventListener(&#39;abort&#39;, () =&amp;gt; reject()) xhr.addEventListener(&#39;load&#39;, () =&amp;gt; { const response = xhr.response if (!response || response.error) { return reject(response &amp;amp;&amp;amp; response.error ? response.error.message : genericErrorText); } resolve({ default: response.url }) }) } _sendRequest(file) { const data = new FormData() data.append(&quot;files&quot;, file) this.xhr.send(data) }}function CustomUploadAdapterPlugin(editor) { editor.plugins.get(&#39;FileRepository&#39;).createUploadAdapter = (loader) =&amp;gt; { return new CustomUploadAdapter(loader) }}export { CustomUploadAdapterPlugin }CKEditor 5 적용 및 예시 지금까지 설정한 CKEditor를 적용한 예시다. CKEditor 5 메뉴얼에서는 main.js에 CKEditor 모듈을 import 하여 전역 변수로 사용하도록 가이드 하지만, 다음과 같이 지역 변수로 선언하여 사용 할 수 있다. CKEditor에 입력된 데이터는 vueEditorData 변수에 저장된다. writePost 함수와 같이 이벤트 함수의 인자로 vueEditorData를 전달하면 writePost 매개변수로 에디터 데이터를 읽어 올 수 있다. CKEditor @blur 이벤트를 사용하여 validation을 적용하였다. 만약 입력되는 데이터의 크키가 너무 큰 상태에서 blur 이벤트(CKEditor에서 포커스를 잃는 경우)가 발생하면 validateEditor 함수가 수행된다. validateEditor 함수는 약 16MB 이상의 데이터가 입력되는 경우 경고창을 띄우며, CKEditor로 강제 포커스가 된다.&amp;lt;/src/views/Board.vue&amp;gt;&amp;lt;template&amp;gt; &amp;lt;div class=&quot;board&quot; &amp;gt; &amp;lt;h1&amp;gt;This is an board page &amp;lt; /h1&amp;gt; &amp;lt;ckeditor : editor = &quot;vueEditor&quot; v - model=&quot;vueEditorData&quot; : config = &quot;vueEditorConfig&quot; @blur=&quot;validateEditor”&amp;gt; &amp;lt;/ckeditor&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;button @click=&quot;writePost(vueEditorData)&quot;&amp;gt;작성&amp;lt;/button&amp;gt;&amp;lt;/template&amp;gt; &amp;lt; style lang = &quot;scss&quot; &amp;gt;@import &#39;/assets/css/ckeditor.css&#39;;&amp;lt;/style&amp;gt;&amp;lt; script &amp;gt;import { editor, editorData, editorConfig } from &#39;@/assets/plugins/ckeditor/ckeditor-init.js&#39;import CKEditor from &#39;@ckeditor/ckeditor5-vue&#39;import axios from &quot;axios&quot;;export default { components: { ckeditor: CKEditor.component }, setup() { const vueEditor = editor; const vueEditorData = editorData; const vueEditorConfig = editorConfig; // 비동기 통신을 위한 event 함수가 등록되어 있는 경우 const writePost = async (vueEditorData) =&amp;gt; { await axios.post(&quot;/api/board&quot;, { content: vueEditorData, }, ) .then((response) =&amp;gt; { }) .catch((error) =&amp;gt; { }) .then(() =&amp;gt; { }); } const validateEditor = (event, editor) =&amp;gt; { let size = getSize(editor.getData()); // 16777215Bytes(16MB) if (size &amp;gt; 16777215) { alert(“size error!”); editor.editing.view.focus(); } } return { vueEditor, vueEditorData, vueEditorConfig, writePost, validateEditor } }}; DB에 저장된 CKEditor 5에서 데이터를 프론트엔드로 전달하는 경우 HTML escape로 인하여 vue.js의 v-html(HTML 코드를 HTML 태그로 변환)을 사용하여도 HTML 태그로 변환되지 않는다. HTML 코드를 unescape 하는 함수를 사용해야 HTML 코드가 HTML 태그로 변환된다. 벡엔드에서 HtmlUtils.htmlUnescape 메소드를 사용하여 HTML unescape된 CKEditor 데이터를 전달하려고 하였다. 그러나 벡엔드에서 XSS 공격을 대비하기 위해서 HTML unescape 필터를 등록하여, 대신 프론트엔드에서 HTML unescape 함수를 사용하여 HTML 태그로 변환하였다 HTML escape: HTML 문자를 이스케이프(escape) 처리하면 스크립트나 HTML 태그의 기능은 제거되지만 입력한 내용은 그대로 브라우저에서 확인할 수 있다. 예를들어 태그의 시작을 의미하는 &amp;lt; 문자를 이스케이프 처리하면 &amp;lt;라는 문자로 바뀐다.출처: https://wikidocs.net/127508&amp;lt;/src/views/BoardRead.vue&amp;gt;&amp;lt;template&amp;gt; &amp;lt;div v-html=&quot;notice.content&quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/template&amp;gt;&amp;lt;script&amp;gt;const unescapeHtml = (str) =&amp;gt; str.replace( /&amp;amp;amp;|&amp;amp;lt;|&amp;amp;gt;|&amp;amp;#39;|&amp;amp;quot;/g, tag =&amp;gt; ({ &#39;&amp;amp;amp;&#39;: &#39;&amp;amp;&#39;, &#39;&amp;amp;lt;&#39;: &#39;&amp;lt;&#39;, &#39;&amp;amp;gt;&#39;: &#39;&amp;gt;&#39;, &#39;&amp;amp;#39;&#39;: &quot;&#39;&quot;, &#39;&amp;amp;quot;&#39;: &#39;&quot;&#39; }[tag] || tag) );// 생략...// onBeforeMount, init dataonBeforeMount(async () =&amp;gt; { await axios.get(process.env.VUE_APP_MODULE_APP_API_URL + &quot;/api/notices/read?idx=&quot; + idx, {}, ) .then(function (response) { notice.value = response.data; notice.value.content = unescapeHtml(notice.value.content); // 생략... }) .catch(function (error) { }) .then(function () { });})&amp;lt;/script&amp;gt;" }, { "title": "Github Page jekyll-theme-yat 테마 설정", "url": "/posts/Github-Page2/", "categories": "Github Page", "tags": "", "date": "2021-07-17 00:00:00 +0900", "snippet": " Github Page jekyll minimal-mistakes 테마에서 jekyll-theme-yat 테마로 변경한 과정을 소개한다. 본 블로그는 github page의 jekyll 템플릿을 사용하여 개발되었으며, 블로그 생성 및 설정은 https://devinlife.com/howto 페이지를 참고하였다. 템플릿 비교 템플릿의 디자인을 평가하는 것은 매우 주관적이기에 이를 평가하기는 어렵다. 필자는 jekyll-theme-yat theme이 기존 minimal-mistakes theme 보다 더 깔끔하고 게시글 가독성이 더 좋다고 생각하여 변경하게 되었다. 각 테마는 하단 이미지와 출처를 통해서 확인할 수 있다.minimal-mistakes 테마출처: https://mmistakes.github.io/minimal-mistakes/docs/quick-start-guide/jekyll-theme-yat 테마출처: https://jeffreytse.github.io/jekyll-theme-yat/disqus 오류 jekyll-theme-yat에 disqus를 적용하는 도중 config.yml 파일에 ‘disqus.shortname’에 유효한 설정 값이 존재하지만 다음과 같은 disqus 오류 메시지와 브라우저 log 오류 메시지 발생하였다. 여러 방법을 검색하는 찾아보는 도중 jekyll-theme-yat에서 제공하는 disqus.html 코드가 잘못되어 발생하는 문제를 발견하였고, 구글링을 통해서 새로운 disqus.html 코드로 변경한 결과 정상적으로 disqus가 작동하는 것을 확인하였다.출처: https://stackoverflow.com/questions/54632451/disqus-showing-same-comments-on-all-pages-with-unique-page-url-and-page-id-setGithub page 빌드 에러 Github page로 push 하는 경우 다음과 같이 빌드 에러가 발생하여 메일로 전송될 것이다. 빌드 에러는 ‘Please set the Token environment variable.’로서 Github에서 인증을 위해 사용하는 Personal access tokens이 jekyll 프로젝트에 등록되지 않아서 발생하였다. 해당 에러를 해결하기 위해서는 Github에서 ‘Personal access tokens’을 발급 받아 jekyll 프로젝트에 등록하면 된다. 하단 출처를 참고하여, ‘Personal access tokens’를 발급 받은 다음 build-jekyll.yml 파일의 line 26에 발급 받은 토큰을 입력하면 된다.&amp;lt;build-jekyll.yml&amp;gt; # Use GitHub Deploy Action to build and deploy to Github - uses: jeffreytse/jekyll-deploy-action@master with: provider: &#39;github&#39; token: &#39;토큰을 입력하시면 됩니다.&#39; # It&#39;s your Personal Access Token(PAT)출처: https://calvinjmkim.tistory.com/19" }, { "title": "Project SW Test Forum 2. Vue.js 환경 구축 및 프로젝트 구성 - 1", "url": "/posts/Project-SW-Test-Forum2/", "categories": "Web, Project SW Test Forum", "tags": "", "date": "2021-07-10 00:00:00 +0900", "snippet": " Vue.js 환경 구축 및 프로젝트 구성 과정을 소개한다. github: https://github.com/scribnote5/sw_test_forumVue.js란? Vue.js는 프론트엔드 프레임워크로서, 컴포넌트(Component) 기반의 SPA(Single Page Application)를 구축할 수 있게 하는 프레임워크다.컴포넌트(Component) 웹을 구성하는 로고, 메뉴바, 버튼, 모달 창 등 웹 페이지 내의 다양한 UI 요소 재사용 가능하도록 구조화 한 것SPA(Single Page Application) 단일 페이지 애플리케이션으로, 하나의 페이지 안에서 필요한 영역 부분만 로딩되는 형태 빠른 페이지 변환 적은 트래픽 양Vue.js 3를 선택한 이유는? Vue.js가 다른 SPA 프레임워크(React, Angular) 보다 학습 곡선이 낮고, 성능도 우수하다고 하며, React 다음으로 많은 관심을 받고 있는 프로젝트이기 때문이다. 최신 릴리즈된 Vue.js 3는 기존 버전의 한계점을 해결하고자 노력하였다. 특히 기존 버전의 코드 복잡성을 해결하기 위한 Composition API 도입은 새로운 버전을 선택한 가장 큰 계기다. 새로운 버전인 만큼 구글링을 통하여 얻는 자료에 한계가 있지만, 처음 배우는 만큼 새로운 버전을 선택하였다. 최신 Vue.js 3 개발 가이드라인을 준수하여 개발할 것을 목표로 한다.출처:https://joshua1988.github.io/web-development/vuejs/vue3-coming/#vuejs%EC%9D%98-%EA%B8%B0%EC%A1%B4-%ED%95%9C%EA%B3%84%EC%A0%90---%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%BD%94%EB%93%9C-%EC%9E%AC%EC%82%AC%EC%9A%A9https://www.s-core.co.kr/insight/view/vue-js-3-0-%EB%AC%B4%EC%97%87%EC%9D%B4-%EB%8B%AC%EB%9D%BC%EC%A1%8C%EB%8A%94%EA%B0%80/공부한 Vue.js youtube 인강 하단의 두 개의 인강을 통하여 Vue.js의 기본 지식을 공부하였다. Vue.js 책 한 권을 또는 공식 홈페이지 튜토리얼을 모두 공부한 다음 개발하는 방식이 아닌, 직접 개발하면서 모르는 부분은 구글링을 통해서 찾아본 다음 개발하는 방식으로 진행할 예정이다.출처: https://www.youtube.com/watch?v=sqH0u8wN4Rshttps://www.youtube.com/playlist?list=PLfLgtT94nNq3Br68sEe26jkOqCPK_8UQ-Vue.js 3 설치 및 설정 node.js 설치 후 npm을 설치한다. 다음 하단과 같이 진행한다.# 최신 버전으로 업데이트$ npm install -g npm# vue 설치$ npm i -g @vue/cli$ npm i -g @vue/cli-init# vue 버전 확인$ vue --version# module-app-web경로로 이동$ cd module-app-web# vue 프로젝트 생성$ vue create front# Manually select features 클릭# Choose Vue version, Babel, Router, Vuex, CSS Pre-procesor 선택# Linter / Formatter는 선택하지 않는 것을 권고(코드 포맷을 검사하는 설정으로 자잘한 버그가 많으며, 수정하기 곤란한 부분도 존재)# 다음과 같이 선택 후 클릭# ? Please pick a preset: Manually select features# ? Check the features needed for your project: Choose Vue version, Babel, Router, Vuex, CSS Pre-processors# ? Choose a version of Vue.js that you want to start the project with 3.x# ? Use history mode for router? (Requires proper server setup for index fallback in production) Yes# ? Pick a CSS pre-processor (Postcss, Autoprefixer and CSS Modules are supported by default): Sass/SCSS (with node-sass)# ? Where do you prefer placing config for Babel, ESLint, etc.? In package.json# ? Save this as a preset for future projects? No# 서버 실행 후, http://localhost:8080 에서 Vue.js 서버 페이지를 확인 가능$ cd front$ npm run serveVue.js에서 사용하는 핵심 모듈 Vue.js에서 사용하는 핵심 모듈은 다음과 같다. vuex: Vue.js의 store 관리를 위한 모듈 vee-validate: Form 검증을 위한 모듈 vue-router: 해당 부분만 화면을 갱신하는 사용하는 모듈 axios: HTTP 비동기 통신을 위한 모듈(API 서버와의 통신)Vue.js 프로젝트 구조 Vue.js 프로젝트를 어떤 방식으로 구성할지 고민을 많이 하였는데, 하단 출처의 ‘vue-enterprise-boilerplate’ 프로젝트를 참고하여 구성하였다. 해당 프로젝트 구조는 Vue의 기본 규칙을 가장 잘 따른 프로젝트 라고 하며, 현재 프로젝트 규모에 적용하기 알맞은 구조라고 생각한다. 여담으로 vuesion 프로젝트를 참고하여 프로젝트 구조를 구성하려고 하였지만 프로젝트 규모가 대규모가 아니므로 적합하지 않다고 판단하였다. Vue.js 프로젝트는 Spring Boot 프로젝트 module-app-web 모듈의 front 폴더에 위치하도록 하였다.출처: https://velog.io/@cindy-choi/VUE-%EC%9A%B0%EC%95%84%ED%95%9C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%A1%B0-%EC%A7%9C%EA%B8%B0" }, { "title": "Project SW Test Forum 1. Spring Boot 환경 구축 및 프로젝트 구성 - 1", "url": "/posts/Project-SW-Test-Forum1/", "categories": "Web, Project SW Test Forum", "tags": "", "date": "2021-07-10 00:00:00 +0900", "snippet": " Spring Boot 환경 구축 및 프로젝트 구성 과정을 소개한다. github: https://github.com/scribnote5/sw_test_forumSpring Boot 환경 구축 Spring Boot 환경 구축 방법은 과거 작성하였던 ‘Project Lab 1-1. 개발 환경 구축(IntelliJ)‘ github page 링크로 대체한다.출처: https://scribnote5.github.io/web/project%20lab/tool/Project-Lab1-1/mariaDB 설치 mariaDB 설치 방법은 과거 작성하였던 ‘Project Lab 2. Windows Subsytem for Linux(WSL)에 mariaDB 설치’ github page 링크로 대체한다.출처: https://scribnote5.github.io/web/project%20lab/Project-Lab2/Gradle Multi Module 프로젝트 구성 Gradle Multi Module 프로젝트 구성 방법은 과거 작성하였던 ‘Project Lab 3. Gradle Multi Module 프로젝트 구성’ github page 링크로 대체한다. Project Lab에서는 thymeleaf를 사용하였지만, Project SW Test Forum에서는 Vue.js를 사용하여 프론트엔드 환경을 구축하여 프로젝트 구성이 변경되었다. 웹 검색을 통해서 보여주는 프로젝트가 아니므로 module-app-admin 모듈은 module-app-web 모듈로 통합하였다. module-app-web 모듈 내에 front 폴더에 Vue.js 프로젝트가 위치하며, module-web-core에서 다른 모듈과 사용하는 Web Resources(html, css, javascript 등)을 Vue.js 프로젝트로 이동시켰다.출처: https://scribnote5.github.io/web/project%20lab/Project-Lab3/ 추후 module-app-web 프로젝트 내 Vue.js 프로젝트는 하단 출처를 따라 Spring Boot 프로젝트와 연동시킬 예정이다.출처: https://amanokaze.github.io/blog/Vuejs-Setting-with-SB/" }, { "title": "Project SW Test Forum 0. 소프트웨어 테스트 포럼 소개", "url": "/posts/Project-SW-Test-Forum0/", "categories": "Web, Project SW Test Forum", "tags": "", "date": "2021-06-21 00:00:00 +0900", "snippet": " 소프트웨어 테스트 포럼 페이지 개발 프로젝트를 소개한다. github: https://github.com/scribnote5/sw_test_forum계기 회사 업무 중 업무관리 시스템의 부재로 정리 및 공유의 불편함을 느꼈다. 현재 회사에서의 주요 업무는 신뢰성 시험이며, 이중 정적 시험(코드 규칙) 가이드 라인은 쌓여 있는 데이터를 잘 사용하면 업무 시간을 크게 단축시킬 수 있다. 현재 정적 시험 가이드라인은 과거 엑셀 파일로 작성한 가이드라인을 참고한다. 그러나 엑셀 파일에서 원하는 규칙을 검색할 때 너무 많은 시간이 소요되고 팀원 간 그리고 다른 부서 팀간 공유가 되지 않아 이를 개선하고 싶다. 정적 시험과 같은 사유로 신뢰성시험 개요, 동적시험, 기술 지원 등 업무 전반에 관련하여 전산 관리 시스템이 필요하다고 생각한다.만약 해당 프로젝트가 성공적으로 마무리되고 회사 내에서 사용하는 사람들이 많아진다면 다양한 업무 관리 시스템을 부가적으로 구현해볼 생각이다. 과거 회사 재직 중일 때, Project Lab에서 Spring을 사용하여 업무 시스템을 개발하였다. 과거 개발한 프로젝트 보다 조금 더 높은 코드 퀄리티와 최신 기술 스택을 적용하고 싶다는 생각이 들었다. 이러한 계기들로 Spring을 사용하여 체계적으로 개발하고 싶다는 생각을 가지게 되었으며, 이번 규칙 설명 홈페이지 개발에 도전하게 되었다.목표 Spring boot를 사용하여 개발하며, Project Lab을 기반으로 하여 진행한다. 가장 최적화되고 효율적인 방법을 찾아서 개발하며, 새로운 기술 스택을 사용한다.(JWT, Vue.js 3 적용) 체계적인 프로젝트 구조를 가진 상태에서 개발한다.(패키지 구조, 폴더 구조, 사용하는 의존 라이브러리 등) 기존 엑셀 파일의 데이터 마이그레이션을 수행한다. 단, 일부 불가능한 데이터의 경우 마이그레이션에서 제외한다. 새로 개발한 규칙 설명 페이지의 서버 운영 및 배포를 수행한다. 현재 명확환 요구사항이 정의되지 않았으며, 팀원과지속적으로 소통하면서 이를 반영할 계획이다. 프로젝트 개발 과정을 블로그에 게시한다.프로젝트 기간 예상 기간: 2021.06.16 ~ 2021.09.31 참고로 해당 프로젝트는 언제 완료될지 보장하지 못한다. 왜냐하면 개인 시간을 투자하여 개발하는 프로젝트이기에, 회사 업무가 바빠지면 시간 투자가 어렵기 때문이다.블로그에 게시되는 글은? 웹페이지를 개발하면서 해결한 문제와 코드를 순차적으로 공유하려고 하였다. 구현된 코드는 버그 및 결함이 발생할 수 있기에, 프로젝트 개발에 따라 코드가 지속적으로 변경 되었다. 따라서 지속적으로 변경되는 코드를 소개하기 어렵다고 느꼈기에, Project Rule 카테고리 게시글에서는 잘못된 설명이나 잠재적인 버그, 오류가 존재하는 코드가 제공될 수 있다. 프로젝트를 개발하면서 얻는 지식, 기능을 구현하고 어려움을 해결하는 과정을 간략하게 소개할 예정이다. 이 중 조금 더 깊숙히 다루고자 하는 주제는 별도의 게시글로 작성할 예정이다.개발 환경 OS: Windows 10 Java: Open JDK 14 DB: 10.3 MariaDB WAS: Spring Boot 내장 Tomcat IDE: IntelliJ 2021.1벡엔드 백엔드 프레임워크: Spring boot 2.5.1 ORM: Spring Data JPA Authentication: Spring Security, JWT 동적 쿼리: QueryDSL 4.4.0 의존성 관리: Gradle 6.8프론트엔드 SPA: Vue.js 3.1.1 Bootstrap 5.0.1 WYSIWYG: CKEditor 5" }, { "title": "Project Lab 23, 26. 개발 및 운영 서버 배포 및 후기 - 1", "url": "/posts/Project-Lab23,-26/", "categories": "Web, Project Lab", "tags": "", "date": "2021-06-16 00:00:00 +0900", "snippet": " 개발 서버 및 운영 서버에 배포하는 과정과 후기를 소개한다.Spring Boot Gradle jar 파일 생성 운영체 제에서 실행가능한 Spring Boot 애플리케이션(실행 가능한 자바 파일)을 빌드하려면 console에서 다음 명령어를 입력하면 된다. 빌드된 파일을 실행하면 웹 애플리케이션이 수행된다.$ ./gradlew bootjar서버 설치 및 설정 서버 운영체제는 Ubuntu 20.04 이며, 서버 구축에 필요한 패키지 설치 명령어는 다음과 같다.# 서버 업데이트 및 업그레이드$ sudo apt-get update -y$ sudo apt-get upgrade -y# openJDK 11 설치$ sudo apt-get install openjdk-11-jdk -y# mariaDB는 &#39;Project Lab 2. Windows Subsytem for Linux(WSL)에 mariaDB 설치&#39; 문서를 참고하여 설치하였으며, 계정 생성 후 DB를 생성함# 서버 jar 파일이 존재하는 경로에 업로드된 파일이 저장되는 upload 디렉터리를 생성한다.$ mkdir uploadSpring Boot jar 파일 실행 스크립트 이미 실행 중인 Spring Boot 애플리케이션을 종료하고 재시작하는 간단한 스크립트를 다음과 같이 작성하였다.&amp;lt;run_server.sh&amp;gt;kill -9 `pgrep -f java`java -jar module-app-admin-0.0.1-SNAPSHOT.jar --spring.profiles.active=prod &amp;gt; module-app-admin.log &amp;amp;java -jar module-app-web-0.0.1-SNAPSHOT.jar --spring.profiles.active=prod &amp;gt; module-app-web.log &amp;amp;java -jar module-app-api-0.0.1-SNAPSHOT.jar --spring.profiles.active=prod &amp;gt; module-app-api.log &amp;amp; 각 모듈 애플리케이션은 module-~.log 파일에 저장된다.Nginx 설치 및 설정# nginx 설치$ sudo apt-get install nginx -y# 해당 경로에는 nginx 관련 설정 파일이 존재함$ cd /etc/nginx# nginx 관련 메인 파일은 nginx.conf로 다음과 같이 설정함/etc/nginx/nginx.confuser www-data;worker_processes auto;pid /run/nginx.pid;include /etc/nginx/modules-enabled/*.conf;events { worker_connections 768; # multi_accept on;}http{#Flature&#39;s gzip Contents Compression Setting, 서버에서 전달하는 정적 리소스를 압축함# 서버에서 전달하는 정적 리소스를 압축하여 클라이언트로 전송하는 경우, 브라우저의 응답 속도를 향상 시킬 수 있다.gzip on;gzip_disable &quot;msie6&quot;;gzip_comp_level 6;gzip_min_length 500;gzip_buffers 16 8k;gzip_proxied any;gzip_types text/plain text/css text/js text/xml text/javascript application/javascript application/x-javascript application/json application/xml application/rss+xml image/svg+xml image/png image/jpeg;#Flature&#39;s gzip Contents Compression Setting End# upload file size, 파일 업로드 최대 크기 설정# Spring Boot 애플리케이션 뿐만 아니라 nginx에서도 업로드 가능한 파일 크기를 설정해야 정상적으로 파일 업로드가 가능하다.client_max_body_size 50M; server { server_name eslab.cnu.ac.kr www.eslab.cnu.ac.kr; location / { proxy_pass &amp;lt;Spring Boot 애플리케이션의 주소 정보&amp;gt;; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } ...}# nginx 재시작 명령어$ nginx -s reload$ systemctl stop nginx$ systemctl start nginx# tail 명령어를 사용한 실시간 nginx 에러 로그 확인 방법$ tail -2f /var/log/nginx/error.logSSL 적용 웹 페이지의 보안을 강화시키기 위해서 https 즉 SSL을 적용해야 한다. 유료 SSL을 적용하기에는 비용이 부담되기에 무료 SSL 인증서를 제공하는 ‘Let’s Encrypt SSL’을 사용하여 인증서 발급 받았으며 자동 갱신하도록 설정하였다. ‘Let’s Encrypt SSL’을 적용하는 다양한 방법이 있으며, Certbot을 통하여 인증서를 발급 받을 수 있다. Certbot은 Let’s Encrypt 인증서를 자동으로 발급 및 갱신을 해주는 프로그램으로서, SSL 인증을 간단하게 진행할 수 있다. https://certbot.eff.org/ 페이지에 접속하면 웹 서버 종류에 따라, 운영체제 종류에 따라 SSL 인증서를 발급 절차를 소개한다. 많은 블로그에서 Certbot을 사용한 무료 SSL 인증서 발급 및 자동 갱신 과정을 소개한다. 그러나 공식 홈페이지에서는 환경에 따라 설치 과정을 자세하게 설명하므로, 공식 홈페이지를 참고하는 것을 추천한다. 홈페이지에 명시된 절차에 따라서 다음과 같이 Certbot을 통하여 SSL 인증서를 발급 받았고, SSL 인증서가 만료된 경우 인증서를 자동으로 갱신하도록 하였다. Certbot으로 SSL 인증서를 등록을 마치면, nginx.conf 파일에 다음과 같이 SSL 관련 설정이 ‘# managed by Certbot’ 주석으로 표기되어 자동으로 추가된 것을 확인 할 수 있다.&amp;lt;/etc/nginx/nginx.conf&amp;gt;user www-data;worker_processes auto;pid /run/nginx.pid;include /etc/nginx/modules-enabled/*.conf;events { worker_connections 768; # multi_accept on;}http{#Flature&#39;s gzip Contents Compression Setting, 서버에서 전달하는 정적 리소스를 압축함gzip on;gzip_disable &quot;msie6&quot;;gzip_comp_level 6;gzip_min_length 500;gzip_buffers 16 8k;gzip_proxied any;gzip_types text/plain text/css text/js text/xml text/javascript application/javascript application/x-javascript application/json application/xml application/rss+xml image/svg+xml image/png image/jpeg;#Flature&#39;s gzip Contents Compression Setting End# upload file size, 파일 업로드 최대 크기 설정client_max_body_size 50M; server { server_name eslab.cnu.ac.kr www.eslab.cnu.ac.kr; location / { proxy_pass &amp;lt;Spring Boot 애플리케이션의 주소 정보&amp;gt;; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } listen [::]:443 ssl ipv6only=on; # managed by Certbot listen 443 ssl; # managed by Certbot ssl_certificate /etc/letsencrypt/live/eslab.cnu.ac.kr/fullchain.pem; # managed by Certbot ssl_certificate_key /etc/letsencrypt/live/eslab.cnu.ac.kr/privkey.pem; # managed by Certbot include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot } server { if ($host = eslab.cnu.ac.kr) { return 301 https://$host$request_uri; } # managed by Certbot listen 80 default_server; listen [::]:80 default_server; server_name eslab.cnu.ac.kr www.eslab.cnu.ac.kr; return 404; # managed by Certbot } server { server_name eslab.cnu.ac.kr www.eslab.cnu.ac.kr; location / { #proxy_hide_header Access-Control-Allow-Origin; #add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;; #add_header &#39;Access-Control-Allow-Origin&#39; * always; proxy_pass &amp;lt;Spring Boot 애플리케이션의 주소 정보&amp;gt;; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } listen [::]:8083 ssl ipv6only=on; # managed by Certbot listen 8083 ssl; # managed by Certbot ssl_certificate /etc/letsencrypt/live/eslab.cnu.ac.kr/fullchain.pem; # managed by Certbot ssl_certificate_key /etc/letsencrypt/live/eslab.cnu.ac.kr/privkey.pem; # managed by Certbot include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot }}출처: https://sbgg.tistory.com/28서버 구성도SSL 미적용 사용자 페이지 서버는 port 8080(http), api 서버는 port 8081(http), 관리자 페이지 서버는 port 8082(http)로 접근한다.SSL 적용 SSL 적용 이후 서버는 다음과 같이 포트가 변경된다. 사용자 페이지 서버는 port 80(https), port 8080(http)로 접근한다. api 서버는 port 8081(http), port 8083(https)로 접근한다. 관리자 페이지 서버는 port 8082로 접근한다. 그러나 admin 페이지 서버는 학교에서 기본적으로 제공하는 포트 번호가 부가하므로 SSL을 적용하지 못하였다.Project Lab. 개발하면서… 약 1년에 걸친 개발이 드디어 끝났다. 개인 프로젝트를 진행하면서 어려운 점도 많았고 힘들었지만 실제로 서버에 배포하여 웹페이지에 접속하니 그 감회가 새롭고 뿌듯하다. 고생을 모두 보상 받는 것 같은 느낌이다. 초기 목표는 모바일 페이지를 지원하지 않으며, 디자인 및 기능도 기존 웹페이지에 비하여 조금 나은 수준으로 개발하려고 하였다. 처음 예상한 프로젝트 배포 일시는 2020년 연말이었다. 그러나 연구실 졸업을 앞둔 박시형 박사님의 지속적인 도움 및 피드백?으로 일정이 변경되었다. 많은 요구사항 요청이 있었는데, 개발자 관점으로 개발이 불가능하고 난해한 요구사항을 제외한 대부분의 요구사항을 처리하려고 노력하였다. 물론 요구사항을 요청한 당사자에게는 요구사항을 많이 반영하지 않았다고 생각할 것이다. 해당 부분은 개발자와 이를 요구사항을 요청하는 사용자 간의 관점 차이라고 생각한다. 모바일 페이지 지원, 대대적인 디자인 변경, 추가적인 기능 개발 등을 마치고 최종적으로 교수님의 컨펌을 받았다. 다행히도 교수님께서는 새로 개발한 웹페이지를 만족하셨으며, 적은 요구사항을 요청하셨다. 교수님의 요구사항 반영 이후 개발 서버 테스트 단계를 걸쳐 2021.03.23에 운영 서버 배포를 완료하였다. 물론 서버 설정 과정도 쉽지는 않았다. 학교에서 사용 가능한 포트 번호는 매우 적었으며, 다른 포트를 열기 위해서는 교수님 서명과 더불어 지속적으로 갱신해야 했다. 또한 Nginx 웹서버 설정, SSL 적용, CORS 설정에 많이 고생하였다. 특히 CORS가 매우 골치 아팠다… 운영 서버 배포 이후 작은 수정이 있었으며, 2021.04.27 약 3주 동안은 이슈없이 연구실 인원들이 잘 사용하고 있다. 아마 앞으로 무조건 이슈가 발생할 것이다. 무슨 이슈가 발생할지 궁금하고 기대된다. 2021.06.16 모바일 반응형 버그와 로그인 실패한 LoginHistory 정보에 접근할 때 오류가 발생하는 이슈를 해결한 상태다. 프로젝트를 완료하고 나니 아쉬운점도 크다. 새로운 기술 스택을 사용하여 개발하려고 하였지만, 새로운 기술 스택을 늦게 발견하여 적용하지 못한 것도 있다. jwt 기반 로그인 구현, SPA 등이 있다. 또한 체계적이고 유지보수가 쉬우며 가독성이 뛰어난 코드를 개발하려고 노력 하였지만, 아직도 부족한 점이 많다고 느꼈다. 해당 프로젝트 종료 후 더 발전된 모습으로 다음 프로젝트인 Project. Rule을 개발하려고 한다. 이번 프로젝트에서 부족하다고 느낀점을 모두 보완하여 더 완성도를 높이도록 하겠다. 다음은 웹페이지 사용자와 개발자 간의 요구사항을 정리하고 소통에 사용한 스프레드시트와 zira다. 초기 스프레드시트를 사용하여 소통하였지만, 이슈 관리에 한계를 느껴 zira로 변경하였다. 스프레드시트와 zira에 작성되지 않은 요구사항은 매우 많으며, 이러한 요구사항들은 모두 카톡으로 소통하였다. 다들 프로세스를 준수하지 않게 되었다. 스프레드시트, jira: https://docs.google.com/spreadsheets/d/1FR1x1HDYq67m7YIMOM-yGH06QBDohw0gaWAJTnIYj-g/edit?usp=sharing 생각보다 프로젝트 규모가 커짐으로서, 직접적인 프로젝트 개발에 두 명의 친구들이 관심을 가지고 참여하기로 하였다. 나 또한 프로젝트 개발 속도를 진척시키고자 친구들의 참여를 환영하고 도와줬지만, 각자 사정으로 인하여 결국 참여하지 못했다. ‘Project Lab 20. 관리자 페이지 개발 - 3’ 페이지를 친구에게 맡길려고 한 나의 계획은 물거품이 되어, 내가 추후에 다 개발하게 되었다. 계획하는 것과 이를 실천하는 것은 전혀 다르다는 교훈을 배웠다. 개발한 코드와 문제 해결 방법을 블로그에 잘 정리하여 많은 사람들에게 도움도 주고 피드백도 받고 싶었으나, 잘 되지는 않았다. 글을 작성하는 것은 굉장히 어려우며, 잘 짜여진 글을 작성하는 일은 많은 시간과 노력 그리고 전문적인 지식이 필요하기 때문이다. 마지막으로 글을 작성하면서 아쉬운 점도 많지만 성취감도 크며, 고생한 날을 생각하니 묘한 기분이 든다. github: https://github.com/scribnote5/lab 배포 중인 서버 페이지: https://eslab.cnu.ac.kr/ 배포 중인 서버 관리자 페이지: http://eslab.cnu.ac.kr:8082/user/login" }, { "title": "&#39;File&#39;에서 &#39;Link&#39;로의 변화", "url": "/posts/Essay1/", "categories": "Essay", "tags": "", "date": "2021-04-19 00:00:00 +0900", "snippet": " ‘디지털 트렌스포메이션 시대의 스마트 워킹과 기업문화’ 특강을 듣고… 이번 문화의 날에서 김태원 전무님이 해주신 김태원 구글 글로벌 비즈니스 전무의 ‘디지털 트렌스포메이션 시대의 스마트 워킹과 기업문화’ 특강은 새로운 시대에 따른 글로벌 기업들의 변화를 인상깊게 봤다. 기술 발전이 가속됨에 따라, 기존과 다른 새로운 기술이 기업에서 사용되고 있고 실무자들의 업무 효율을 향상시키기 위해서 그리고 매출을 늘리기 위해서 다양한 방법을 시도하고 있다. 이중 가장 인상 깊게 들은 ‘File vs Link’ 라는 주제로 에세이를 작성하려고 한다. Microsoft Office는 문서 작성 도구로 컴퓨터를 접하는 세계 모든 사람들이 사용한다. 하지만 정보의 공유가 어려운 ‘파일’이라는 한계로 정보의 공유가 중요한 현재 시대에는 적합하지 않다. 이러한 한계를 벗어나 문서 작성을 ‘파일’ 단위에서 ‘링크’ 단위로 변경한 기업 중 하나로 구글이 있다. 구글 ‘문서’, ‘스프레드시트’, ‘프레젠테이션’은 정보 공유를 ‘파일’이 아닌 ‘링크’로 변화하였고 이는 문서 작성의 새로운 변화를 주도하였다고 생각한다. ‘링크’가 주는 공유와 접근의 편의성은 ‘파일’을 사용과 비교할 수 없을 정도로 큰 매력으로 다가왔다. 우선 USB에 매번 ‘파일’을 저장해야 하는 불편함이 사라졌다. 데스크탑과 모바일 즉 웹과 앱의 제한없이 접근하여 수정하는 편리함은 구글 문서 도구를 사용하는 가장 큰 계기가 되었다. ‘파일’과 다르게 동시에 많은 사용자의 편집을 지원하는 기능은 동시에 여러 명의 사용자가 접근이 불가능한 ‘파일’에서는 쉽게 활용할 수 없는 기능이다. ‘링크’의 편리함은 많은 소프트웨어 기업에서는 기존 애플리케이션(파일)을 클라우드(링크) 기반으로 서비스 방향을 변경하게 만들었다. 코로나로 인한 비대면 회의, 수업, 업무가 확산됨에 따라 링크를 사용하는 클라우드 서비스가 빠르게 커지고 있다. Micrsoft Office 또한 이러한 흐름에 따라 전통적인 애플리케이션에서 웹 기반의 문서 도구 서비스를 출시하였다. 과거 애플리케이션에 익숙했던 나에게 큰 충격으로 다가왔고, 새로운 변화의 흐름이 낯설고 신기하게 느껴졌다. 기업이 시장에서 살아남으려면 최신 트렌드를 따라가야 하며 과거의 영광을 되새김질 하고 안주하면 언제든지 시장에서 도태될 수 있음을 깨달았다. 이에 따라 회사에서도 ‘파일’이 아닌 ‘링크’로의 변환이 필요하다. 물론 프로젝트의 특성상 프로젝트 산출물을 ‘파일’ 단위로 관리하고 있다, 따라서 아직 우리 회사는 프로젝트 산출물이 원만하게 공유되고 있지 않다. 파일의 한계를 벗어나기 위해서 ‘이러한 산출물들을 NAS에 업로드하여 공유하면 어떨까?’ 라는 생각이 들었다. 프로젝트의 산출물을 업로드하기 번거롭고 쉽지 않겠지만, 잘 정리된 산출물은 추후 회사의 큰 자산이 될 것이라고 생각한다. 그리고 각 팀에서 사용하고 있는 ‘링크’의 벽을 허물면 다른 팀과의 소통 및 정보 공유에 큰 도움이 될 것 같다. 서로의 정보를 잘 공유하고 이를 활용한다면 업무 효율을 크게 향상시킬 것이다. 지금부터 천천히 정보 공유를 ‘파일’이 아닌 ‘링크’로의 변환을 준비하면 좋지 않을까? " }, { "title": "IntelliJ 단축키 설정", "url": "/posts/IntelliJ2/", "categories": "Tool", "tags": "", "date": "2021-04-12 00:00:00 +0900", "snippet": " IntelliJ 단축키 설정을 소개한다. 단축키 설정은 개발자마다 다르며 필자가 주로 사용하는 단축키 설정 및 단축키는 다음과 같다. Settings -&amp;gt; Keymap -&amp;gt; Eclipse 단축키 형태로 변경한다.단축키 변경 Main menu -&amp;gt; Window -&amp;gt; Editor Tabs -&amp;gt; Close: Ctrl + W Main menu -&amp;gt; Window -&amp;gt; Editor Tabs -&amp;gt; Close Others: Ctrl + Shift + W Main menu -&amp;gt; Window -&amp;gt; Editor Tabs -&amp;gt; Split Vertically: Alt + V Main menu -&amp;gt; Window -&amp;gt; Editor Tabs -&amp;gt; Split Horizontally: Alt + H Main menu -&amp;gt; Window -&amp;gt; Editor Tabs -&amp;gt; Select Next Tab: Ctrl + Tab Main menu -&amp;gt; Window -&amp;gt; Editor Tabs -&amp;gt; Select Previous Tab: Ctrl + Shfit + Tab Main menu -&amp;gt; Navigate -&amp;gt; Next Edit Location: Ctrl + Shift + Q Main menu -&amp;gt; Navigate -&amp;gt; Last Edit Location: Ctrl + Q Main menu -&amp;gt; Refractor -&amp;gt; Rename…: Alt + Shift + R, F2 Main menu -&amp;gt; Refractor -&amp;gt; Rename File…: Alt + Shift + R, F2 Other -&amp;gt; Clear All: Alt + C Main menu -&amp;gt; Window -&amp;gt; Active Tool Window -&amp;gt; Close Active Tab: 제거출처: https://ajh322.tistory.com/222자주 사용하는 단축키 Extend Selection: Alt + Shift + 위 방향키 Shrink Selection: Alt + Shift + 아래 방향키 Collapse All: Ctrl + Numpad - Extend All: Ctrl + Numpad + Request Mapper: Ctrl + Shift+ + \\Editor Tabs 탭 닫기: Ctrl + W 현재 탭 이외의 모든 탭 닫기: Ctrl + Shift + W 수직으로 탭 나누기: Alt + V 수평으로 탭 나누기: Alt + HTool Window 툴 윈도우 숨기기: Shift + Esc 툴 윈도우 프로젝트: Alt + 1 툴 윈도우 실행 중인 프로젝트의 콘솔 로그: Alt + 4 툴 Problem: Alt + 6 툴 코드 구조 확인하기: Alt + 7 툴 서비스: Alt + 8 Terminal: Alt + F12Navigate 다음 소스 코드 편집 위치로 이동: Ctrl + Q 이전 소스 코드 편집 위치로 이동: Ctrl + Shift + Q 최근 실행한 파일 확인: Ctrl + E 탭 다음 이동: Ctrl + Tab 탭 이전 이동: Ctrl + Shift + TabRefractor 파일 이름 변경: Alt + Shit + R, F2Edit 소스 코드 자동 완성: Ctrl + Space 오류 자동 제안 확인: Alt + Enter 에디터로 포커스: Esc 복사 이력 확인: Ctrl + Shift + Insert 소스 코드 자동생성(JUnit 테스트, 생성자, getter/setter, 메소드 오버라이드, Autowired 등): Alt + Insert 현재 줄 삭제: Ctrl + DRun 프로젝트 실행: Alt + Shift + X 프로젝트 디버그: Alt + Shift + D 프로젝트 중단: Ctrl + F2 프로젝트 실행 검색 창: Ctrl + CtrlFind 탭 내 전체 검색: Ctrl + F 프로젝트 내 전체 검색: Ctrl + H 전체 모든 것을 검색(기능, 파일: Shift + Shift 단축키 검색: Shift + Ctrl + A 최근 사용한 파일 검색: Ctrl + EOther 콘솔 Clear: Ctrl + Alt + C" }, { "title": "Project Lab 24. UI 변경(Front-end) 및 코드 리펙토링 - 3", "url": "/posts/Project-Lab24/", "categories": "Web, Project Lab", "tags": "", "date": "2021-04-01 00:00:00 +0900", "snippet": " UI 변경 및 코드 리펙토링 과정을 소개한다. github: https://github.com/scribnote5/lab github commit - 9(최종): https://github.com/scribnote5/lab/commit/87cbdbd0f34afaebcd05170e95087fbb7551a83b버그 수정: Front-end input 태그 validation 변경 Front-end 모든 input 태그에 validation 적용 User Form 에서 validation 검증 validation 함수에 input 태그 name을 전달하는 매개변수를 제거하고 대신 카멜 케이스 표기법을 일반 출력 표기법으로 변환하는 함수를 사용ex) ActiveStatus -&amp;gt; active status버그 수정: 로그인 된 상태에서 잘못된 redirect 변경 localhost:8082/user/login, localhost:8082/ 접속시 localhost:8082/main/home 페이지로 redirect 되도록 수정버그 수정: 접근 제어 권한 수정 다른 id의 manager 권한 사용자를 접근하는 버그 수정버그 수정: 사용자 publication 무한 스크롤 수정 스크롤 할 때 데이터 잘못 가져오는 경우 수정버그 수정: 관리자 User 페이지 접근 제어 권한 수정 root가 등록한 user를 manager가 접근할 수 없는 버그 수정에러 수정 : Alumni Association 검색 오류 수정 검색 에러 수정기능 개발 - 프론트엔드: 사용자 Member 게시판 링크 member 사진을 클릭할 때 상세 페이지로 이동기능 개발 - 프론트엔드: 로딩 속도 빠르게 하기(lazy load, thymeleaf cache enable) img를 lazy load 방식으로 불러 서버 배포시 thymeleaf cahce enable 적용출처: https://helloinyong.tistory.com/297#title-3기능 개발 - 프론트엔드: 게시판 파일 업로드 크기 파일 업로드 크기 20MB -&amp;gt; 50MB기능 개발 - 프론트엔드: 사용자 Member Skype 링크 Skype 링크를 skype 애플리케이션으로 호출하도록 변경출처: https://docs.microsoft.com/en-us/skype-sdk/skypeuris/skypeuris기능 개발 - 프론트엔드: 사용자 Publication 출력 방식 Domestic conference 표기시 오류 발생 하이픈(-)이 언더바(_)로 표시되는 것 변경 모든 SCI 표기는 SCIE로 변경 SCI IF 표시할때 현재는 International Journal - SCIIF: 0.814 와 같이 표기되는데 SCIE (IF: 0.814)와 같이 변경 Domestic Conference 텍스트 색상 흰색으로 변경 ISSN 표시 방식이 현재는 1225-6463과 같은데, ISSN: 1225-6463로 변경 사용자 페이지 scroll시 잘못된 URL 변경 DOI랑 URL 이 모두 있는 경우 DOI 주소를 우선으로 사용기능 개발 - 프론트엔드: List 페이지 글자 간격 조정 및 글자 수 자르기 제한된 글자 수가 넘어가면 그 이후로는 …으로 출력하도록 변경출처: https://uxgjs.tistory.com/41 No.: 5%(고정) Title: 45%(가변) ID: 10%(고정) Created Date: 12.5%(고정) Last Modified Date: 12.5%(고정) Status: 7.5%(고정) Views: 7.5%(고정)기능 개발 - 프론트엔드: 파일 업로드 소스 코드를 파일로 분리 javascript 파일 분리시 예기치 않은 오류가 발생하는지 확인기능 개발 - 프론트엔드: 중복 submit 방지출처: https://cofs.tistory.com/270기능 개발 - 프론트엔드: 구글 map 적용 구글 Embedded map을 사용하여 연구실 주소를 표시(javascript api는 유료로 사용하지 못함)기능 개발 - 프론트엔드: 로딩바 생성 관리자 및 사용자 대부분의 페이지(home 제외)에 새로 구현한 로딩바 생성 모든 페이지 요소들이 로드가 완료되면 수행되는 자바스크립트 $(window).load(function 함수에서 로딩바를 hide 하도록 변경함. 수행 시간이 오래 걸리는 관리자 페이지 유지보수에서 메일 전송 할 때 로딩바가 show 됨.출처: https://docu94.tistory.com/37 다른 대안: https://hunit.tistory.com/309기능 개발 - 프론트엔드: 에러 페이지 변경 새로운 에러 페이지 적용기능 개발 - 프론트엔드: thymeleaf에서 개행 문자를 br tag로 변경&amp;lt;span th:utext=&quot;${#strings.replace(text, T(System).getProperty(&#39;line.separator&#39;), &#39;&amp;amp;lt;br /&amp;amp;gt;&#39;)}&quot;&amp;gt;&amp;lt;/span&amp;gt;출처: https://www.popit.kr/thymeleaf-replace-newline-br-tag/기능 개발 - 프론트엔드: ‘Admin Page’ 이동 메뉴 추가 사용자 User 페이지 관리자 권한인 경우만 메뉴에 ‘Admin Page’ 이동 메뉴 출력하기디자인 구현 - 사용자 Home 페이지 이미지 슬라이더 margin 조정 이미지 슬라이더 margin-top에 음수 값을 사용하여 이미지가 위로 이동되도록 변경기능 개발 - 벡엔드: 사용자 NotcieBoard 게시판 등록, 수정, 삭제 기능 root, manager 계정만 접근 가능기능 개발 - 벡엔드: 공지글 기능 Notice Board, Alumni Association 게시판 적용기능 개발 - 백엔드: 사용자 Member 출력 방식 Faculty -&amp;gt; 재학중 박사 -&amp;gt; 재학중 석사 -&amp;gt; 졸업생기능 개발 - 벡엔드: Project Previous Current 분류 추가 현재 사용하지 않는 Research Field에 대한 프로젝트를 구분하도록 Current Research Field, Previous Research Field를 체크할 수 있는 기능 추가 사용자 Home에서는 Current Research Filed로 되어 있는 프로젝트만 출력됨기능 개발 - 벡엔드: ckeditor 적용 WYSIWYG로 summernote 대신 CKEditor로 적용업로드 방식 변경 이미지 업로드를 DB에 바이너리 코드를 저장하는 base64 방식에서 이미지 파일을 서버에 업로드하는 방식인 Image upload plugin 방식으로 변경출처: https://jjong-factory.tistory.com/55https://simsimjae.tistory.com/340https://ckeditor.com/docs/ckeditor5/latest/features/image.htmlckeditor online build 제외 플러그인 MathType: 빌드할 때 에러 발생 Media embed toolbar: javascript에서 플러그인을 인식하지 못함 image caption: 캡션 크기가 이상하게 변경됨출처: https://ckeditor.com/ckeditor-5/online-builder/ckeditor content style ckeditor에서 사용하는 css class가 선언되어 있음출처: https://ckeditor.com/docs/ckeditor5/latest/builds/guides/integration/content-styles.html기능 개발 - 백엔드: Event 페이지 개발 Event 페이지를 개발함출처: https://bootsnipp.com/snippets/VgzeR기능 개발 - 백엔드:Cross Side Script 보안 취약점 보완 API 서버 Cross Side Script 공격을 방어할 수 있는 필터 적용출처: https://handcoding.tistory.com/200디자인 구현: search 변경 input type을 search로 변경하고, 이외 search 디자인을 전체적으로 변경함출처: https://stackoverflow.com/questions/20804016/editing-input-type-search-pseudo-element-button-x디자인 구현: 공통 변경 사항 breadcumbs: &amp;gt; 이미지 대신 /로 변경 breadcumbs: 색상 변경 class btn-main과 btn-main-sm 분리 게시판 페이지의 각 줄의 padding을 10px로 수정 게시판 table th 텍스트들 중앙 정렬로 변경 각 페이지별 글 개수를 15개로 수정 이미지 파일 호출 URI를 /api/attachedFile/view-image로 변경기능 개발 - 프론트엔드: venobox 편의성 향상 title 크기 증가 img가 한 페이지에서 확인할 수 있도록 변경기능 개발 - 프론트엔드: Album 페이지 hashTag 드래그 앤 드랍 해시 태그 드래그 앤 드랍으로 위치가 변경되는 기능 개발출처: https://www.w3schools.com/Jsref/event_ondrop.asp디자인 구현: 사용자 페이지 반응형 및 모바일 지원 반응형 및 모바일 지원 로그인 페이지서버 작업: API 서버 CORS 설정 특정 ip, port에서만 api 서버에 접근 가능하도록 설정서버 작업: google analytics 적용 eslab 페이지에 google analytics를 적용기타 작업: log 설정 logging level 설정 exception handling과 같은 부분에 log가 출력 되도록 변경기타 작업: 사용하지 않는 img 파일 삭제 사용하지 않는 img 파일 삭제하기기타 작업: local to cdn css 및 javascript 라이브러리를 cdn에서 가져오는 것으로 변경출처: https://hi098123.tistory.com/16기타 작업: local to fontawesome 아이콘 라이브러리를 fontawesome cdn에서 사용하는 것으로 변경" }, { "title": "Project Lab 20. 관리자 페이지 개발 - 3", "url": "/posts/Project-Lab20/", "categories": "Web, Project Lab", "tags": "", "date": "2021-03-05 00:00:00 +0900", "snippet": " 관리자 페이지 개발 내용을 소개한다. github: https://github.com/scribnote5/lab github commit - 1: https://github.com/scribnote5/lab/commit/1f33b97c9bfc4c2948838e2dd8f593698551b73aMaintenance 게시판 관리자가 웹 페이지를 사용하는 도중 에러가 발생하거나 요구사항이 생기는 경우, 사용하는 유지보수 게시판이다. 일반적인 게시판으로, 첨부 파일 업로드, ck-editor가 게시글 내용과 댓글에 적용되었다. 부가적으로 게시글 및 댓글 등록시 라디오 버튼을 체크하면 관리자 email 페이지에 등록한 관리자 또는 개발자게에 메일을 송신할 수 있다.guest book 게시판 일반 사용자가 로그인할 때 접근할 수 있는 페이지로 서로의 안부를 묻고 답할 때, 사용하는 방명록이다. 일반적인 게시판으로, 첨부 파일 업로드, ck-editor가 게시글 내용과 댓글에 적용되었다.로고 이미지 변경 인터페이스 구현 관리자 및 사용자 페이지에서 사용하는 로고 이미지를 변경할 수 있는 인터페이스를 관리자 setting 페이지에서 구현하였다." }, { "title": "Project Lab 22. 사용자 페이지 개발 - 2", "url": "/posts/Project-Lab22/", "categories": "Web, Project Lab", "tags": "", "date": "2021-01-17 00:00:00 +0900", "snippet": " UI 변경 및 코드 리펙토링 내용을 소개한다. github: https://github.com/scribnote5/lab github commit - 1: https://github.com/scribnote5/lab/commit/2309c6c4f826de2031c35fc26c5a0143e3e82dd5 github commit - 2: https://github.com/scribnote5/lab/commit/f06fd2c7d08ff671b5330c52ea2bbeb7cbf835c7ip주소, port 번호 설정 application.yml에 각 spring profile에 해당되는 ip 주소, port 번호를 지정하였고 thymeleaf javascript에서 해당 값을 읽어 오도록 변경하였다. 이를 통해서 서버의 ip 주소를 application.yml을 통해서 손쉽게 변경할 수 있다.출처: https://attacomsian.com/blog/thymeleaf-get-current-environmenthttps://eblo.tistory.com/56alert, confirm 창을 변경하고 toast 메시지 추가 SweetAlert을 사용하여 기존 javascript alert 메시지를 변경하였다. sweealert 메시지 위치 변경 방법은 하단 출처를 참고한다.출처: https://sweetalert2.github.io/recipe-gallery/toast-with-custom-target.htmlFabicon 적용 하단 출처를 참고하여 Fabicon을 적용하였다.출처: https://moolgogiheart.tistory.com/84Bootstrap 코드 수정 bootstrap nav-tabs .nav-link 코드를 수정하여 About Us 하단 nav-tabs 색상을 기존 파란색에서 빨간색으로 변경하였다.Learn More Read, Learn More Video 페이지 변경 About Us 사용자 페이지에서 보여주는 Learn More 데이터(pdf 파일, video 파일)는 tab을 사용하여 출력되도록 변경하였다. pdf.js 라이브러리를 사용하여 pdf 파일이 출력된다.출처: https://code.tutsplus.com/tutorials/how-to-create-a-pdf-viewer-in-javascript--cms-32505https://mozilla.github.io/pdf.js/examples/Spring boot에서 iframe을 사용하기 위한 Spring Security 변경 방법 Learn More Read(pdf 출력) 즉, pdf.js 예제를 수행하기 위해서는 iframe을 사용해야 하며, Spring Security 설정을 변경하여 iframe이 출력되도록 해야 한다. iframe을 사용하는 것은 보안상 매우 위험하기에, 추후 수정할 예정이다.출처: https://gigas-blog.tistory.com/124Setting 테이블 생성 연구실 주소, 연구실 연락처, About Us에서 출력되는 데이터를 저장 및 수정하는 페이지를 생성하였다.Connection Pool Spring boot2에서는 default JDBC connection pool로 지정된 DBCP(Database Connection Pool)를 사용한다. 현재 mariaDB를 사용하므로, Hikari Pool에서 권장하는 mysql 최적화 옵션을 적용하였다.출처: https://goddaehee.tistory.com/205?category=367461https://blog.miyam.net/100https://github.com/brettwooldridge/HikariCP/wiki/MySQL-Configuration코드 리펙토링 login 페이지 변경 불필요한 출력(System.out.println, console.log) 삭제 Back-end validation: 모든 멤버 필드에 대해서 validation 수행 사용하지 않는 변수 및 메소드 삭제 기타 알고리즘 로직 재설계 및 변경 페이지 설계에 따른 DB Table 재설계요구사항과 이에 따른 개발한 것을 정리한 스프레드시트-이외에도 연구실 인원들로부터 현재 웹페이지에 대한 요구사항을 받았으며 지속적으로 소통하였다. 필요한 기능은 검토 후 개발하였으며, 기타 버그 및 오류는 수정하였다.Link: https://docs.google.com/spreadsheets/d/1FR1x1HDYq67m7YIMOM-yGH06QBDohw0gaWAJTnIYj-g/edit?usp=sharing" }, { "title": "CWE(Common Weakness Enumeration) 구조 및 표기 방식", "url": "/posts/CWE2/", "categories": "CWE, SW Test", "tags": "", "date": "2021-01-14 00:00:00 +0900", "snippet": " 소프트웨어 및 하드웨어 보안 취약점을 분류한 CWE(Common Weakness Enumeration) 구조 및 표기 방식을 소개한다. CWE는 다음 URI에서 확인할 수 있다.Link: https://cwe.mitre.org/ CWE 구조 View를 제외한 다른 약점들은 다른 유형의 약점들과 1:N 관계를 가지는 그래프로 구성된다. 이러한 그래프 구조를 통해 약점들을 세분화된 단계로 분류할 수 있다.CWE 유형 Type을 통하여 약점의 특성을 파악 할 수 있다.View CWE를 소개하는 가장 큰 집합이다. 관점(View by Software Development 등)에 따라, 외부 규칙과의 매핑(CWE Top 25 등)에 따라, 특정 도메인 또는 사용 유형(Software Written in C, Weakenss in Mobile Applications 등)에 따라, 과거에 제작된 view에 따라 분류된다. 모든 View 리스트에 대한 정보는 다음 URL을 참고하면 된다.출처: https://cwe.mitre.org/data/index.htmlCategory 공통된 특성을 공유하고 다른 집합을 포함하는 집합으로, 사용자가 약점을 검색하고 식별하는데 도움이 되는 구조화된 분류 항목이다.Weakness - Class 범위가 넓고 일반화된 약점으로, 구체적이지 않고 추상적으로 설명되어 있다.ex) Concurrent Execution using Shared Resource with Improper Synchronization (‘Race Condition’): 동시에 실행되는 스레드들이 공유 자원에 접근하려고 할 때 발생하는 현상을 ‘Race Condition’이라고 한다. Race Condition의 원인은 다양하기에 이를 구체적으로 설명하기 어렵다. 해당 규칙은 구체적인 설명이 없기에, Weakness - Class에 포함된다.Weakness - Base 추상적으로 설명되어 있지만 구체적인 방법을 유추하기에 필요한 세부 정보가 설명되어 있다. Weakness - Class 보다 구체적이다.ex) CWE-478: Missing Default Case in Switch Statement: switch … case 문에서 default 구문을 추가하여 예상치 못한 상황을 대비해야 한다. 추상적인 약점 설명이지만, default 문을 추가해야 한다는 구체적인 설명이 있으므로, Weakness - Base에 포함된다.Weakness - Variant 특정 프로그래밍 언어 또는 기술에 대한 약점이다. Weakness - Base 보다 구체적이다.ex) CWE-415: Double Free: C와 C++에서는 개발자가 직접 메모리를 할당하고 해제(free)할 수 있다. free 함수는 특정 언어(C와 C++)에서만 사용하기에, Weakness - Variant에 포함된다.Compound Element - Composite 두 개 이상의 약점이 동시에 존재하는 경우, 잠재적으로 취약점이 발생할 수 있다. 약점을 제거하면 위험이 제거되거나 발생 확률이 감소한다.Compound Element - Named Chain 서로 연결될 수 있는 두 개 이상의 약점들이다. 하나의 약점은 또 다른 약점으로 이어질 수 있는 필요 조건이며, 취약점이 발생할 수 있다.ex) CWE-689: Permission Race Condition During Resource Copy: 자원 복사가 완료될 때까지 자원의 권한과 접근 제어를 설정하지 않는 경우, 자원이 다른 영역이 노출된다. CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization (‘Race Condition’) 즉, 경쟁 상태 약점과 CWE-732: Incorrect Permission Assignment for Critical Resource 즉, 공유 가능한 자원의 잘못된 권한 약점으로 인하여 발생할 수있다.(해당 약점은 필요 조건) 경쟁 상태와 권한 설정으로 인한 약점을 해결하는 경우, CWE-689 약점을 해결할 수 있다.Compound Element - Named Chain 서로 연결될 수 있는 두 개 이상의 약점들이다. 하나의 약점은 또 다른 약점으로 이어질 수 있는 필요 조건이며, 취약점이 발생할 수 있다.ex) CWE-690: Unchecked Return Value to NULL Pointer Dereference: NULL 포인터 역 참조에 대한 체크되지 않은 반환 값은 취약점이 발생하게 된다. CWE-252: Unchecked Return Value 즉, 체크되지 않은 반환 값을 사용하게 되면 CWE-690 약점이 발생할 수 있다. 또한 CWE-690 약점이 수정되지 않으면 뒤이어 CWE CWE-476: NULL Pointer Dereference 즉, NULL 포인터 역참조 약점으로 이어지게 된다.CWE Nature Nature을 통하여 약점 간의 관계를 파악 할 수 있다. MemberOf -&amp;gt; HasMember: 소프트웨어 개발 관련 view(CWE-699)에 포함된 category와의 관계를 표현 CanPrecede -&amp;gt; CanFollow: 다른 악점과의 원인 결과 StartsChain -&amp;gt; StartsWith: 복잡하게 얽힌 약점 구조 ParentOf: 낮은 수준의 추상화 약점 -&amp;gt; ChildOf: 높은 수준의 추상화 약점 PeerOf: 다른 약점과의 유사성 CanAlsoBe: 특정 환경과 상황에서 약점이 발생할 수 있음 Requires -&amp;gt; RequiredBy: 약점이 발생하기 위해서 필요한 필요 조건 예를 들어 CWE-476: NULL Pointer Dereference는 부모 노드, CWE-690: Unchecked Return Value to NULL Pointer Dereference는 자식 노드다. CWE-476은 NULL 포인터 역참조를 사용할 때 발생하는 약점이다. CWE-690는 함수가 NULL 포인터를 반환하고 해당 반환 값을 사용하는 경우 충돌이 발생하거나 종료되는 약점으로 CWE-476을 구체화 하였으므로 자식 노드가 된다.출처: https://m.blog.naver.com/PostView.nhn?blogId=suresofttech&amp;amp;logNo=221238390435&amp;amp;referrerCode=0&amp;amp;searchKeyword=CWEhttps://cwe.mitre.org/documents/schema/#RelatedNatureEnumerationhttps://cwe.mitre.org/data/reports/chains_and_composites.html" }, { "title": "Project Lab 21. 사용자 페이지 개발 - 1", "url": "/posts/Project-Lab21/", "categories": "Web, Project Lab", "tags": "", "date": "2020-12-07 00:00:00 +0900", "snippet": " 사용자 페이지를 개발 내용을 소개한다. github: https://github.com/scribnote5/lab github commit - 1: https://github.com/scribnote5/lab/commit/1a1677035f96ca3ebdae8c80a0bbf6e6ceb14370 github commit - 2: https://github.com/scribnote5/lab/commit/3772c90349b82819fbe61f64d520124edd996c95소스 코드 변경 및 버그 수정 사항 Introduction 게시글은 Active Status 필드 값이 ‘ACTIVE’ 하나만 등록할 수 있다. Introduction의 content에서 summernote 에디터를 제거하였다. 페이징 크기 변경: member에서 한 페이지에 출력되는 데이터의 개수를 12개로 변경하였다.출처: https://catchdream.tistory.com/181 project 게시판에 projectStatus(current project, past project), start date, end date, research establishment 컬럼을 저장하도록 추가하였다. Javascript에서 공백 문자가 들어가는 문자열(daeyoung song)의 validation이 실패하지 않도록 변경하였다. Javascript에서 summernote로 입력한 내용을 innerHTML을 사용하여 HTML 태그가 입력되도록 하였는데, 이를 thymeleaf의 th:utext를 사용하는 것으로 변경하였다. img-border class를 img-thumbnail로 변경하고 img-thumbnail:hover 한 경우 테두리 색상이 변경된다.출처: https://www.w3schools.com/css/css3_images.asp member social link의 img와 크기를 변경하였다. album의 mainHashTag 필드를 추가하였고 해당 데이터를 저장한다. 모든 list 페이지의 Modified Date, Status 삭제하였다. bootstrap.min.css 파일에서 .page-link, .page-link:hover, .page-item.active .page-link의 색상을 파란색 계열에서 웹 페이지의 디자인과 같게 빨간색 계열로 변경하였다. module-app-web과 module-app-admin의 로그인 세션이 공유되는 문제를 해결하였다. &amp;lt;application.yml&amp;gt;server: servlet: session: cookie: name: module-app-admin출처: https://yamea-guide.tistory.com/entry/%ED%86%B0%EC%BA%A3-%EC%84%9C%EB%B2%84-%EA%B0%99%EC%9D%80-IP%EB%8F%84%EB%A9%94%EC%9D%B8-%EB%8B%A4%EB%A5%B8-%ED%8F%AC%ED%8A%B8%EC%9D%BC%EB%95%8C-%EC%84%B8%EC%85%98-%EA%B3%B5%EC%9C%A0-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%ED%8A%95%EA%B9%80-%ED%98%84%EC%83%81https://blog.voidmainvoid.net/40사용자 페이지 개발 사용자 페이지는 bootstrapmade 사이트의 Vesperr 템플릿을 참고하여 개발하여 메인 페이지 및 하위 페이지들(Research Field, Member, Publication, Seminars, Notice Boards, Alumni Association, Album)을 개발하였다. 아직 디자인이 확정되지 않았기에 지속적으로 변경될 예정이다.출처: https://bootstrapmade.com/demo/Vesperr/참고하려 했던 템플릿레이아웃출처: https://www.w3schools.com/bootstrap/bootstrap_templates.aspMain출처: https://www.w3schools.com/bootstrap4/배경색은 light grey로, 템플릿은 card로 사용하기Header Drop down출처: https://kybarg.github.io/bootstrap-dropdown-hover/https://getbootstrap.com/docs/4.0/components/dropdowns/" }, { "title": "Project Lab 19. 관리자 페이지 개발 및 UI 변경(Front-end) - 2", "url": "/posts/Project-Lab19/", "categories": "Web, Project Lab", "tags": "", "date": "2020-11-02 00:00:00 +0900", "snippet": " 관리자 페이지 개발 및 UI 변경(Front-end) 내용을 소개한다. github: https://github.com/scribnote5/lab github commit: https://github.com/scribnote5/lab/commit/77cf907a1f89f85811bcff974d0e8fee7faae713IntelliJ 프로젝트 빌드할 때 ‘Command line is too long. Shorten command line for..’ 에러 해결 방법 프로젝트 빌드시 ‘Command line is too long. Shorten command line for..’ 에러가 발생하여, 다음 출처를 참고하여 해결하였다.출처: http://jmlim.github.io/intellij/2020/02/27/intellij-idea-command-line-is-too-long-error/Spring security 로그인할 때 사용자 인증 할 때 UsernameNotfoundException 예외가 발생하지 않고 BadCredentials 예외가 발생하였다. 하단 출처를 참고하여 사용자 보안을 위해서 UsernameNotfoundException 예외가 발생하지 않는 것을 확인하였다.출처: https://cyr9210.github.io/2019/09/30/Security/usernamenotfound/로그 기록 남기기 JPA의 EntityListener를 사용하여, 데이터 변경 기록을 남기는 기능을 구현하였다. 모든 데이터 변경 기록(등록, 수정, 삭제) 기록을 DB에 저장하여 관리자가 관리할 수 있다. 로그인 접속 기록(접속 시간, IP 주소, 접속 지역)을 DB에 저장하여 관리자가 관리할 수 있다.IP 주소 가져오기 로그인 접속 기록을 기록할 때 사용자의 IP 주소를 가져오는 방법이다.출처: https://linked2ev.github.io/java/2019/05/22/JAVA-1.-java-get-clientIP/ 톰켓은 기본적으로 IPv6 주소를 사용하므로 주소 체계를 IPv4로 변경해야 한다. IntelliJ에서 톰켓의 주소 체계를 변경하는 방법은 다음과 같다.-Djava.net.preferIPv4Stack=true출처: https://bactoria.github.io/2019/10/11/Ip%EB%A1%9C-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8-%EC%A0%91%EC%86%8D-%EC%9C%84%EC%B9%98-%EC%A0%95%EB%B3%B4-%EC%95%8C%EC%95%84%EB%82%B4%EA%B8%B0/GeoIp2 GeoIp2는 IP 주소를 사용하여 접속 지역을 확인하는 라이브러리로서, 해당 라이브러리를 사용하여 로그인을 시도하는 사용자의 접속 지역 또한 DB에 저장하였다.출처: https://www.maxmind.com/en/accounts/421990/geoip/downloadsData History 페이지 개발 모든 데이터 변경 기록을 확인할 수 있는 페이지로서, 검색, 삭제, Active Status를 변경 기능을 지원한다.Login History 페이지 개발 모든 로그인 접속 기록을 확인할 수 있는 페이지로서, 검색, 삭제, Active Status를 변경 기능을 지원한다.Main 페이지 개발 관리자 페이지 로그인시 처음 이동하는 페이지로서, 현재 사이트의 대략적인 데이터를 출력한다. 링크: github + 버전(application.yml 파일에서 버전 정보 및 URL 읽기) 링크: user page 링크: google analystic 통계: 사용자수 통계: 등록된 글의 수 통계: 이번 주 로그인 수, 이번 주 변경된 글의 수, 이번 달 로그인 수, 이번 달 변경된 글의 수(dropdown 사용) 통계: 디스크 메모리 게시판: Alarm(추후 구현 예정) / Notice Board 게시판: Login Histroy 게시판: Data History메일 메일을 CRUD 할 수 있는 페이지다. 구현한 메일 전송 API를 활용하여 메일을 전송할 수 있다. 해당 기능은 추후 다양한 기능과 연동할 예정이다.출처: https://ktko.tistory.com/entry/JAVA-SMTP%EC%99%80-Mail-%EB%B0%9C%EC%86%A1%ED%95%98%EA%B8%B0Google-Naver" }, { "title": "Project Lab 18. 관리자 페이지 개발 및 UI 변경(Front-end) - 1", "url": "/posts/Project-Lab18/", "categories": "Web, Project Lab", "tags": "", "date": "2020-11-02 00:00:00 +0900", "snippet": " 관리자 페이지 개발 및 UI 변경(Front-end) 내용을 소개한다. github: https://github.com/scribnote5/lab github commit: https://github.com/scribnote5/lab/commit/257c0769ed343c8de22156bdd103c1e739e8134f소스 코드 변경 및 버그 수정 사항 벡엔드 mainPagePriority 유효성 검사 로직 버그 수정하였다. 최근 등록된 게시글을 사용자에게 알려주는 New Icon 알고리즘 로직을 변경하였다. 기존 2일을 기준으로 최근 등록된 게시글임을 표시하였다. 정확성을 높이기 위해 기준을 일(2일) 대신 시간(24시간)으로 변경하였다.&amp;lt;module-system-common/src/main/java/kr/ac/univ/util/NewIconCheck.java&amp;gt;package kr.ac.univ.util;import java.time.LocalDateTime;import java.time.temporal.ChronoUnit;public class NewIconCheck { public static Boolean isNew(LocalDateTime pastLocalDateTime ) { LocalDateTime currentTime = LocalDateTime.now(); // 현재 시간과 비교하여 2일 이내에는 newIcon 생성 long hours = 24; boolean result; if(ChronoUnit.HOURS.between(currentTime , pastLocalDateTime) &amp;gt;= -24 ) { result = true; } else { result = false; } return result; }}출처: http://blog.eomdev.com/java/2016/04/01/%EC%9E%90%EB%B0%948%EC%9D%98-java.time-%ED%8C%A8%ED%82%A4%EC%A7%80.html프로젝트에서 주로 사용하는 색상 프로젝트에서 주로 사용하는 색은 바탕에 black과 액션 효과에 red로 설정하였다. rgb는 다음과 같다. red color: rgb(158, 37, 41); black color: rgb(48, 48, 48);Login page UI 변경 Login page의 UI를 하단 출처를 참고하여 변경하였다.출처: https://www.bootstrapdash.com/product/free-bootstrap-login/Sidebar, Header, Footer UI 변경 Sidebar, Header, Footer UI를 하단 출처를 참고하여 변경하였다. Logout 버튼 클릭시 confirm 창 출력출처: https://startbootstrap.com/templates/simple-sidebar/반응형 레이아웃 변경 기존 사용자에게 적합하지 않은 반응형 레이아웃을 최적화하였다.CSS 변경 사항 자주 사용하는 값들은 변수를 사용하도록 변경하였다. 기존 px 크기 단위를 rem 크기 단위로 변경하였다. img 태그의 border와 마우스를 올려 놓는 경우 효과를 하단 출처를 참고하여 추가하였다.출처: https://www.w3schools.com/css/css3_images.aspIcon 사용 Icon은 하단 출처를 참고하여 사용하였다. 해당 사이트에서 제공하는 아이콘은 무료로 색상과 크기를 임의로 변경하여 사용할 수 있다.출처: https://feathericons.com/?query=arrowhttps://iconscout.com/icon/n-character-alphabet-letter" }, { "title": "Project Lab 17. 기타 페이지 개발 - 1", "url": "/posts/Project-Lab17/", "categories": "Web, Project Lab", "tags": "", "date": "2020-10-16 00:00:00 +0900", "snippet": " Bootstrap을 사용하여 UI 변경(Front-end), 설계 변경에 따른 코드 리펙토링한 내용을 소개한다. github: https://github.com/scribnote5/lab github commit: https://github.com/scribnote5/lab/commit/b145d6864452592f86448ba92d54ddaaf0d0867a소스 코드 변경 및 버그 수정 사항 에러가 발생할 때 대응하는 에러 페이지인 500.html를 500번 대 에러 페이지에 매핑되도록 5xx.html로 변경하였다. HTML icon관련 img 태그에 적용되던 inline style을 class style에 적용하도록 변경하였다. 자바스크립트 공백 및 공란 검사 과정을 변경하였다. 기존 소스 코드에서는 “안녕 하세요?” 문자열이 들어오는 경우 유효성 검사에 성공해야 하지만 유효성 검사에 실패하는 버그를 수정하였다.기타 페이지 개발Introduction 연구실을 소개하는 페이지를 개발하였다.Learn More 연구실을 소개하는 pdf 파일 또는 비디오 파일을 업로드하고 다운로드하는 페이지를 개발하였다.Research Field 연구실의 연구 분야를 소개하는 페이지를 개발하였다.Category 연구실 세미나 페이지를 등록할 때 연동되는 카테고리 페이지를 개발하였다.Seminars 연구실에서 진행하는 세미나를 소개하는 페이지를 개발하였다. Category의 PK인 categoryIdx를 참조하여, Category에 따라 세미나를 등록할 수 있다.Projects 연구실에서 수행하는 프로젝트를 소개하는 페이지를 개발하였다. Research Field의 PK인 researcFieldIdx를 참조하여, Research Field에 따라 프로젝트를 등록할 수 있다.Album 연구실에서 찍은 사진을 관리하는 페이지를 개발하였다. 해시 태그 기능을 개발하였다. 사용자 페이지의 main 화면에 우선순위에 따라 사진을 보여주는 mainPagePriority 기능을 개발하였다.Alumni Association 연구실에서 찍은 사진을 관리하는 페이지를 개발하였다. 사용자 페이지의 Alumni Association 화면에 우선순위에 따라 게시글을 보여주는 mainPagePriority 기능을 개발하였다." }, { "title": "Project Lab 16. UI 변경(Front-end) 및 코드 리펙토링 - 1", "url": "/posts/Project-Lab16/", "categories": "Web, Project Lab", "tags": "", "date": "2020-10-15 00:00:00 +0900", "snippet": " Bootstrap을 사용하여 UI 변경(Front-end), 설계 변경에 따른 코드 리펙토링한 내용을 소개한다. github: https://github.com/scribnote5/lab github commit: https://github.com/scribnote5/lab/commit/b145d6864452592f86448ba92d54ddaaf0d0867aUI 변경(Front-end) Bootstrap 4를 사용하여 프로젝트의 UI를 변경하였다.Bootstrap 시작 처음 Bootstrap 사용할 때 참고한 사이트로서, Bootstrap의 구조와 제공하는 기능을 파악하는데 도움이 되었다.출처: https://brunch.co.kr/@clay1987/131Bootstrap 4 적용 및 디자인 변경 기존 프로젝트는 Bootstrap 3을 사용하였으며, 최신 버전인 Bootstrap 4.5.2로 마이그레이션을 진행하였다. 이에 따라 기존에 사용한 구성요소가 변경됨에 따라 전체적인 UI를 변경하게 되었다. container class margin 줄이기 -&amp;gt; container-lg 사용 등록되는 모든 글은 new icon 표시글꼴 변경 프로젝트에서 사용하는 글꼴을 ‘Spoqa Han Sans’로 변경하였다. 스포카 한 산스 폰트는 많은 웹 사이트에서 사용하고 있는 오픈 폰트로서 가독성이 좋고 무료로 사용가능하다. 글꼴 변경 과정은 하단 출처를 참고하였다.출처: https://spoqa.github.io/spoqa-han-sans//ko-KR/https://webclub.tistory.com/261https://wit.nts-corp.com/2017/02/13/4258에러 페이지 추가 module-app-web view를 담당하는 서버에서 에러가 발생하는 경우, 이동되는 에러 페이지를 추가하였다. 에러 페이지 추가 과정은 하단 출처를 참고하였다.출처: https://goddaehee.tistory.com/214관리자 페이지와 사용자 페이지 분리 사용자의 접근 가능 여부를 설정하는 isAccess 메소드를 관리자 페이지와 사용자 페이지에 다르게 적용하였다. application.yml에 module명을 추가하여, 관리자 페이지(module-app-admin)와 사용자 페이지(module-app-web)에 따라 호출되는 메소드를 세분화하였다. 관리자 페이지(module-app-admin)에서는 ActiveStatus에 관계 없이 데이터를 모두 출력 하지만, 사용자 페이지(module-app-web)에서는 ActiveStatus가 active인 경우만 데이터를 출력한다. root 권한 사용자의 권한은 변경할 수 없다. 새로 가입한 non_user 사용자는 관리자 페이지에서 관리자가 general 사용자로 변경해야 로그인 가능하도록 변경하였다. Spring security에서 제공하는 예외를 사용하여 예외처리 한다.출처: https://codevang.tistory.com/268권한에 따른 관리자 페이지 접근 가능 여부 root: 모든 권한에 대한 접근 허용 manager: general 권한에 대한 접근 허용, 본인이 create한 게시글에 update 및 delete 가능 general, non_user, anonymous: 접근 불가권한에 따른 사용자 페이지 접근 가능 여부 root, manager general: 본인이 create한 게시글에 update 및 delete 가능 non_user: 비회원으로서 회원 가입 인증 대기 중(추후 구현), 게시글 read만 가능 anonymous: 게시글 read만 가능Thymeleaf Publication(논문) 페이지에서 사용하는 날짜 관련 자료형은 LocalDate이며, 이중 년도, 영어 월(April)만 필요하다. 따라서 LocalDate 자료형에서 필요한 데이터 포맷만 사용하도록 변경하였다.출처: https://frontbackend.com/thymeleaf/working-with-dates-in-thymeleaf select box에서 하드 코딩으로 구현된 java enum을 thymeleaf에서 제공하는 enum 표현 방법으로 변경하였다.출처: https://frontbackend.com/thymeleaf/how-to-display-all-enum-values-in-thymeleafcsrf 토근 오류 메시지 해결 기존 csrf 구현에 오류가 발생하여 다음과 같이 소스 코드를 변경하였다. ajax csrf: css.html에 csrf meta 태그 추가하였다. form csrf: Spring MVC에서 제공하는 태그를 사용하거나 Thymeleaf 2.1 이상이면서 @EnableWebSecurity를 사용한 경우에는 CsrfRequestDataValueProcessor가 적용되어 form tag에 자동으로 csrf 토큰이 포함된다. 프로젝트에서는 Thymeleaf 3 이상을 사용하기에 변경 내용은 없다.출처: &amp;lt;ttps://bestcure.tistory.com/entry/Spring-boot-security-%EC%82%AC%EC%9A%A9%EC%8B%9C-ajax-%EC%B2%98%EB%A6%AC&amp;gt;https://docs.spring.io/spring-security/site/docs/5.0.x/reference/html/csrf.html#csrf-include-csrf-tokenhttps://reiphiel.tistory.com/entry/spring-security-csrfspring-dev-tools 자동 재시작 설정 변경 소스 코드가 변경되어도 spring-dev-tools가 서버를 자동으로 재시작하지 않는 경우가 발생하여, application.yml에 해당 설정을 추가하였다.spring: devtools: restart: enabled: true" }, { "title": "Project Lab 15. 유효성 검사(javascript) - 1", "url": "/posts/Project-Lab15/", "categories": "Web, Project Lab", "tags": "", "date": "2020-09-23 00:00:00 +0900", "snippet": " Java를 사용하여 입력값(text, file) 유효성 검사 과정을 소개한다. github: https://github.com/scribnote5/lab github commit: https://github.com/scribnote5/lab/commit/b145d6864452592f86448ba92d54ddaaf0d0867a 최신 프로젝트 코드와 형상이 다를 수 있습니다. 게시글 코드는 참고만 하시되, 최신 코드는 github에서 확인 부탁드립니다.Java bean 유효성 검사(spring-boot-starter-validation) Bean Validation 2.0(JSR-380)은 Java 데이터 유효성 검사 표준 기술로, 애노테이션을 사용하여 bean 유효성 검사를 하는 Java API 명세다. Hibernate-validator: Bean Validation을 구현한 Java API다. 프로젝트에서는 Bean Validation 2.0 API를 사용하여 Java 유효성 검사를 수행한다. spring-boot-starter-validation 의존성에는 Bean Validation 2.0 API와 이를 구현한 Hibernate-validator API가 존재한다.출처: https://medium.com/@SlackBeck/javabean-validation%EA%B3%BC-hibernate-validator-%EA%B7%B8%EB%A6%AC%EA%B3%A0-spring-boot-3f31aee610f5 javax annotation으로 validation 방법은 하단 출처를 참고하였다.출처: https://jeong-pro.tistory.com/203파일 유효성 검사(파일 크기, 파일 확장자, MIME Type) 기본적인 파일 validation 방법은 파일 확장자를 검사하는 방법이다. 보안 위협이 될 수 있는 확장자를 가지는 파일(.exe 파일, .jar 파일)이 서버에 업로드 되지 않도록 차단한다. 그러나 파일 확장자가 .txt 고 보안 공격을 시도하는 파일 binary 구조를 가진다면, 큰 보안 위협이 된다. 벡엔드에서는 .txt 파일 확장자를 유효한 파일 확장자라고 판단하여 파일 업로드를 허용하기 때문이다. 이렇듯 웹에서 파일 확장자는 큰 의미를 가지지 않으며, 파일 MIME type을 사용한 파일 유효성 검사가 필요하다. MIME(Multipurpose Internet Mail Extensions) type은 웹에서 클라이언트에게 전송된 문서의 다양성을 알려주기 위한 메커니즘으로서, 첨부된 파일을 텍스트 문자 형태로 변환해서 이메일과 함께 전송하기 위해 개발된 포맷이다. 파일의 MIME type을 분석한다면, 위에서 설명한 보안 위협 사례를 예방할 수 있다. 프로젝트에서는 파일 확장자, 파일 크기(한 번 업로드시 20MB 이하의 파일만 업로드 허용), MIME type을 사용하여 유효성 검사를 수행한다. 다양한 파일 MIME type 확인 방법 중에서, Apache Tika 라이브러리를 사용하였다.출처: https://offbyone.tistory.com/330https://www.baeldung.com/java-file-mime-typehttps://stackoverflow.com/questions/5541694/how-to-get-file-extension-from-content-type예외처리 설계 Spring에서 예외처리 방법에는 3가지가 있다. 전역에서 예외처리(전체 애플리케이션) Global Level using - @ControllerAdvice Controller에서 예외처리 Controller Level using - @ExceptionHandler 메소드에서 예외처리 Method Level using - try- catch출처: https://jeong-pro.tistory.com/195https://springboot.tistory.com/33전역에서 예외처리 @ControllerAdvice 프로젝트에서는 애플리케이션에서 발생하는 예외는 전역에서 예외처리하여 에러 메시지를 응답한다. Bean Validation 2.0 API의 유효성 검사에 실패하면 예외 정보를 Controller 파라미터에 BindingResult bindingResult를 선언 후 bindingResult.hasError() 메소드를 사용하여 확인할 수 있다. 그러나 해당 방법은 모든 응답마다 유효성 검사를 위한 소스 코드가 추가되기에 비효율적이므로, 유효성 검사에 실패하면 발생하는 예외를 전역에서 예외처리 하도록 구현하였다.&amp;lt;test.java&amp;gt;@PostMapping(&quot;/books&quot;) public void save(@RequestBody @Valid AddBookRequestDto addBookRequestDto, BindingResult bindingResult){ if (bindingResult.hasErrors()) { bindingResult.getAllErrors().forEach(objectError-&amp;gt;{ System.err.println(&quot;code : &quot; + objectError.getCode()); System.err.println(&quot;defaultMessage : &quot; + objectError.getDefaultMessage()); System.err.println(&quot;objectName : &quot; + objectError.getObjectName()); }); return; } bookService.save(addBookRequestDto.toEntity());}출처: https://velog.io/@hellozin/Valid-%EC%98%88%EC%99%B8%EB%A5%BC-%EC%A0%84%EC%97%AD-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC%EB%A1%9C-%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0Controller에서 예외처리 @ExceptionHandler Controller내에서 발생하는 모든 예외를 처리하는 방법이다. 전역에서 예외처리 하는 방법은 소스 코드 중복을 줄이고 가독성을 향상시키므로, 해당 방법을 적용하지 않았다.메소드에서 예외처리 try-catch 메소드에서 예외처리 방법은 예외마다 다르게 처리할 수 있고 메소드 단위로 예외처리를 수행하기 때문에 소스 코드의 안전성과 신뢰성을 높일 수 있다. 그러나 반복되는 try-catch 구문은 가독성을 떨어뜨리고 알고리즘 로직의 흐름이 끊긴다. 하단 출처에서는 try-cath 사용할 때 전략을 다음과 같이 소개한다. try-catch를 최대한 지양해라. try-catch로 에러를 먹고 죽는 코드는 지양해라.(이런 코드가 있다면 로그라도 추가해주세요…)try { // 비즈니스 로직 수행…}catch (Exception e){ e.printStackTrace();} try catch를 사용하게 된다면 더 구체적인 Exception을 발생시키는 것이 좋다. 출처: https://cheese10yun.github.io/spring-guide-exception/의존성 관리 Java bean 유효성 검사를 위한 spring-boot-starter-validation 의존성과 파일 유효성 검사(MIME Type)에 필요한 Apache Tika 의존성을 추가한다.&amp;lt;build.gradle&amp;gt; // 프로젝트 개발에 필요한 공통 의존성 라이브러리를 선언한다. dependencies { // spring boot implementation &quot;org.springframework.boot:spring-boot-starter-web&quot; implementation &quot;org.springframework.boot:spring-boot-starter-data-jpa&quot; implementation &quot;org.springframework.boot:spring-boot-starter-security&quot; implementation &quot;org.springframework.boot:spring-boot-starter-validation&quot; runtimeOnly &quot;org.springframework.boot:spring-boot-devtools&quot; ... }}...project(&quot;:module-domain-core&quot;) { dependencies { compile project(&quot;:module-system-common&quot;) implementation &quot;org.apache.tika:tika-parsers:1.24.1&quot; implementation &quot;com.querydsl:querydsl-core&quot; implementation &quot;com.querydsl:querydsl-jpa&quot; }}...Config Web 애플리케이션의 설정 및 공통적으로 사용하는 Web Resource를 다루는 모듈을 추가하였다. 해당 모듈은 프로젝트 진행 중 각 역할을 세분화하고 모듈간의 의존성을 낮추기 위해서 새로 추가하였으며, 이후 모듈의 역할을 구체적으로 정하고 세분화 작업을 수행할 예정이다. Error 클래스, Handler 클래스, Validation 클래스, module-web-core와 module-app-admin이 공통적으로 사용하는 Web Resources(html, css, javascript 등) 파일이 위치한다. Web Resource는 추후 리펙토링 때 분리할 예정이다.&amp;lt;settings.gradle&amp;gt;rootProject.name = &#39;lab&#39;include &#39;module-system-common&#39;include &#39;module-domain-core&#39;include &#39;module-app-api&#39;include &#39;module-app-web&#39;include &#39;module-app-admin&#39;include &#39;module-web-core&#39; max-swallow-size: 요청 body의 크기를 설정한다. 업로드되는 파일 크기가 제한(20MB)을 초과하여 예외가 발생하는 경우, 사용자 정의 예외처리 방식으로 수행되도록 한다.&amp;lt;module-app-api/src/main/resources/application.yml&amp;gt;spring: jpa: open-in-view: false devtools: # 프론트 수정 사항을 자동으로 반영한다. livereload: enabled: false servlet: multipart: # 한개의 파일의 최대 크기 max-file-size: 20MB # form-data 요청에 따른 모든 파일의 최대 크기 max-request-size: 20MB enabled: trueserver: tomcat: max-swallow-size: -1...Java bean 유효성 검사 게시글에서는 noticeBoard 게시판을 기준으로 소개한다. 모든 DTO에서 공통적으로 사용하는 DTO다. private String createdBy: @NotBlank 생성자 데이터가 공란인지 유효성 검사한다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/common/dto/CommonDto.java&amp;gt;package kr.ac.univ.common.dto;import kr.ac.univ.common.domain.enums.ActiveStatus;import lombok.Getter;import lombok.NoArgsConstructor;import lombok.Setter;import lombok.ToString;import javax.validation.constraints.NotBlank;import javax.validation.constraints.NotNull;import java.time.LocalDateTime;@Getter@Setter@NoArgsConstructor@ToStringpublic class CommonDto { private Long idx; private LocalDateTime createdDate; private LocalDateTime lastModifiedDate; @NotBlank(message = &quot;The createdBy must not be blank.\\nIf the message is alerted although you are logged in, please contact the admin.&quot;) private String createdBy; private String lastModifiedBy; private ActiveStatus activeStatus; private boolean isAccess;} NoticeBoard에서 사용하는 DTO다. private String title: @NotBlank 제목 데이터가 공란인지 유효성 검사한다. private String content: @Editor은 사용자 정의 validaton(ConstraintValidator)이다. editor 멤버 필드의 byte 크기가 16MB 이하인지 유효성 검사한다.출처: https://cheese10yun.github.io/ConstraintValidator/&amp;lt;module-domain-core/src/main/java/kr/ac/univ/noticeBoard/dto/NoticeBoardDto.java&amp;gt;package kr.ac.univ.noticeBoard.dto;import kr.ac.univ.common.dto.CommonDto;import kr.ac.univ.common.validation.Editor;import kr.ac.univ.noticeBoard.domain.NoticeBoardAttachedFile;import lombok.Getter;import lombok.NoArgsConstructor;import lombok.Setter;import lombok.ToString;import javax.validation.constraints.NotBlank;import java.util.ArrayList;import java.util.List;@Getter@Setter@NoArgsConstructor@ToStringpublic class NoticeBoardDto extends CommonDto { /* CommonDto: JPA Audit */ /* 기본 정보 */ @NotBlank(message = &quot;The title must not be blank.&quot;) private String title; @Editor(max = 16777215, message=&quot;The editor&#39;s input size of bytes is exceeded.&quot;) private String content; private Long viewCount; /* newIcon */ private boolean isNewIcon; /* 첨부 파일 */ private List&amp;lt;NoticeBoardAttachedFile&amp;gt; attachedFileList = new ArrayList&amp;lt;NoticeBoardAttachedFile&amp;gt;();} 사용자 정의 validaton(ConstraintValidator)의 애노테이션을 생성한다. String message(): @Editor를 통해 입력되는 message다. long max(): @Editor를 통해 입력되는 최대 byte 크기다. byte 크기를 제한다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/common/validation/Editor.java&amp;gt;package kr.ac.univ.common.validation;import java.lang.annotation.Documented;import java.lang.annotation.ElementType;import java.lang.annotation.Retention;import java.lang.annotation.RetentionPolicy;import java.lang.annotation.Target;import javax.validation.Constraint;import javax.validation.Payload;@Documented@Constraint(validatedBy = EditorValidator.class)@Target({ ElementType.METHOD, ElementType.FIELD })@Retention(RetentionPolicy.RUNTIME)public @interface Editor { String message(); long max(); Class&amp;lt;?&amp;gt;[] groups() default {}; Class&amp;lt;? extends Payload&amp;gt;[] payload() default {};} 사용자 정의 validaton(ConstraintValidator)의 유효성 검사 로직이 존재한다. initialize: @Editor를 통해 입력되는 최대 byte 크기를 초기화 한다. long max(): ConstraintValidator의 유효성 검사 로직이다. byte 크기가 16MB 이하인지 유효성 검사한다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/common/validation/EditorValidator.java&amp;gt;package kr.ac.univ.common.validation;import kr.ac.univ.util.ByteSizeUtil;import javax.validation.ConstraintValidator;import javax.validation.ConstraintValidatorContext;public class EditorValidator implements ConstraintValidator&amp;lt;Editor, String&amp;gt; { long max; @Override public void initialize(Editor editor) { max = editor.max(); } @Override public boolean isValid(String str, ConstraintValidatorContext cxt) { return ByteSizeUtil.getByteSize(str) &amp;lt; max; }} Java: 문자열의 byte 크기를 반환한다.출처:https://photoress.tistory.com/entry/String%ED%98%95-Bytes%EB%A1%9C-length%EA%B5%AC%ED%95%98%EA%B8%B0https://blog.miyam.net/125&amp;lt;module-system-common/src/main/java/kr/ac/univ/util/ByteSizeUtil.java&amp;gt;package kr.ac.univ.util;import java.io.UnsupportedEncodingException;public class ByteSizeUtil { public static int getByteSize(String str) { int byteSize = 0; try { byteSize = str.getBytes(&quot;UTF-8&quot;).length; } catch (Exception e) { e.printStackTrace(); } return byteSize; }} NoticeBoard 관련 클라이언트의 요청을 json 타입으로 응답한다. @Valid를 사용하면 View에서 전달되는 데이터에 대해서 유효성 검사가 수행된다. 만약 NoticeBoardDto 유효성 검사에 실패하여 예외가 발생한다면, 해당 예외는 전역에서 예외처리 된다.&amp;lt;module-app-api/src/main/java/kr/ac/univ/controller/NoticeBoardRestController.java&amp;gt;package kr.ac.univ.controller;import kr.ac.univ.common.validation.FileValidator;import kr.ac.univ.error.ErrorCode;import kr.ac.univ.error.ErrorResponse;import kr.ac.univ.exception.FileTypeException;import kr.ac.univ.noticeBoard.dto.NoticeBoardDto;import kr.ac.univ.noticeBoard.dto.mapper.NoticeBoardMapper;import kr.ac.univ.noticeBoard.service.NoticeBoardAttachedFileService;import kr.ac.univ.noticeBoard.service.NoticeBoardService;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MaxUploadSizeExceededException;import org.springframework.web.multipart.MultipartFile;import javax.validation.Valid;import java.util.List;@RestController@RequestMapping(&quot;/api/notice-boards&quot;)public class NoticeBoardRestController { private final NoticeBoardService noticeBoardService; private final NoticeBoardAttachedFileService noticeBoardAttachedFileService; public NoticeBoardRestController(NoticeBoardService noticeBoardService, NoticeBoardAttachedFileService noticeBoardAttachedFileService) { this.noticeBoardService = noticeBoardService; this.noticeBoardAttachedFileService = noticeBoardAttachedFileService; } @PostMapping public ResponseEntity&amp;lt;?&amp;gt; postNoticeBoard(@RequestBody @Valid NoticeBoardDto noticeBoardDto) { Long idx = noticeBoardService.insertNoticeBoard(noticeBoardDto); return new ResponseEntity&amp;lt;&amp;gt;(idx, HttpStatus.CREATED); } @PutMapping(&quot;/{idx}&quot;) public ResponseEntity&amp;lt;?&amp;gt; putNoticeBoard(@PathVariable(&quot;idx&quot;) Long idx, @RequestBody @Valid NoticeBoardDto noticeBoardDto) { noticeBoardService.updateNoticeBoard(idx, noticeBoardDto); return new ResponseEntity&amp;lt;&amp;gt;(&quot;{}&quot;, HttpStatus.OK); } @DeleteMapping(&quot;/{idx}&quot;) public ResponseEntity&amp;lt;?&amp;gt; deleteNoticeBoard(@PathVariable(&quot;idx&quot;) Long idx) throws Exception { noticeBoardService.deleteNoticeBoardByIdx(idx); noticeBoardAttachedFileService.deleteAllAttachedFile(idx); return new ResponseEntity&amp;lt;&amp;gt;(&quot;{}&quot;, HttpStatus.OK); } ...}파일 유효성 검사(파일 확장자, MIME Type) 유효하지 않은 파일 확장자, MIME type 데이터를 static 키워드로 선언된 Set Collection 멤버 필드에 초기화한다. 파일 유효성 검사를 위한 파일 확장자와 MIME type 리스트는 하단 출처를 참고하여 정리하였다.출처: https://www.howtogeek.com/137270/50-file-extensions-that-are-potentially-dangerous-on-windows/https://kb.intermedia.net/article/23567https://www.file-extensions.org/filetype/extension/name/dangerous-malicious-files&amp;lt;module-domain-core/src/main/java/kr/ac/univ/common/validation/FileType.java&amp;gt;package kr.ac.univ.common.validation;import java.util.HashSet;import java.util.Set;public class FileType { public static Set&amp;lt;String&amp;gt; invalidMimeTypeSet = new HashSet&amp;lt;String&amp;gt;(); public static Set&amp;lt;String&amp;gt; invalidExtensionSet = new HashSet&amp;lt;String&amp;gt;(); public static Set&amp;lt;String&amp;gt; validImageTypeSet = new HashSet&amp;lt;String&amp;gt;(); // Invalid mime type Set static { // Application invalidMimeTypeSet.add(&quot;application/x-msdownload&quot;); // .exe invalidMimeTypeSet.add(&quot;application/x-msdownload; format=pe32&quot;); // .exe invalidMimeTypeSet.add(&quot;application/java-archive&quot;); // .jar invalidMimeTypeSet.add(&quot;application/javascript&quot;); // .js invalidMimeTypeSet.add(&quot;application/x-shockwave-flash&quot;); // .swf invalidMimeTypeSet.add(&quot;application/octet-stream&quot;); // .bin 등의 실행 파일 invalidMimeTypeSet.add(&quot;application/x-msmetafile&quot;); // .wmf invalidMimeTypeSet.add(&quot;application/java-vm&quot;); // .class invalidMimeTypeSet.add(&quot;application/vnd.ms-htmlhelp&quot;); // .chm invalidMimeTypeSet.add(&quot;image/x-portable-graymap&quot;); // .pgm invalidMimeTypeSet.add(&quot;image/x-pcx&quot;); // .pcx invalidMimeTypeSet.add(&quot;application/winhlp&quot;); // .hlp invalidMimeTypeSet.add(&quot;application/vnd.americandynamics.acc&quot;); // .acc invalidMimeTypeSet.add(&quot;text/css&quot;); // .css invalidMimeTypeSet.add(&quot;application/x-sh&quot;); //.sh } // Invalid Extension Set static { // Programs invalidExtensionSet.add(&quot;.pif&quot;); invalidExtensionSet.add(&quot;.gadget&quot;); invalidExtensionSet.add(&quot;.msi&quot;); invalidExtensionSet.add(&quot;.msp&quot;); invalidExtensionSet.add(&quot;.com&quot;); invalidExtensionSet.add(&quot;.hta&quot;); invalidExtensionSet.add(&quot;.cpl&quot;); invalidExtensionSet.add(&quot;.msc&quot;); invalidExtensionSet.add(&quot;.exe&quot;); // Scripts invalidExtensionSet.add(&quot;.bat&quot;); invalidExtensionSet.add(&quot;.cmd&quot;); invalidExtensionSet.add(&quot;.vb&quot;); invalidExtensionSet.add(&quot;.vbs&quot;); invalidExtensionSet.add(&quot;.vbe&quot;); invalidExtensionSet.add(&quot;.jse&quot;); invalidExtensionSet.add(&quot;.ws&quot;); invalidExtensionSet.add(&quot;.wsf&quot;); invalidExtensionSet.add(&quot;.wsc&quot;); invalidExtensionSet.add(&quot;.wsh&quot;); invalidExtensionSet.add(&quot;.ps1&quot;); invalidExtensionSet.add(&quot;.ps2&quot;); invalidExtensionSet.add(&quot;.ps1xml&quot;); invalidExtensionSet.add(&quot;.ps2xml&quot;); invalidExtensionSet.add(&quot;.psc1&quot;); invalidExtensionSet.add(&quot;.psc2&quot;); invalidExtensionSet.add(&quot;.msh&quot;); invalidExtensionSet.add(&quot;.msh1&quot;); invalidExtensionSet.add(&quot;.msh2&quot;); invalidExtensionSet.add(&quot;.mshxml&quot;); invalidExtensionSet.add(&quot;.msh1xml&quot;); invalidExtensionSet.add(&quot;.msh2xml&quot;); // Shortcuts invalidExtensionSet.add(&quot;.scf&quot;); invalidExtensionSet.add(&quot;.lnk&quot;); invalidExtensionSet.add(&quot;.inf&quot;); invalidExtensionSet.add(&quot;.reg&quot;); // Others invalidExtensionSet.add(&quot;.dll&quot;); invalidExtensionSet.add(&quot;.sys&quot;); invalidExtensionSet.add(&quot;.gzquar&quot;); invalidExtensionSet.add(&quot;.zix&quot;); invalidExtensionSet.add(&quot;.aru&quot;); invalidExtensionSet.add(&quot;.ozd&quot;); invalidExtensionSet.add(&quot;.drv&quot;); invalidExtensionSet.add(&quot;.sjs&quot;); invalidExtensionSet.add(&quot;.dev&quot;); invalidExtensionSet.add(&quot;.xlm&quot;); invalidExtensionSet.add(&quot;.0_full_0_tgod_signed&quot;); invalidExtensionSet.add(&quot;.boo&quot;); invalidExtensionSet.add(&quot;.tps&quot;); invalidExtensionSet.add(&quot;.tsa&quot;); invalidExtensionSet.add(&quot;.sop&quot;); invalidExtensionSet.add(&quot;.bkd&quot;); invalidExtensionSet.add(&quot;.cih&quot;); invalidExtensionSet.add(&quot;.iik&quot;); invalidExtensionSet.add(&quot;.dyz&quot;); invalidExtensionSet.add(&quot;.dyv&quot;); invalidExtensionSet.add(&quot;.kcd&quot;); invalidExtensionSet.add(&quot;.s7p&quot;); invalidExtensionSet.add(&quot;dlb&quot;); invalidExtensionSet.add(&quot;.9&quot;); invalidExtensionSet.add(&quot;.dom&quot;); invalidExtensionSet.add(&quot;.php3&quot;); invalidExtensionSet.add(&quot;.dxz&quot;); invalidExtensionSet.add(&quot;.mjg&quot;); invalidExtensionSet.add(&quot;.mfu&quot;); invalidExtensionSet.add(&quot;.cla&quot;); invalidExtensionSet.add(&quot;.hlw&quot;); invalidExtensionSet.add(&quot;.rsc_tmp&quot;); invalidExtensionSet.add(&quot;.mjz&quot;); invalidExtensionSet.add(&quot;.bup&quot;); invalidExtensionSet.add(&quot;.upa&quot;); invalidExtensionSet.add(&quot;.bhx&quot;); invalidExtensionSet.add(&quot;.mcq&quot;); invalidExtensionSet.add(&quot;.dli&quot;); invalidExtensionSet.add(&quot;.txs&quot;); invalidExtensionSet.add(&quot;.fnr&quot;); invalidExtensionSet.add(&quot;.xir&quot;); invalidExtensionSet.add(&quot;.xlv&quot;); invalidExtensionSet.add(&quot;.bxz&quot;); invalidExtensionSet.add(&quot;.cxq&quot;); invalidExtensionSet.add(&quot;.xdu&quot;); invalidExtensionSet.add(&quot;.ska&quot;); invalidExtensionSet.add(&quot;.wlpginstall&quot;); invalidExtensionSet.add(&quot;.cfxxe&quot;); invalidExtensionSet.add(&quot;.tti&quot;); invalidExtensionSet.add(&quot;.vexe&quot;); invalidExtensionSet.add(&quot;.qrn&quot;); invalidExtensionSet.add(&quot;.dllx&quot;); invalidExtensionSet.add(&quot;.faq&quot;); invalidExtensionSet.add(&quot;.xtbl&quot;); invalidExtensionSet.add(&quot;.smtmp&quot;); invalidExtensionSet.add(&quot;.ceo&quot;); invalidExtensionSet.add(&quot;.tko&quot;); invalidExtensionSet.add(&quot;.uzy&quot;); invalidExtensionSet.add(&quot;.oar&quot;); invalidExtensionSet.add(&quot;.bll&quot;); invalidExtensionSet.add(&quot;.plc&quot;); invalidExtensionSet.add(&quot;.spam&quot;); invalidExtensionSet.add(&quot;.ssy&quot;); invalidExtensionSet.add(&quot;.dbd&quot;); invalidExtensionSet.add(&quot;.smm&quot;); invalidExtensionSet.add(&quot;.ce0&quot;); invalidExtensionSet.add(&quot;.zvz&quot;); invalidExtensionSet.add(&quot;.cc&quot;); invalidExtensionSet.add(&quot;.blf&quot;); invalidExtensionSet.add(&quot;.ctbl&quot;); invalidExtensionSet.add(&quot;.iws&quot;); invalidExtensionSet.add(&quot;.vzr&quot;); invalidExtensionSet.add(&quot;.nls&quot;); invalidExtensionSet.add(&quot;.hsq&quot;); invalidExtensionSet.add(&quot;.lkh&quot;); invalidExtensionSet.add(&quot;.aepl&quot;); invalidExtensionSet.add(&quot;.rna&quot;); invalidExtensionSet.add(&quot;.hts&quot;); invalidExtensionSet.add(&quot;.let&quot;); invalidExtensionSet.add(&quot;.aut&quot;); invalidExtensionSet.add(&quot;.delf&quot;); invalidExtensionSet.add(&quot;.buk&quot;); invalidExtensionSet.add(&quot;.fuj&quot;); invalidExtensionSet.add(&quot;.atm&quot;); invalidExtensionSet.add(&quot;.ezt&quot;); invalidExtensionSet.add(&quot;.fjl&quot;); invalidExtensionSet.add(&quot;.bmw&quot;); invalidExtensionSet.add(&quot;.dx&quot;); invalidExtensionSet.add(&quot;.cyw&quot;); invalidExtensionSet.add(&quot;.iva&quot;); invalidExtensionSet.add(&quot;.pid&quot;); invalidExtensionSet.add(&quot;.bps&quot;); invalidExtensionSet.add(&quot;.capxml&quot;); invalidExtensionSet.add(&quot;.bqf&quot;); invalidExtensionSet.add(&quot;.pr&quot;); invalidExtensionSet.add(&quot;.qit&quot;); invalidExtensionSet.add(&quot;.xnt&quot;); invalidExtensionSet.add(&quot;.lpaq5&quot;); invalidExtensionSet.add(&quot;.lok&quot;); invalidExtensionSet.add(&quot;.shs&quot;); invalidExtensionSet.add(&quot;.mcs&quot;); invalidExtensionSet.add(&quot;.dmg&quot;); invalidExtensionSet.add(&quot;.grp&quot;); invalidExtensionSet.add(&quot;.ocx&quot;); invalidExtensionSet.add(&quot;.ovl&quot;); invalidExtensionSet.add(&quot;.vdl&quot;); invalidExtensionSet.add(&quot;.vxd&quot;); invalidExtensionSet.add(&quot;.asp&quot;); invalidExtensionSet.add(&quot;.htx&quot;); invalidExtensionSet.add(&quot;.php&quot;); invalidExtensionSet.add(&quot;.crt&quot;); invalidExtensionSet.add(&quot;.ins&quot;); invalidExtensionSet.add(&quot;.isp&quot;); invalidExtensionSet.add(&quot;.sbs&quot;); invalidExtensionSet.add(&quot;.sct&quot;); invalidExtensionSet.add(&quot;.shb&quot;); invalidExtensionSet.add(&quot;.shd&quot;); invalidExtensionSet.add(&quot;.wst&quot;); } // Valid image mime type set static { validImageTypeSet.add(&quot;image/jpeg&quot;); // .jpg, .jpeg validImageTypeSet.add(&quot;image/x-citrix-jpeg&quot;); // .jpg, .jpeg validImageTypeSet.add(&quot;image/png&quot;); //.png validImageTypeSet.add(&quot;image/x-citrix-png&quot;); //.png validImageTypeSet.add(&quot;image/x-png&quot;); //.png }} MIME type, 파일 확장자 유효성 검사가 수행된다. Apache Tika 라이브러리를 사용하여 파일의 MIME type을 유효성 검사하고, 이후 파일 확장자를 유효성 검사한다. 만약 MIME type과 파일 확장자 유효성 검사에 실패한다면 에러 메시지가 Controller에 반환되고, 유효성 검사에 성공한다면 “valid” 문자열이 반환된다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/common/validation/FileValidator.java&amp;gt;package kr.ac.univ.common.validation;import java.io.IOException;import kr.ac.univ.util.FileUtil;import org.apache.tika.Tika;import org.springframework.web.multipart.MultipartFile;import lombok.extern.slf4j.Slf4j;@Slf4jpublic class FileValidator { /** * file type이 유효한지 검사 * * @param files * @return * @throws IOException */ public static String isFileValid(MultipartFile[] files) throws IOException { Tika tika = new Tika(); String result = &quot;valid&quot;; for (MultipartFile file : files) { String mimeType = tika.detect(file.getBytes()); String extension = FileUtil.getExtension(file.getOriginalFilename()); if (FileType.invalidMimeTypeSet.contains(mimeType)) { log.info(mimeType + &quot;, &quot; + extension); result = &quot;The file &quot; + file.getOriginalFilename() + &quot; [mime type: &quot; + mimeType + &quot;] doesn&#39;t support to upload because it supposed to dangerous and malicious.&quot;; break; } if (FileType.invalidExtensionSet.contains(extension)) { log.info(mimeType + &quot;, &quot; + extension); result = &quot;The file &quot; + file.getOriginalFilename() + &quot; [extension: &quot; + extension + &quot;] doesn&#39;t support to upload because it supposed to dangerous and malicious.&quot;; break; } } return result; } public static String isImageFileValid(MultipartFile[] files) throws IOException { Tika tika = new Tika(); String result = &quot;valid&quot;; for (MultipartFile file : files) { String mimeType = tika.detect(file.getBytes()); String extension = FileUtil.getExtension(file.getOriginalFilename()); log.info(mimeType + &quot;, &quot; + extension); if (!FileType.validImageTypeSet.contains(mimeType)) { result = &quot;The file &quot; + file.getOriginalFilename() + &quot;[mimet ype: &quot; + mimeType + &quot;] doesn&#39;t support to upload because it supposed to not image type.&quot;; break; } } return result; }} NoticeBoard 관련 클라이언트의 요청을 json 타입으로 응답한다. View에서 전달되는 파일에 대해서 MimeType과 파일 확장자 유효성 검사가 수행된다. MimeType과 파일 확장자 유효성 검사에 실패한다면(Service에서 반환한 문자열이 에러 메시지인 경우), FileTypeException 예외가 발생하고 해당 예외는 전역에서 예외처리 된다.&amp;lt;module-app-api/src/main/java/kr/ac/univ/controller/NoticeBoardRestController.java&amp;gt;... // 첨부 파일 업로드 @PostMapping(&quot;/attachedFile&quot;) public ResponseEntity&amp;lt;?&amp;gt; uploadAttachedFile(Long idx, String createdBy, MultipartFile[] files) throws Exception { String fileValidationResult = FileValidator.isFileValid(files); // 파일 mime type 검사 if (!&quot;valid&quot;.equals(fileValidationResult)) { throw new FileTypeException(fileValidationResult); } noticeBoardAttachedFileService.uploadAttachedFile(idx, createdBy, files); return new ResponseEntity&amp;lt;&amp;gt;(&quot;{}&quot;, HttpStatus.CREATED); }...예외처리 메소드 또는 컨트롤로러에서 예외를 처리하지 못한다면, @RestControllerAdvice 애노테이션이 선언된 클래스가 전역에서 예외처리를 수행된다. 메소드에 선언된 @ExceptionHandler 애노테이션 통하여 지정한 예외를 처리한다. 또한 사용자에게 전달되는 예외 메시지가 일관성을 가지기 위해서, 예외 데이터를 저장하는 ErrorResponse 클래스를 생성하였다. 예외 관련 데이터는 ErrorResponse 클래스에 초기화된 다음 클라이언트에 응답한다. 각 예외에 대한 설명은 주석을 참고하면 된다.&amp;lt;module-web-core/src/main/java/kr/ac/univ/handler/GlobalExceptionHandler.java&amp;gt;package kr.ac.univ.handler;import kr.ac.univ.error.ErrorCode;import kr.ac.univ.error.ErrorResponse;import kr.ac.univ.exception.BusinessException;import kr.ac.univ.exception.FileTypeException;import lombok.extern.slf4j.Slf4j;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.security.access.AccessDeniedException;import org.springframework.validation.BindException;import org.springframework.web.HttpRequestMethodNotSupportedException;import org.springframework.web.bind.MethodArgumentNotValidException;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.bind.annotation.RestControllerAdvice;import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;import org.springframework.web.multipart.MaxUploadSizeExceededException;@RestControllerAdvice@Slf4jpublic class GlobalExceptionHandler { /** * @Valid binding error가 발생할 때 발생 */ @ExceptionHandler(MethodArgumentNotValidException.class) protected ResponseEntity&amp;lt;ErrorResponse&amp;gt; handleMethodArgumentNotValidException(MethodArgumentNotValidException e) { log.error(&quot;handleMethodArgumentNotValidException&quot;, e); final ErrorResponse response = ErrorResponse.of(ErrorCode.INVALID_INPUT_VALUE, e.getBindingResult()); return new ResponseEntity&amp;lt;&amp;gt;(response, HttpStatus.BAD_REQUEST); } /** * @ModelAttribute bindingResult error가 발생할 때 발생 */ @ExceptionHandler(BindException.class) protected ResponseEntity&amp;lt;ErrorResponse&amp;gt; handleBindException(BindException e) { log.error(&quot;handleBindException&quot;, e); final ErrorResponse response = ErrorResponse.of(ErrorCode.INVALID_TYPE_VALUE, e.getBindingResult()); return new ResponseEntity&amp;lt;&amp;gt;(response, HttpStatus.BAD_REQUEST); } /** * enum type binding error가 발생할 때 발생 */ @ExceptionHandler(MethodArgumentTypeMismatchException.class) protected ResponseEntity&amp;lt;ErrorResponse&amp;gt; handleMethodArgumentTypeMismatchException(MethodArgumentTypeMismatchException e) { log.error(&quot;handleMethodArgumentTypeMismatchException&quot;, e); final ErrorResponse response = ErrorResponse.of(e); return new ResponseEntity&amp;lt;&amp;gt;(response, HttpStatus.BAD_REQUEST); } /** * 지원하지 않은 HTTP method를 호출 할 때 발생 */ @ExceptionHandler(HttpRequestMethodNotSupportedException.class) protected ResponseEntity&amp;lt;ErrorResponse&amp;gt; handleHttpRequestMethodNotSupportedException(HttpRequestMethodNotSupportedException e) { log.error(&quot;handleHttpRequestMethodNotSupportedException&quot;, e); final ErrorResponse response = ErrorResponse.of(ErrorCode.METHOD_NOT_ALLOWED); return new ResponseEntity&amp;lt;&amp;gt;(response, HttpStatus.METHOD_NOT_ALLOWED); } /** * Authentication 객체가 필요한 권한을 보유하지 않은 경우 발생 */ @ExceptionHandler(AccessDeniedException.class) protected ResponseEntity&amp;lt;ErrorResponse&amp;gt; handleAccessDeniedException(AccessDeniedException e) { log.error(&quot;handleAccessDeniedException&quot;, e); final ErrorResponse response = ErrorResponse.of(ErrorCode.HANDLE_ACCESS_DENIED); return new ResponseEntity&amp;lt;&amp;gt;(response, HttpStatus.valueOf(ErrorCode.HANDLE_ACCESS_DENIED.getStatus())); } /** * multipart에서 설정한 file size보다 큰 파일이 업로드 되는 경우 발생 */ @ExceptionHandler(MaxUploadSizeExceededException.class) protected ResponseEntity&amp;lt;?&amp;gt; handleMaxUploadSizeExceededException(MaxUploadSizeExceededException e) { log.error(&quot;handleMaxUploadSizeExceededException&quot;, e); final ErrorResponse response = ErrorResponse.of(ErrorCode.FILE_SIZE_ERROR); return new ResponseEntity&amp;lt;&amp;gt;(response, HttpStatus.BAD_REQUEST); } /** * file type이 위험하고 악의적인 것으로 판별되는 경우 발생 */ @ExceptionHandler(FileTypeException.class) protected ResponseEntity&amp;lt;?&amp;gt; handleFileTypeException(Exception e) { log.error(&quot;handleFileTypeException&quot;, e); final ErrorResponse response = ErrorResponse.of(ErrorCode.FILE_TYPE_ERROR, e.getMessage()); return new ResponseEntity&amp;lt;&amp;gt;(response, HttpStatus.BAD_REQUEST); } /** * 비즈니스 요구사항에 따른 Exception * 비즈니스 요구사항에 예외일 경우 BusinessException으로 통일성 있게 처리 * 추가로 늘어날 수는 있지만 exception 개수를 최소화 해야함 */ @ExceptionHandler(BusinessException.class) protected ResponseEntity&amp;lt;ErrorResponse&amp;gt; handleBusinessException(final BusinessException e) { log.error(&quot;handleBusinessException&quot;, e); final ErrorCode errorCode = e.getErrorCode(); final ErrorResponse response = ErrorResponse.of(errorCode); return new ResponseEntity&amp;lt;&amp;gt;(response, HttpStatus.valueOf(errorCode.getStatus())); } /** * 그 밖에 발생하는 모든 예외 처리, Null Point Exception 등 * 개발자가 직접 핸들링해서 다른 예외로 던지지 않으면 발생 */ @ExceptionHandler(Exception.class) protected ResponseEntity&amp;lt;ErrorResponse&amp;gt; handleException(Exception e) { log.error(&quot;handleException&quot;, e); final ErrorResponse response = ErrorResponse.of(ErrorCode.INTERNAL_SERVER_ERROR); return new ResponseEntity&amp;lt;&amp;gt;(response, HttpStatus.INTERNAL_SERVER_ERROR); }} ErrorCode는 ErrorResponse 클래스에 저장되는 예외 메시지 관련 데이터 중 예외 코드에 대한 사용자 정의 enum 클래스다. ErrorCode는 HTTP 상태 코드, 에러 코드, 에러 메시지로 구성되며 추후 예외가 추가 되면 에러 코드를 추가할 예정이다. 예외가 발생할 때 사용자에게 전달하는 예외 관련 데이터는 크게 두 가지 종류로 분류할 수 있다. 해당 데이터는 유효성 검사에 실패한 경우 클라이언트에 에러 메시지로(json 자료형이 아님) 전달된다. 첫 번째는 새로운 예외가 발생할 때 생성자를 통해 예외 메시지를 초기화 하는 방법이다.(new Exception(“Error message”);) 해당 메시지를 json 자료형으로 형변환 하면, 에러 메시지를 errors 배열에서 확인할 수 있다. 두 번째는 ErrorResponse의 ErrorCode enum 자료형을 통해 에러 메시지 데이터에 의해서 초기화 된다. 해당 메시지를 json 자료형으로 형변환 하면, 에러 메시지를 message json에서 확인할 수 있다.&amp;lt;module-web-core/src/main/java/kr/ac/univ/error/ErrorCode.java&amp;gt;package kr.ac.univ.error;import com.fasterxml.jackson.annotation.JsonFormat;@JsonFormat(shape = JsonFormat.Shape.OBJECT)public enum ErrorCode { // Common INVALID_INPUT_VALUE(400, &quot;C001&quot;, &quot;The input value is invalid.&quot;), INVALID_TYPE_VALUE(400, &quot;C002&quot;, &quot; Invalid Type Value.&quot;), METHOD_NOT_ALLOWED(405, &quot;C003&quot;, &quot; The Method is not allowed.&quot;), HANDLE_ACCESS_DENIED(403, &quot;C004&quot;, &quot;Access is Denied.&quot;), INTERNAL_SERVER_ERROR(500, &quot;C005&quot;, &quot;Internal Server Error.&quot;), // File FILE_SIZE_ERROR(500, &quot;F001&quot;, &quot;The file size must be less than 20 MB.&quot;), FILE_TYPE_ERROR(500, &quot;F002&quot;, &quot;The file type is supposed to dangerous and malicious.&quot;), // User INVALID_USERNAME(500, &quot;U001&quot;, &quot;The ID is duplicated or ID can be used for more than 6 characters and less than 16 characters.&quot;) ; private final String code; private final String message; private int status; ErrorCode(final int status, final String code, final String message) { this.status = status; this.message = message; this.code = code; } public String getMessage() { return this.message; } public String getCode() { return code; } public int getStatus() { return status; }} ErrorResponse 클래스는 예외 메시지 관련 데이터를 저장하는 클래스다. 전달되는 파라미터에 따라 다양한 경우의 클래스를 초기화 하기 위한 생성자와 메소드로 구성된다.&amp;lt;module-web-core/src/main/java/kr/ac/univ/error/ErrorResponse.java&amp;gt;package kr.ac.univ.error;import java.util.ArrayList;import java.util.List;import java.util.stream.Collectors;import lombok.AccessLevel;import lombok.Getter;import lombok.NoArgsConstructor;import lombok.ToString;import org.springframework.validation.BindingResult;import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;@Getter@ToString@NoArgsConstructor(access = AccessLevel.PROTECTED)public class ErrorResponse { private String message; private String code; private List&amp;lt;FieldError&amp;gt; errors; private ErrorResponse(final ErrorCode code, final List&amp;lt;FieldError&amp;gt; errors) { this.message = code.getMessage(); this.code = code.getCode(); this.errors = errors; } private ErrorResponse(final ErrorCode code) { this.message = code.getMessage(); this.code = code.getCode(); this.errors = new ArrayList&amp;lt;&amp;gt;(); } private ErrorResponse(final ErrorCode code, final String message) { this.message = message; this.code = code.getCode(); this.errors = new ArrayList&amp;lt;&amp;gt;(); } public static ErrorResponse of(final ErrorCode code, final BindingResult bindingResult) { return new ErrorResponse(code, FieldError.of(bindingResult)); } public static ErrorResponse of(final ErrorCode code) { return new ErrorResponse(code); } public static ErrorResponse of(final ErrorCode code, String message) { return new ErrorResponse(code, message); } public static ErrorResponse of(final ErrorCode code, final List&amp;lt;FieldError&amp;gt; errors) { return new ErrorResponse(code, errors); } public static ErrorResponse of(MethodArgumentTypeMismatchException e) { final String value = e.getValue() == null ? &quot;&quot; : e.getValue().toString(); final List&amp;lt;ErrorResponse.FieldError&amp;gt; errors = ErrorResponse.FieldError.of(e.getName(), value, e.getErrorCode()); return new ErrorResponse(ErrorCode.INVALID_TYPE_VALUE, errors); } @Getter @NoArgsConstructor(access = AccessLevel.PROTECTED) public static class FieldError { private String field; private String value; private String reason; private FieldError(final String field, final String value, final String reason) { this.field = field; this.value = value; this.reason = reason; } public static List&amp;lt;FieldError&amp;gt; of(final String field, final String value, final String reason) { List&amp;lt;FieldError&amp;gt; fieldErrors = new ArrayList&amp;lt;&amp;gt;(); fieldErrors.add(new FieldError(field, value, reason)); return fieldErrors; } private static List&amp;lt;FieldError&amp;gt; of(final BindingResult bindingResult) { final List&amp;lt;org.springframework.validation.FieldError&amp;gt; fieldErrors = bindingResult.getFieldErrors(); return fieldErrors.stream() .map(error -&amp;gt; new FieldError( error.getField(), error.getRejectedValue() == null ? &quot;&quot; : error.getRejectedValue().toString(), error.getDefaultMessage())) .collect(Collectors.toList()); } }} BussinessException 클래스는 사용자 정의 예외다. 비즈니스 로직에서 예외가 발생하는 경우 예외 메시지 관련 데이터를 초기화하기 위한 생성자가 있다.&amp;lt;module-web-core/src/main/java/kr/ac/univ/exception/BusinessException.java&amp;gt;package kr.ac.univ.exception;import kr.ac.univ.error.ErrorCode;public class BusinessException extends RuntimeException { private ErrorCode errorCode; public BusinessException(String message) { super(message); } public BusinessException(String message, ErrorCode errorCode) { super(message); this.errorCode = errorCode; } public BusinessException(ErrorCode errorCode) { super(errorCode.getMessage()); this.errorCode = errorCode; } public ErrorCode getErrorCode() { return errorCode; }} FileTypeException 클래스는 사용자 정의 예외다. 파일 유효성 검사에서 예외가 발생하는 경우 예외 메시지 관련 데이터를 초기화하기 위한 생성자가 있다.&amp;lt;module-web-core/src/main/java/kr/ac/univ/exception/FileTypeException.java&amp;gt;package kr.ac.univ.exception;public class FileTypeException extends BusinessException { public FileTypeException(String message) { super(message); }} InvalidUsernameException 클래스는 사용자 정의 예외다. 사용자 로그인시 ID가 유효하지 않아 예외가 발생하는 경우 예외 메시지 관련 데이터를 초기화하기 위한 생성자가 있다.&amp;lt;module-web-core/src/main/java/kr/ac/univ/exception/InvalidUsernameException.java&amp;gt;package kr.ac.univ.exception;import kr.ac.univ.error.ErrorCode;public class InvalidUsernameException extends BusinessException { public InvalidUsernameException() { super(ErrorCode.INVALID_USERNAME); }} 서버에서 예외 처리하여 사용자에게 전달된 에러 메시지를 View에서 parsing 하여 출력하는 함수다.&amp;lt;module-app-web/src/main/resources/static/js/validation.js&amp;gt;/** validation response message alert*/function paraseErrorMsg(msg) { var parseMsg = JSON.parse(msg.responseText); var alertMsg = null; if (isEmpty(parseMsg.errors)) { alertMsg = parseMsg.message; } else { alertMsg = parseMsg.message + &quot;\\n&quot; + parseMsg.errors[0].reason; } alert(alertMsg);} Javsacript: 객체가 비어있는지 확인하는 함수다.&amp;lt;module-app-web/src/main/resources/static/js/util.js&amp;gt;/* 객체 empty 여부 반환 */function isEmpty(obj) { for(var prop in obj) { if(obj.hasOwnProperty(prop)) return false; } return true;} ajax를 통하여 요청하는 경우 에러가 발생하여 에러 메시지를 받는다면, parseErrorMsg 함수를 통하여 받은 메시지를 사용자에게 alert 경고창으로 알려준다.&amp;lt;module-app-web/src/main/resources/templates/noticeBoard/form.html&amp;gt;$.ajax({ url: &quot;http://localhost:8081/api/notice-boards/attachedFile&quot;, type: &quot;post&quot;, data: formData, dataType: &quot;text&quot;, enctype: &#39;multipart/form-data&#39;, processData: false, contentType: false, async: false,}) .done(function (msg) { location.href = &quot;/notice-board?idx=&quot; + noticeBoardIdx; }) .fail(function (msg) { paraseErrorMsg(msg); console.log(&quot;Update attached file is fail.&quot;); deleteNoticeBoard(noticeBoardIdx); });프로젝트 실행 및 결과 벡엔드에서 title(@NotBlank)의 유효성 검사에 실패할 때 다음 이미지와 같이 응답 메시지를 확인할 수 있다. 벡엔드에서 title(@NotBlank)의 유효성 검사에 실패할 때 다음 이미지와 같이 응답 메시지를 확인할 수 있다. 20 MB 보다 큰 파일을 업로드 할 때 유효성 검사에 실패할 때 발생하는 에러 메시지다. 파일 MimeType 유효성 검사와 파일 확장가 검사에 실패하여 발생하는에러 메시지다." }, { "title": "Project Lab 14. 유효성 검사(javascript) - 1", "url": "/posts/Project-Lab14/", "categories": "Web, Project Lab", "tags": "", "date": "2020-09-10 00:00:00 +0900", "snippet": " Javsacript를 사용하여 입력값(text, file) 유효성 검사 과정을 소개한다. github: https://github.com/scribnote5/lab github commit: https://github.com/scribnote5/lab/commit/d56a9dc8d29344f4640f474d41ad86e2169ae7f4 최신 프로젝트 코드와 형상이 다를 수 있습니다. 게시글 코드는 참고만 하시되, 최신 코드는 github에서 확인 부탁드립니다.유효성 검사(Validation) 유효성 검사를 수행하는 이유는 웹페이지에 접근하는 사용자를 신뢰할 수 없기 때문이다. 사용자는 개발자가 예상하지 못하는 행동을 할 수 있다. 예를 들어 회원가입을 해야하는 사용자는 필수 항목(비밀번호 등)을 입력하지 않고 신청 버튼을 누를 수 있고 영어로 입력해야 하는 항목에 한글을 입력할 사용자도 있을 수 있다. 유효성 검사는 프론트엔드(html, javascript), 백엔드(java) 둘 다 진행해야 한다. 사용자가 실수로 비정상적인 값을 입력하는 경우 프론트엔드에서 유효성 검사를 하면 백엔드에 전달되지 않는다. 하지만 프론트엔드는 개발자 도구로 편집이 가능하며, 이를 통해 프론트엔드 유효성 검사를 회피하여 비정상적인 요청을 시도할 수 있다. 또한 javascript는 브라우저 엔진에 따라 다르게 동작할 수 있고, 개발자가 예상하지 못하는 다양한 예외를 고려해야 한다. 그러므로 개발자는 백엔드에서도 요청에 대한 유효성 검사를 수행해야 한다. 게시글에서는 프론트엔드엔드 text와 file 입력값 유효성 검사 과정을 소개한다.출처: https://www.theteams.kr/teams/1092/post/67641https://jojoldu.tistory.com/157Util Javascript: 유효성 검사에서 사용되는 함수다. validateByLength: 문자열이 공백 문자 및 공란이거나 제한한 최대 문자열 개수보다 큰 경우 alert 메시지를 출력한다. validateBySize: 문자열이 제한한 최대 byte 보다 큰 경우 alert 메시지를 출력한다. validateImageFile: 유효한 이미지 파일 확장자(“.jpg”, “.jpeg”, “.png”)이 아닌 경우 alert 메시지를 출력한다. validateFile: 유효하지 파일 확장자(“.exe”, “.jar”, “.js”, “.swf”, “.swf”, “.bin”, “.wmf”, “.class”, “.chm”, “.pgm”, “.pcx”, “.hlp”, “.acc”, “.css”, “.sh”, “.com”, “bat”, “cmd”, “.scf”, “.lnk”, “.inf”, “.reg”)인 경우 alert 메시지를 출력한다. 해당 확장자를 사용하는 파일은 악의적인 공격을 할 수 있기에 의심되므로 차단한다.출처: https://cofs.tistory.com/267&amp;lt;module-app-web/src/main/resources/static/js/validation.js&amp;gt;/* 공백 문자 검사 */function validateSpaceChar(str) { if(str.search(/\\s/) != -1) { return true; } else { return false; }}/* 공백 문자 및 공란 검사 */function validateEmpty(str) { if(str.search(/\\s/) != -1 || str.length == 0) { return true; } else { return false; }}/* 특수 문자 검사 */function validateSpecialChar(str) { var regExp = /[`~!@#$%^&amp;amp;*|\\\\\\&#39;\\&quot;;:\\/?]/gi; if(regExp.test(str) == true) { return true; } else { return false; }}/* 바이트 수 반환 */function getByteSize(el){ var codeByte = 0; for (var idx = 0; idx &amp;lt; el.length; idx++) { var oneChar = escape(el.charAt(idx)); if ( oneChar.length == 1 ) { codeByte ++; } else if (oneChar.indexOf(&quot;%u&quot;) != -1) { codeByte += 2; } else if (oneChar.indexOf(&quot;%&quot;) != -1) { codeByte ++; } } return codeByte;}/* input tag validation - 문자열 길이 */function validateByLength(inputName, maxStrLength, title) { var strLength = document.getElementsByName(inputName)[0].value.length; if(strLength &amp;gt; maxStrLength) { alert(&quot;The &quot; + title + &quot; is up to &quot; + maxStrLength + &quot; characters long.&quot; + &quot;\\n(Number of characters currently entered: &quot; + strLength + &quot;)&quot;); document.getElementsByName(inputName)[0].focus(); return false; } else if(validateEmpty(document.getElementsByName(inputName)[0].value)) { alert(&quot;The &quot; + title + &quot; must not be blank.&quot;); document.getElementsByName(inputName)[0].focus(); return false; } else { return true; }}/* input tag validation - 문자열 크기 */function validateBySize(inputName, maxByteSize, title) { var byteSize = getByteSize(document.getElementsByName(inputName)[0].value); if(byteSize &amp;gt; maxByteSize) { alert(&quot;The &quot; + title + &quot;is up to &quot; + maxByteSize + &quot; bytes size.&quot; + &quot;\\n(Size of characters currently entered: &quot; + byteSize + &quot; bytes).&quot;); document.getElementsByName(inputName)[0].focus(); return false; } else { return true; }}/** 파일 validation - 필수 확장자** [전역 변수 선언 필요]* var totalFileSize = 0;*/function validateImageFile(file) { // file validation - 필수 확장자 var includeArray = [ &quot;.jpg&quot;, &quot;.jpeg&quot;, &quot;.png&quot; ]; // 파일 이름 var fileName = file.name; // 파일 확장자명(대문자를 소문자로 변경) var extensionName = fileName.substring( fileName.lastIndexOf(&quot;.&quot;)).toLowerCase(); // 필수 확장자명 사용 여부 판단 var result = false; // 첨부 파일 크기 var fileSize = file.size; // 업로드 가능한 파일 크기: 20 MB var maxSize = 20 * 1024 * 1024; // 첨부 파일이 있는 경우 if (fileName != &quot;&quot;) { /* 확장자명 검사 */ for (var j = 0; j &amp;lt; includeArray.length; j++) { if (extensionName == includeArray[j]) { result = true; break; } } if (!result) { alert(&quot;The attached file only uses [&quot; + includeArray.join(&#39;, &#39;) + &quot;] extension. &quot;); $(&quot;#file&quot;).replaceWith($(&quot;#file&quot;).clone(true)); $(&quot;#file&quot;).val(&#39;&#39;); return false; } /* 파일 크기 검사 */ if (fileSize &amp;gt; maxSize) { alert(&quot;The attached file can upload within 20 MB size.&quot;); $(&quot;#file&quot;).replaceWith($(&quot;#file&quot;).clone(true)); $(&quot;#file&quot;).val(&#39;&#39;); return false; } /* 모든 파일 크기 검사 */ if(fileSize + totalFileSize &amp;gt; maxSize) { alert(&quot;All attached files must be within 20 MB size.&quot;); $(&quot;#file&quot;).replaceWith($(&quot;#file&quot;).clone(true)); $(&quot;#file&quot;).val(&#39;&#39;); return false; } totalFileSize += fileSize; } return true;}/** 파일 validation - 유효한 파일 확장자** [전역 변수 선언 필요]* var totalFileSize = 0;*/function validateFile(file) { // file validation - 제외 파일 확장자 var excludeArray = [ &quot;.exe&quot;, &quot;.jar&quot;, &quot;.js&quot;, &quot;.swf&quot;, &quot;.swf&quot;, &quot;.bin&quot;, &quot;.wmf&quot;, &quot;.class&quot;, &quot;.chm&quot;, &quot;.pgm&quot;, &quot;.pcx&quot;, &quot;.hlp&quot;, &quot;.acc&quot;, &quot;.css&quot;, &quot;.sh&quot;, &quot;.com&quot;, &quot;bat&quot;, &quot;cmd&quot;, &quot;.scf&quot;, &quot;.lnk&quot;, &quot;.inf&quot;, &quot;.reg&quot; ]; // 파일 이름 var fileName = file.name; // 파일 확장자명(대문자를 소문자로 변경) var extensionName = fileName.substring( fileName.lastIndexOf(&quot;.&quot;)).toLowerCase(); // 첨부 파일 크기 var fileSize = file.size; // 업로드 가능한 파일 크기: 20 MB var maxSize = 20 * 1024 * 1024; if (fileName != &quot;&quot;) { /* 확장자명 검사 */ for (var i = 0; i &amp;lt; excludeArray.length; i++) { if (extensionName == excludeArray[i]) { alert(&quot;[&quot; + extensionName + &quot;] extension doesn&#39;t support uploading attached file.&quot; ); $(&quot;#file&quot;).val(&#39;&#39;); $(&quot;#file&quot;).replaceWith($(&quot;#file&quot;).clone(true)); return false; } } /* 파일 크기 검사 */ if (fileSize &amp;gt; maxSize) { alert(&quot;The attached file can upload within 20 MB size.&quot;); $(&quot;#file&quot;).replaceWith($(&quot;#file&quot;).clone(true)); $(&quot;#file&quot;).val(&#39;&#39;); return false; } /* 모든 파일 크기 검사 */ if(fileSize + totalFileSize &amp;gt; maxSize) { alert(&quot;All attached files must be within 20 MB size.&quot;); $(&quot;#file&quot;).replaceWith($(&quot;#file&quot;).clone(true)); $(&quot;#file&quot;).val(&#39;&#39;); return false; } totalFileSize += fileSize; } return true;}View 유효성 검사 예제는 user/form.html 페이지로 설명한다. usernameVaildation(ID 중복 검사 여부), passwordVaildation(password와 passwordCheck 값이 같은지 검사 여부), emailVaildation(유효한 이메일 주소 검사 여부), privateEmailVaildation(유효한 이메일 주소 검사 여부), contactVaildation(유효한 연락처 검사 여부) 전역 변수를 선언하여 각 해당되는 유효성 검사가 통과된 경우에만 서버에 요청을 보낼 수 있다. validateImageFile: 업로드 하려는 파일이 유효한 이미지 파일 확장자(“.jpg”, “.jpeg”, “.png”) 인지 검사한다. 드래그앤드랍 이벤트로 파일 업로드 하는 경우와 input type=”file”를 사용하여 파일 업로드 하는 경우 모두 유효성 검사를 수행한다.&amp;lt;module-app-web/src/main/resources/templates/user/form.html&amp;gt;&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&amp;gt;&amp;lt;head&amp;gt; &amp;lt;!-- css --&amp;gt; &amp;lt;th:block th:replace=&quot;layout/css.html&quot;&amp;gt;&amp;lt;/th:block&amp;gt; &amp;lt;title&amp;gt;NoticeBoard Form&amp;lt;/title&amp;gt; &amp;lt;style&amp;gt; .fileDrop { width: 300px; height: 75px; margin: 10px 0px 10px; border: 1px dotted blue; } &amp;lt;/style&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;!-- header --&amp;gt;&amp;lt;div th:replace=&quot;layout/header::header&quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&quot;container&quot;&amp;gt; &amp;lt;form name=&quot;form&quot; id=&quot;form&quot; th:object=&quot;${noticeBoardDto}&quot; action=&quot;#&quot;&amp;gt; &amp;lt;div class=&quot;page-header&quot;&amp;gt; &amp;lt;h1 th:if=&quot;!*{idx}&quot;&amp;gt;NoticeBoard Register&amp;lt;/h1&amp;gt; &amp;lt;h1 th:if=&quot;*{idx}&quot;&amp;gt;NoticeBoard Update&amp;lt;/h1&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;br/&amp;gt; &amp;lt;table class=&quot;table&quot; style=&quot;table-layout:fixed; word-break:break-all;&quot;&amp;gt; &amp;lt;colgroup&amp;gt; &amp;lt;col width=&quot;15%&quot;/&amp;gt; &amp;lt;col width=&quot;85%&quot;/&amp;gt; &amp;lt;/colgroup&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;Active Status&amp;lt;/th&amp;gt; &amp;lt;td&amp;gt; &amp;lt;div class=&quot;pull-left&quot;&amp;gt; &amp;lt;select name=&quot;activeStatus&quot; th:field=&quot;*{activeStatus}&quot; class=&quot;form-control input-sm&quot;&amp;gt; &amp;lt;option th:value=&quot;ACTIVE&quot;&amp;gt;Active&amp;lt;/option&amp;gt; &amp;lt;option th:value=&quot;INACTIVE&quot;&amp;gt;Inactive&amp;lt;/option&amp;gt; &amp;lt;/select&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr th:if=&quot;*{idx}&quot;&amp;gt; &amp;lt;th&amp;gt;Created Date&amp;lt;/th&amp;gt; &amp;lt;td&amp;gt;&amp;lt;input type=&quot;text&quot; class=&quot;col-md-1 form-control input-sm&quot; readonly=&quot;readonly&quot; th:value=&quot;*{#temporals.format(createdDate,&#39;yyyy-MM-dd HH:mm&#39;)}&quot;/&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr th:if=&quot;*{idx}&quot;&amp;gt; &amp;lt;th&amp;gt;Modified Date&amp;lt;/th&amp;gt; &amp;lt;td&amp;gt;&amp;lt;input type=&quot;text&quot; class=&quot;col-md-1 form-control input-sm&quot; readonly=&quot;readonly&quot; th:value=&quot;*{#temporals.format(lastModifiedDate,&#39;yyyy-MM-dd HH:mm&#39;)}&quot;/&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;Title&amp;lt;/th&amp;gt; &amp;lt;td&amp;gt;&amp;lt;input type=&quot;text&quot; name=&quot;title&quot; id=&quot;title&quot; class=&quot;col-md-1 form-control input-sm&quot; th:value=&quot;*{title}&quot;/&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;Attached File&amp;lt;/th&amp;gt; &amp;lt;td&amp;gt; &amp;lt;input type=&quot;file&quot; multiple=&quot;multiple&quot; name=&quot;file&quot; id=&quot;file&quot;/&amp;gt; &amp;lt;div id=&quot;fileDrop&quot; class=&quot;fileDrop&quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;Total file size&amp;lt;/th&amp;gt; &amp;lt;td&amp;gt; &amp;lt;div&amp;gt;&amp;lt;span id=&quot;totalFileSize&quot;&amp;gt; 0 MB&amp;lt;/span&amp;gt;, Up to 20 MB&amp;lt;/div&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;Upload Attached File&amp;lt;/th&amp;gt; &amp;lt;td&amp;gt; &amp;lt;div id=&quot;attachedFileList&quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;Uploaded Attached File&amp;lt;/th&amp;gt; &amp;lt;td&amp;gt; &amp;lt;div id=&quot;uploadedAttachedFileList&quot; th:each=&quot;attachedFile : *{attachedFileList}&quot;&amp;gt; &amp;lt;div th:id=&quot;imgData + ${attachedFileStat.index}&quot;&amp;gt; &amp;lt;span th:text=&quot;${attachedFile.fileName} + &#39;,&amp;amp;nbsp;&#39; + &#39;File Size: &#39; + ${attachedFile.fileSize} + &#39;&amp;amp;nbsp;&#39;&quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;img th:attr=&quot;src=@{|/images/cancel.png|}, onclick=|deleteFile(&#39;${attachedFileStat.index}&#39;,&#39;${attachedFile.idx}&#39;,&#39;${attachedFile.savedFileName}&#39;)|&quot; th:style=&quot;&#39;width: 16px; height: 16px&#39;&quot;/&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/table&amp;gt; &amp;lt;div class=&quot;pull-left&quot;&amp;gt; &amp;lt;a href=&quot;/notice-board/list&quot; class=&quot;btn btn-default&quot;&amp;gt;Move to List&amp;lt;/a&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&quot;pull-right&quot;&amp;gt; &amp;lt;button th:if=&quot;!*{idx}&quot; id=&quot;insert&quot; type=&quot;button&quot; class=&quot;btn btn-primary&quot;&amp;gt;Register&amp;lt;/button&amp;gt; &amp;lt;button th:if=&quot;*{idx}&quot; id=&quot;update&quot; type=&quot;button&quot; class=&quot;btn btn-info&quot;&amp;gt;Update&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;!-- input type=&quot;hidden&quot; --&amp;gt; &amp;lt;input type=&quot;hidden&quot; name=&quot;idx&quot; th:value=&quot;*{idx}&quot;/&amp;gt; &amp;lt;input type=&quot;hidden&quot; name=&quot;createdBy&quot; th:value=&quot;*{#strings.isEmpty(createdBy)} ? ${#authentication.principal.username} : *{createdBy}&quot;/&amp;gt; &amp;lt;input type=&quot;hidden&quot; name=&quot;lastModifiedBy&quot; th:value=&quot;${#authentication.principal.username}&quot;/&amp;gt; &amp;lt;/form&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- footer --&amp;gt;&amp;lt;div th:replace=&quot;layout/footer::footer&quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- script file --&amp;gt;&amp;lt;th:block th:replace=&quot;layout/script.html&quot;&amp;gt;&amp;lt;/th:block&amp;gt;&amp;lt;!-- javascript --&amp;gt;&amp;lt;script th:inline=&quot;javascript&quot;&amp;gt; var totalFileSize = 0; var exit = null; var usernameVaildation = false; var passwordVaildation = false; var emailVaildation = false; var privateEmailVaildation = false; var contactVaildation = false; function deleteUser(userIdx) { // 회원 삭제 $.ajax({ url: &quot;http://localhost:8081/api/users/&quot; + document.getElementsByName(&quot;idx&quot;)[0].value, type: &quot;delete&quot;, dataType: &quot;text&quot;, contentType: &quot;application/json&quot;, async: false, }) .done(function (msg) { }) .fail(function (msg) { console.log(&quot;Delete user is fail.&quot;); }); } /* username 검사 */ $(&quot;#username&quot;).on(&quot;change&quot;, function () { var strLength = document.getElementsByName(&quot;username&quot;)[0].value.length; if (strLength &amp;gt; 16 || strLength &amp;lt; 6) { alert(&quot;The ID can be used for more than 6 characters and less than 16 characters.&quot; + &quot;\\n(Number of characters currently entered: &quot; + strLength + &quot;).&quot;); document.getElementsByName(&quot;username&quot;)[0].focus(); document.getElementsByName(&quot;username&quot;)[0].value = &quot;&quot;; document.getElementById(&quot;usernameCheckResult&quot;).innerHTML = &quot;&quot;; return false; } else if (validateEmpty(document.getElementsByName(&quot;username&quot;)[0].value) || validateSpecialChar(document.getElementsByName(&quot;username&quot;)[0].value)) { alert(&quot;The ID must not be blank or contain special character.&quot;); document.getElementsByName(&quot;username&quot;)[0].focus(); document.getElementsByName(&quot;username&quot;)[0].value = &quot;&quot;; document.getElementById(&quot;usernameCheckResult&quot;).innerHTML = &quot;&quot;; return false; } else { return true; } }); /* username 중복 검사 */ $(&quot;#validationUsername&quot;).click(function () { $.ajax({ url: &quot;http://localhost:8081/api/users/validation/username/&quot; + document.getElementsByName(&quot;username&quot;)[0].value, type: &quot;get&quot;, dataType: &quot;text&quot;, contentType: &quot;application/json&quot;, async: false, }) .done(function (msg) { if (msg == &quot;false&quot;) { document.getElementById(&quot;usernameCheckResult&quot;).innerHTML = &quot;This user id is not duplicated.&quot;; document.getElementById(&quot;usernameCheckResult&quot;).style.color = &quot;blue&quot;; usernameVaildation = true; } else { document.getElementById(&quot;usernameCheckResult&quot;).innerHTML = &quot;This user id is already in use.&quot;; document.getElementById(&quot;usernameCheckResult&quot;).style.color = &quot;red&quot;; usernameVaildation = false; } }) .fail(function (msg) { alert(&quot;User id duplicate fail!&quot;); }) }); /* passowrd 검사 */ function validatePassword() { var password = document.getElementsByName(&quot;password&quot;)[0].value; var checkPassword = document.getElementsByName(&quot;checkPassword&quot;)[0].value; if (password.length &amp;gt;= 6 &amp;amp;&amp;amp; password.length &amp;lt;= 16) { if (document.getElementById(&quot;password&quot;).value != &quot;&quot; &amp;amp;&amp;amp; document.getElementById(&quot;checkPassword&quot;).value != &quot;&quot;) { if (document.getElementsByName(&quot;password&quot;)[0].value == document.getElementById(&quot;checkPassword&quot;).value) { document.getElementById(&quot;passwordCheckResult&quot;).innerHTML = &quot;Password matches.&quot;; document.getElementById(&quot;passwordCheckResult&quot;).style.color = &quot;blue&quot;; passwordVaildation = true; } else { document.getElementById(&quot;passwordCheckResult&quot;).innerHTML = &quot;Passwords do not match.&quot;; document.getElementById(&quot;passwordCheckResult&quot;).style.color = &quot;red&quot;; passwordVaildation = false; } } else { passwordVaildation = false; } } else { alert(&quot;The password can be used for more than 6 characters and less than 16 characters.&quot;); document.getElementsByName(&quot;password&quot;)[0].value = &quot;&quot;; document.getElementById(&quot;checkPassword&quot;).value = &quot;&quot;; document.getElementById(&quot;passwordCheckResult&quot;).innerHTML = &quot;&quot;; } } /* email 검사 */ $(&quot;#email&quot;).on(&quot;change&quot;, function () { var regExp = /^(([^&amp;lt;&amp;gt;()[\\]\\\\.,;:\\s@\\&quot;]+(\\.[^&amp;lt;&amp;gt;()[\\]\\\\.,;:\\s@\\&quot;]+)*)|(\\&quot;.+\\&quot;))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; var email = document.getElementsByName(&quot;email&quot;)[0].value; if (regExp.test(email)) { document.getElementById(&quot;emailCheckResult&quot;).innerHTML = &quot;Email format is valid.&quot;; document.getElementById(&quot;emailCheckResult&quot;).style.color = &quot;blue&quot;; emailVaildation = true; } else { document.getElementById(&quot;emailCheckResult&quot;).innerHTML = &quot;Email format is not valid.&quot;; document.getElementById(&quot;emailCheckResult&quot;).style.color = &quot;red&quot;; document.getElementsByName(&quot;email&quot;)[0].value = &quot;&quot;; emailVaildation = false; } }); /* private email 검사 */ $(&quot;#privateEmail&quot;).on(&quot;change&quot;, function () { var regExp = /^(([^&amp;lt;&amp;gt;()[\\]\\\\.,;:\\s@\\&quot;]+(\\.[^&amp;lt;&amp;gt;()[\\]\\\\.,;:\\s@\\&quot;]+)*)|(\\&quot;.+\\&quot;))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; var email = document.getElementsByName(&quot;privateEmail&quot;)[0].value; if (regExp.test(email)) { document.getElementById(&quot;privateEmailCheckResult&quot;).innerHTML = &quot;Email format is valid.&quot;; document.getElementById(&quot;privateEmailCheckResult&quot;).style.color = &quot;blue&quot;; privateEmailVaildation = true; } else { document.getElementById(&quot;privateEmailCheckResult&quot;).innerHTML = &quot;Email format is not valid.&quot;; document.getElementById(&quot;privateEmailCheckResult&quot;).style.color = &quot;red&quot;; document.getElementsByName(&quot;privateEmail&quot;)[0].value = &quot;&quot;; privateEmailVaildation = false; } }); /* 연락처 검사 */ $(&quot;#contact&quot;).on(&quot;change&quot;, function () { var regExp = /(01[016789])-([1-9]{1}[0-9]{2,3})-([0-9]{4})$/; var contact = document.getElementsByName(&quot;contact&quot;)[0].value; if (regExp.test(contact)) { document.getElementById(&quot;contactCheckResult&quot;).innerHTML = &quot;Contact format is valid.&quot;; document.getElementById(&quot;contactCheckResult&quot;).style.color = &quot;blue&quot;; contactVaildation = true; } else { document.getElementById(&quot;contactCheckResult&quot;).innerHTML = &quot;Contact format is not valid.&quot;; document.getElementById(&quot;contactCheckResult&quot;).style.color = &quot;red&quot;; document.getElementsByName(&quot;contact&quot;)[0].value = &quot;&quot;; contactVaildation = false; } }); $(&quot;#file&quot;).on(&quot;change&quot;, function () { if (validateImageFile(this.files[0])) { document.getElementById(&quot;imgData&quot;).innerHTML = this.files[0].name + &quot;, File size: &quot; + convertFileSize(this.files[0].size); readURL(this); } else { return false; } }); function readURL(input) { if (input.files &amp;amp;&amp;amp; input.files[0]) { var reader = new FileReader(); reader.onload = function (e) { $(&#39;#imgPreview&#39;).attr(&#39;src&#39;, e.target.result); } reader.readAsDataURL(input.files[0]); } }&amp;lt;/script&amp;gt;&amp;lt;script th:if=&quot;!${userDto?.idx}&quot;&amp;gt; $(&quot;#insert&quot;).click(function () { // validation if (!usernameVaildation) { alert(&quot;Please check ID duplication.&quot;); document.getElementById(&quot;username&quot;).focus(); return false; } else if (!passwordVaildation) { alert(&quot;Please check password.&quot;); document.getElementById(&quot;password&quot;).focus(); return false; } else if (validateEmpty(document.getElementsByName(&quot;koreanName&quot;)[0].value)) { alert(&quot;Please check korean name.&quot;); document.getElementById(&quot;koreanName&quot;).focus(); return false; } else if (validateEmpty(document.getElementsByName(&quot;englishName&quot;)[0].value)) { alert(&quot;Please check english name.&quot;); document.getElementById(&quot;englishName&quot;).focus(); return false; } else if (validateEmpty(document.getElementsByName(&quot;birthDate&quot;)[0].value)) { alert(&quot;Please check birth date.&quot;); document.getElementById(&quot;birthDate&quot;).focus(); return false; } else if (!emailVaildation) { alert(&quot;Please check email.&quot;); document.getElementById(&quot;email&quot;).focus(); return false; } else if (!privateEmailVaildation) { alert(&quot;Please check private email.&quot;); document.getElementById(&quot;privateEmail&quot;).focus(); return false; } else if (validateEmpty(document.getElementsByName(&quot;messangerId&quot;)[0].value)) { alert(&quot;Please check messanger id.&quot;); document.getElementById(&quot;messangerId&quot;).focus(); return false; } else if (!contactVaildation) { alert(&quot;Please check contact.&quot;); document.getElementById(&quot;contact&quot;).focus(); return false; } // 회원 업로드 var jsonData = $(&quot;#form&quot;).serializeObject(); var userIdx = 0; $.ajax({ url: &quot;http://localhost:8081/api/users&quot;, type: &quot;post&quot;, data: JSON.stringify(jsonData), dataType: &quot;json&quot;, contentType: &quot;application/json&quot;, async: false, }) .done(function (msg) { userIdx = msg; exit = false; }) .fail(function (msg) { console.log(&quot;Register user is fail.&quot;); exit = true; }); if (exit) return false; // 파일 업로드 var formData = new FormData(); formData.append(&quot;files&quot;, document.getElementsByName(&quot;file&quot;)[0].files[0]); formData.append(&quot;idx&quot;, userIdx); formData.append(&quot;createdBy&quot;, document.getElementsByName(&quot;createdBy&quot;)[0].value); $.ajax({ url: &quot;http://localhost:8081/api/users/attachedFile&quot;, type: &quot;post&quot;, data: formData, dataType: &quot;text&quot;, enctype: &quot;multipart/form-data&quot;, processData: false, contentType: false, async: false, }) .done(function (msg) { location.href = &quot;/user?idx=&quot; + userIdx; }) .fail(function (msg) { console.log(&quot;Upload attached file is fail.&quot;); deleteUser(userIdx); }); });&amp;lt;/script&amp;gt;&amp;lt;script th:if=&quot;${userDto?.idx}&quot; th:inline=&quot;javascript&quot;&amp;gt; // 초기 valdiation을 모두 true로 설정한다. passwordVaildation = true; emailVaildation = true; privateEmailVaildation = true; contactVaildation = true; $(&quot;#update&quot;).click(function () { // validation var oriUsername = [[${userDto.username}]]; if ((document.getElementsByName(&quot;username&quot;)[0].value != oriUsername) &amp;amp;&amp;amp; !usernameVaildation) { alert(&quot;Please check ID duplication.&quot;); document.getElementById(&quot;username&quot;).focus(); return false; } else if (!(passwordVaildation)) { alert(&quot;Please check password.&quot;); document.getElementById(&quot;password&quot;).focus(); return false; } else if (validateEmpty(document.getElementsByName(&quot;koreanName&quot;)[0].value)) { alert(&quot;Please check korean name.&quot;); document.getElementById(&quot;koreanName&quot;).focus(); return false; } else if (validateEmpty(document.getElementsByName(&quot;englishName&quot;)[0].value)) { alert(&quot;Please check english name.&quot;); document.getElementById(&quot;englishName&quot;).focus(); return false; } else if (validateEmpty(document.getElementsByName(&quot;birthDate&quot;)[0].value)) { alert(&quot;Please check birth date.&quot;); document.getElementById(&quot;birthDate&quot;).focus(); return false; } else if (!emailVaildation) { alert(&quot;Please check email.&quot;); document.getElementById(&quot;email&quot;).focus(); return false; } else if (!privateEmailVaildation) { alert(&quot;Please check private email.&quot;); document.getElementById(&quot;privateEmail&quot;).focus(); return false; } else if (validateEmpty(document.getElementsByName(&quot;messangerId&quot;)[0].value)) { alert(&quot;Please check messanger id.&quot;); document.getElementById(&quot;messangerId&quot;).focus(); return false; } else if (!contactVaildation) { alert(&quot;Please check contact.&quot;); document.getElementById(&quot;contact&quot;).focus(); return false; } // 회원 수정 var jsonData = $(&quot;#form&quot;).serializeObject(); var userIdx = +document.getElementsByName(&quot;idx&quot;)[0].value; $.ajax({ url: &quot;http://localhost:8081/api/users/&quot; + userIdx, type: &quot;put&quot;, data: JSON.stringify(jsonData), dataType: &quot;json&quot;, contentType: &quot;application/json&quot;, async: false, }) .done(function (msg) { // 만일 첨부 파일이 수정되지 않은 경우 &#39;파일 업로드&#39; 및 &#39;파일 삭제&#39;를 수행하지 않음 if (typeof document.getElementsByName(&quot;file&quot;)[0].files[0] == &quot;undefined&quot;) { location.href = &quot;/user?idx=&quot; + userIdx; exit = true; } else { exit = false; } }) .fail(function (msg) { console.log(&quot;Update user is fail.&quot;); exit = false; }) if (exit) return true; // 파일 삭제 $.ajax({ url: &quot;http://localhost:8081/api/users/attachedFile/&quot; + userIdx, type: &quot;delete&quot;, contentType: &quot;application/json&quot;, async: false, }) .done(function (msg) { exit = false; }) .fail(function (msg) { console.log(&quot;Delete attached file is fail.&quot;); exit = true; }); if (exit) return flase; // 파일 업로드 var formData = new FormData(); formData.append(&quot;files&quot;, document.getElementsByName(&quot;file&quot;)[0].files[0]); formData.append(&quot;idx&quot;, userIdx); formData.append(&quot;createdBy&quot;, document.getElementsByName(&quot;createdBy&quot;)[0].value); $.ajax({ url: &quot;http://localhost:8081/api/users/attachedFile&quot;, type: &quot;post&quot;, data: formData, dataType: &quot;text&quot;, enctype: &quot;multipart/form-data&quot;, processData: false, contentType: false, }) .done(function (msg) { location.href = &quot;/user?idx=&quot; + userIdx; }) .fail(function (msg) { console.log(&quot;Upload attached file is fail.&quot;); }); });&amp;lt;/script&amp;gt;프로젝트 실행 및 결과 유효성 검사에 실패하면 alert 경고창을 확인할 수 있다." }, { "title": "Project Lab 13. 게시판 개발(무한 스크롤) - 9", "url": "/posts/Project-Lab13/", "categories": "Web, Project Lab", "tags": "", "date": "2020-09-05 00:00:00 +0900", "snippet": " 무한 스크롤 게시글 개발 과정을 소개한다. github: https://github.com/scribnote5/lab github commit: https://github.com/scribnote5/lab/commit/2efc38ac4ddb4344d3537e7e478fbed9f9adefcd 최신 프로젝트 코드와 형상이 다를 수 있습니다. 게시글 코드는 참고만 하시되, 최신 코드는 github에서 확인 부탁드립니다.무한 스크롤 게시판 페이스북의 타임 라인처럼 스크롤이 특정 위치에 도달하면 다음 데이터를 가져와 view에 출력하는 게시판으로서, 모바일 사용자에게 친화적인 UI를 제공한다. 특정 위치에 스크롤이 도달할 때 ajax를 통하여 데이터를 요청하는 과정이 필요하다. 리스트 페이지에서 논문 출판 지역(국내, 국제)과 논문 종류(Regular, Poster, Journal 등) 데이터를 검색하는 기능을 radio button으로 제공하며, 해당 기능은 QueryDsl의 동적쿼리(BooleanExpression)로 구현하였다. 무한 스크롤 게시판을 구현할 때 가장 중요한 것은 조회한 리스트의 마지막 요소의 idx(pk)다. 스크롤 이벤트가 발생할 때 조회하는 데이터의 시작을 리스트의 마지막 요소의 idx를 사용하여 알 수 있기 때문이다.출처: https://victorydntmd.tistory.com/194Table 설계 프로젝트에서 사용할 논문 게시판 table을 생성한다.&amp;lt;publication table&amp;gt;CREATE TABLE publication( idx bigint auto_increment primary key, created_by varchar(255) null, created_date datetime(6) null, last_modified_by varchar(255) null, last_modified_date datetime(6) null, active_status varchar(255) null, title varchar(255) null, authors varchar(255) null, publication_type varchar(255) null, publishing_area varchar(255) null, published_in varchar(255) null, impact_factor varchar(255) null, published_date datetime(6) null, pages varchar(255) null, volume varchar(255) null, number varchar(255) null, doi varchar(255) null, uri varchar(255) null, isbn_issn varchar(255) null, remark varchar(255) null); 프로젝트에서 사용할 논문 게시판 첨부 파일 table을 생성한다.&amp;lt;publication_attached_file table&amp;gt;CREATE TABLE publication_attached_file ( idx bigint auto_increment primary key, created_by varchar(255) null, created_date datetime(6) null, file_name varchar(255) null, saved_file_name varchar(255) null, publication_idx bigint null, file_size varchar(255) null);ALTER TABLE publication_attached_file AUTO_INCREMENT=1;DROP TABLE publication_attached_file;Config View에서 전달한 문자열을 enum 자료형으로 매핑하는 converter을 사용하여, 논문 검색 조건을 문자열 대신 PublicationSearchType enum 자료형으로 받으려고 한다. 해당 클래스는 view에서 전달한 문자열을 enum 자료형으로 바인딩하는 사용자 정의 converter다.(View String type -&amp;gt; Controller enum type)출처: https://medium.com/@lifecluee/string%EC%9D%84-%EA%B3%A0%EC%A7%91%ED%95%98%EB%8A%94-controller-%EA%B0%9C%EC%84%A0%EA%B8%B0-721cba570756&amp;lt;module-domain-core/src/main/java/kr/ac/univ/common/converter/StringToPublicationSearchType.java&amp;gt;package kr.ac.univ.common.converter;import kr.ac.univ.publication.dto.enums.PublicationSearchType;import org.springframework.core.convert.converter.Converter;public class StringToPublicationSearchType implements Converter&amp;lt;String, PublicationSearchType&amp;gt; { @Override public PublicationSearchType convert(String source) { return PublicationSearchType.valueOf(source.toUpperCase()); }} 앞에서 구현한 사용자 정의 StringToPublicationSearchType 클래스(converter)를 module-app-web 모듈과 module-app-api 모듈의 WebConfig 설정 파일에 등록한다.&amp;lt;module-app-api/src/main/java/kr/ac/univ/config/WebConfig.java&amp;gt;package kr.ac.univ.config;import kr.ac.univ.common.converter.StringToPublicationSearchType;import org.springframework.context.annotation.Configuration;import org.springframework.format.FormatterRegistry;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;@Configurationpublic class WebConfig implements WebMvcConfigurer { @Override public void addFormatters(FormatterRegistry registry) { // PublicationSearchType registry.addConverter(new StringToPublicationSearchType()); }}&amp;lt;module-app-web/src/main/java/kr/ac/univ/config/WebConfig.java&amp;gt;package kr.ac.univ.config;import kr.ac.univ.common.converter.StringToPublicationSearchType;import org.springframework.context.annotation.Configuration;import org.springframework.format.FormatterRegistry;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;@Configurationpublic class WebConfig implements WebMvcConfigurer { @Override public void addFormatters(FormatterRegistry registry) { // PublicationSearchType registry.addConverter(new StringToPublicationSearchType()); }}Domain 및 DTO Publication에서 사용하는 Domain과 Domain의 enum 자료형이다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/publication/domain/enums/PublicationType.java&amp;gt;package kr.ac.univ.publication.domain.enums;public enum PublicationType { JOURNAL(&quot;Journal&quot;), CONFERENCE(&quot;Conference&quot;), // Journal은 KCI, SCOPUS, SCIE로 구분된다. JOURNAL_KCI(&quot;Journal - KCI&quot;), JOURNAL_SCOPUS(&quot;Journal - SCOPUS&quot;), JOURNAL_SCIE(&quot;Journal - SCIE&quot;), // Conference는 Poster, Regular, Demo, Workshop으로 구분된다. CONFERENCE_POSTER(&quot;Conference - Poster&quot;), CONFERENCE_REGULAR(&quot;Conference - Regular&quot;), CONFERENCE_DEMO(&quot;Conference - Demo&quot;), CONFERENCE_WORKSHOP(&quot;Conference - Workshop&quot;); private String publicationType; private PublicationType(String publicationType) { this.publicationType = publicationType; } public String getPublicationType() { return this.publicationType; }}&amp;lt;module-domain-core/src/main/java/kr/ac/univ/publication/domain/enums/PublishingArea.java&amp;gt;package kr.ac.univ.publication.domain.enums;public enum PublishingArea { INTERNATIONAL(&quot;International&quot;), DOMESTIC(&quot;Domestic&quot;); private String publishingArea; private PublishingArea(String publishingArea) { this.publishingArea = publishingArea; } public String getPublishingArea() { return this.publishingArea; }}&amp;lt;module-domain-core/src/main/java/kr/ac/univ/publication/domain/Publication.java&amp;gt;package kr.ac.univ.publication.domain;import java.time.LocalDate;import javax.persistence.*;import kr.ac.univ.common.domain.CommonAudit;import kr.ac.univ.common.domain.enums.ActiveStatus;import kr.ac.univ.publication.domain.enums.PublicationType;import kr.ac.univ.publication.domain.enums.PublishingArea;import kr.ac.univ.publication.listener.PublicationListener;import lombok.Builder;import lombok.Getter;import lombok.NoArgsConstructor;import lombok.ToString;@Getter@NoArgsConstructor@Entity@Table@ToString@EntityListeners(PublicationListener.class)public class Publication extends CommonAudit { private String title; private String authors; @Enumerated(EnumType.STRING) private PublicationType publicationType; @Enumerated(EnumType.STRING) private PublishingArea publishingArea; private String publishedIn; private String impactFactor; private LocalDate publishedDate; private String pages; private String volume; private String number; private String doi; private String uri; private String isbnIssn; private String remark; @Builder public Publication(Long idx, String createdBy, String lastModifiedBy, String title, ActiveStatus activeStatus, String authors, PublicationType publicationType, PublishingArea publishingArea, String publishedIn, String impactFactor, LocalDate publishedDate, String pages, String volume, String number, String doi, String uri, String isbnIssn, String remark) { setIdx(idx); setCreatedBy(createdBy); setLastModifiedBy(lastModifiedBy); setActiveStatus(activeStatus); this.title = title; this.authors = authors; this.publicationType = publicationType; this.publishingArea = publishingArea; this.publishedIn = publishedIn; this.impactFactor = impactFactor; this.publishedDate = publishedDate; this.pages = pages; this.volume = volume; this.number = number; this.doi = doi; this.uri = uri; this.isbnIssn = isbnIssn; this.remark = remark; } public void update(Publication publication) { setActiveStatus(publication.getActiveStatus()); this.title = publication.getTitle(); this.authors = publication.getAuthors(); this.publicationType = publication.getPublicationType(); this.publishingArea = publication.getPublishingArea(); this.publishedIn = publication.getPublishedIn(); this.impactFactor = publication.getImpactFactor(); this.publishedDate = publication.getPublishedDate(); this.pages = publication.getPages(); this.volume = publication.getVolume(); this.number = publication.getNumber(); this.doi = publication.getDoi(); this.uri = publication.getUri(); this.isbnIssn = publication.getIsbnIssn(); this.remark = publication.getRemark(); }} NoticeBoard DTO &amp;lt;-&amp;gt; Entity간 객체 mapping 소스 코드가 Mapstruct에 의해 생성되도록 메소드를 선언 및 정의하는 클래스다. default 메소드는 사용자가 정의한 메소드로, Entity 파일 리스트를 DTO의 파일 리스트로 매핑한다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/publication/dto/mapper/PublicationMapper.java&amp;gt;package kr.ac.univ.publication.dto.mapper;import kr.ac.univ.common.dto.mapper.EntityMapper;import kr.ac.univ.publication.domain.Publication;import kr.ac.univ.publication.domain.PublicationAttachedFile;import kr.ac.univ.publication.dto.PublicationDto;import org.mapstruct.Mapper;import org.mapstruct.factory.Mappers;import java.util.List;@Mapper(componentModel = &quot;spring&quot;)public interface PublicationMapper extends EntityMapper&amp;lt;PublicationDto, Publication&amp;gt; { PublicationMapper INSTANCE = Mappers.getMapper(PublicationMapper.class); default PublicationDto toDto(PublicationDto publicationDto, List&amp;lt;PublicationAttachedFile&amp;gt; attachedFileList) { for (PublicationAttachedFile attachedFile : attachedFileList) { publicationDto.getAttachedFileList().add(attachedFile); } return publicationDto; }} Publication에서 사용하는 DTO다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/publication/dto/PublicationDto.java&amp;gt;package kr.ac.univ.publication.dto;import java.time.LocalDate;import java.util.ArrayList;import java.util.List;import kr.ac.univ.common.dto.CommonDto;import kr.ac.univ.publication.domain.PublicationAttachedFile;import kr.ac.univ.publication.domain.enums.PublicationType;import kr.ac.univ.publication.domain.enums.PublishingArea;import lombok.Getter;import lombok.NoArgsConstructor;import lombok.Setter;import lombok.ToString;@Getter@Setter@NoArgsConstructor@ToStringpublic class PublicationDto extends CommonDto { /* CommonDto: JPA Audit */ /* 기본 정보 */ private String title; private String authors; private PublicationType publicationType; private PublishingArea publishingArea; private String publishedIn; private String impactFactor; private LocalDate publishedDate; private String pages; private String volume; private String number; private String doi; private String uri; private String isbnIssn; private String remark; /* 첨부 파일 */ private List&amp;lt;PublicationAttachedFile&amp;gt; attachedFileList = new ArrayList&amp;lt;PublicationAttachedFile&amp;gt;();} PublicationSearchType enum 자료형은 검색에서 사용되며, View String type -&amp;gt; Controller enum type로 앞에서 등록한 사용자 정의 converter에 의해 변환된다. Publication domain의 논문 종류(PublicationType enum 자료형)와 논문 출판 지역(PublishingArea enum 자료형)의 모든 경우의 수를 하나의 enum 자료형으로 정의하였다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/publication/dto/enums/PublicationSearchType.java&amp;gt;package kr.ac.univ.publication.dto.enums;public enum PublicationSearchType { SHOW_ALL(&quot;Show All&quot;), // International Journal은 KCI, SCOPUS, SCIE로 구분된다. INTERNATIONAL_JOURNAL(&quot;International Journal&quot;), INTERNATIONAL_JOURNAL_SCOPUS(&quot;International Journal - SCOPUS&quot;), INTERNATIONAL_JOURNAL_SCIE(&quot;International Journal - SCIE&quot;), // Conference는 Poster, Regular, Demo, Workshop으로 구분된다. INTERNATIONAL_CONFERENCE(&quot;International Conference&quot;), INTERNATIONAL_POSTER(&quot;International Conference - Poster&quot;), INTERNATIONAL_REGULAR(&quot;International Conference - Regular&quot;), INTERNATIONAL_DEMO(&quot;International Conference - Demo&quot;), INTERNATIONAL_WORKSHOP(&quot;International Conference - Workshop&quot;), INTERNATIONAL_WORKINPROCESSS(&quot;International Conference - Work In Process&quot;), // Domestic Journal은 KCI로 구분된다. DOMESTIC_JOURNAL(&quot;Domestic Journal&quot;), DOMESTIC_JOURNAL_KCI(&quot;International Journal - KCI&quot;), // Conference는 Poster, Regular, Demo, Workshop으로 구분된다. DOMESTIC_CONFERENCE(&quot;Domestic Conference - Conference&quot;), DOMESTIC_POSTER(&quot;Domestic Conference - Poster&quot;), DOMESTIC_REGULAR(&quot;Domestic Conference - Regular&quot;), DOMESTIC_DEMO(&quot;Domestic Conference - Demo&quot;), DOMESTIC_WORKSHOP(&quot;Domestic Conference - Workshop&quot;); private String publicationSearchType; private PublicationSearchType(String publicationSearchType) { this.publicationSearchType = publicationSearchType; } public String getSearchPublicationType() { return this.publicationSearchType; }} Publication 검색에서 사용하는 DTO다. 검색 종류, 검색 키워드 데이터가 있는 SearchDto를 상속 받았으며, publicationSearchType 멤버 필드는 논문 출판 지역과 논문 종류를 정의한 enum 자료형이다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/publication/dto/PublicationSearchDto.java&amp;gt;package kr.ac.univ.publication.dto;import kr.ac.univ.common.dto.SearchDto;import kr.ac.univ.publication.dto.enums.PublicationSearchType;import lombok.Getter;import lombok.NoArgsConstructor;import lombok.Setter;import lombok.ToString;@Getter@Setter@NoArgsConstructor@ToStringpublic class PublicationSearchDto extends SearchDto { /* 검색 정보 */ private PublicationSearchType publicationSearchType = PublicationSearchType.SHOW_ALL;}Repository QueryDsl를 사용하여 다음과 같은 쿼리를 작성하였다. findTop10: lastIdx(조회한 리스트의 마지막 요소의 idx)보다 작거나 같은 데이터를 10개 조회한다.(테스트 용도) findMaxPublicationIdx: 논문 idx의 최대값을 조회한다. findTop15ByPublicationSearchDto: lastIdx(조회한 리스트의 마지막 요소의 idx)보다 작거나 같고 PublicationSearchDto를 비교하여 조건에 일치하는 리스트를 15개 조회한다. QueryDsl은 BooleanExpression을 통하여 동적 쿼리를 사용할 수 있으며, 해당 쿼리에 적용된 동적 조건은 2가지다. eqSearchType는 검색 종류와 검색 키워드를, eqPublicationSearchType는 논문 출판 지역과 논문 종류를 각 조건을 판별한다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/publication/repository/PublicationRepositoryImpl.java&amp;gt;package kr.ac.univ.publication.repository;import java.util.List;import javax.transaction.Transactional;import com.querydsl.core.types.dsl.BooleanExpression;import kr.ac.univ.publication.domain.Publication;import kr.ac.univ.publication.domain.QPublication;import kr.ac.univ.publication.domain.enums.PublicationType;import kr.ac.univ.publication.domain.enums.PublishingArea;import kr.ac.univ.publication.dto.PublicationSearchDto;import kr.ac.univ.publication.dto.enums.PublicationSearchType;import org.springframework.data.jpa.repository.support.QuerydslRepositorySupport;import org.springframework.stereotype.Repository;import static kr.ac.univ.publication.domain.QPublication.publication;import com.querydsl.jpa.impl.JPAQueryFactory;@Repository@Transactionalpublic class PublicationRepositoryImpl extends QuerydslRepositorySupport { private final JPAQueryFactory queryFactory; public PublicationRepositoryImpl(JPAQueryFactory queryFactory) { super(Publication.class); this.queryFactory = queryFactory; } public List&amp;lt;Publication&amp;gt; findTop10(Long lastIdx) { /* SELECT * * FROM publication * WHERE idx &amp;lt; &#39;lastIdx&#39; * LIMIT 10 */ return queryFactory .selectFrom(publication) .where(publication.idx.loe(lastIdx)) .orderBy(publication.idx.desc()) .limit(10) .fetch(); } public Publication findMaxPublicationIdx() { /* * SELECT MAX(idx) * FROM publication */ return queryFactory .selectFrom(publication) .orderBy(publication.idx.desc()) .fetchFirst(); } private BooleanExpression eqSearchType(PublicationSearchDto publicationSearchDto) { /* * SELECT * * FROM publication * WHERE searchType LIKE &#39;%keyword%&#39;; */ BooleanExpression result = null; switch (publicationSearchDto.getSearchType()) { case &quot;TITLE&quot;: result = publication.title.contains(publicationSearchDto.getKeyword()); break; case &quot;AUTHORS&quot;: result = publication.authors.contains(publicationSearchDto.getKeyword()); break; case &quot;PUBLISHED_IN&quot;: result = publication.publishedIn.contains(publicationSearchDto.getKeyword()); break; default: break; } return result; } private BooleanExpression eqPublicationSearchType(PublicationSearchDto publicationSearchDto) { /* * SELECT * * FROM publication * WHERE publishing_area = &#39;publishingArea&#39; * AND publication_type = &#39;publicationType&#39; */ BooleanExpression result = null; if(publicationSearchDto.getPublicationSearchType() == PublicationSearchType.INTERNATIONAL_JOURNAL) { result = publication.publishingArea.eq(PublishingArea.INTERNATIONAL).and(publication.publicationType.eq(PublicationType.JOURNAL)); } else if (publicationSearchDto.getPublicationSearchType() == PublicationSearchType.INTERNATIONAL_CONFERENCE){ result = publication.publishingArea.eq(PublishingArea.INTERNATIONAL).and(publication.publicationType.ne(PublicationType.JOURNAL)); } else if (publicationSearchDto.getPublicationSearchType() == PublicationSearchType.DOMESTIC_JOURNAL){ result = publication.publishingArea.eq(PublishingArea.DOMESTIC).and(publication.publicationType.eq(PublicationType.JOURNAL)); } else if (publicationSearchDto.getPublicationSearchType() == PublicationSearchType.DOMESTIC_CONFERENCE){ result = publication.publishingArea.eq(PublishingArea.DOMESTIC).and(publication.publicationType.ne(PublicationType.JOURNAL)); } return result; } public List&amp;lt;Publication&amp;gt; findTop10ByPublicationSearchDto(Long lastIdx, PublicationSearchDto publicationSearchDto) { QPublication publication = QPublication.publication; /* * SELECT * * FROM publication * WHERE idx &amp;lt;= lastIdx * AND publishing_area = &#39;INTERNATIONAL&#39; * AND publication_type = &#39;JOURNAL&#39; * AND title LIKE &#39;%&#39; * LIMIT 10; */ return queryFactory .selectFrom(publication) .where(publication.idx.loe(lastIdx), eqSearchType(publicationSearchDto), eqPublicationSearchType(publicationSearchDto)) .orderBy(publication.idx.desc()) .limit(10) .fetch(); }}Service Publication의 비즈니스 로직이다. findPublicationListScroll: 무한 스크롤 게시판에서 스크롤 이벤트가 발생할 때 사용된다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/publication/service/PublicationService.java&amp;gt;package kr.ac.univ.publication.service;import java.util.List;import kr.ac.univ.common.dto.SearchDto;import kr.ac.univ.noticeBoard.domain.NoticeBoard;import kr.ac.univ.noticeBoard.dto.NoticeBoardDto;import kr.ac.univ.noticeBoard.dto.mapper.NoticeBoardMapper;import kr.ac.univ.publication.domain.Publication;import kr.ac.univ.publication.domain.enums.PublicationType;import kr.ac.univ.publication.domain.enums.PublishingArea;import kr.ac.univ.publication.dto.PublicationDto;import kr.ac.univ.publication.dto.PublicationSearchDto;import kr.ac.univ.publication.dto.enums.PublicationSearchType;import kr.ac.univ.publication.dto.mapper.PublicationMapper;import kr.ac.univ.publication.repository.PublicationRepository;import kr.ac.univ.publication.repository.PublicationRepositoryImpl;import kr.ac.univ.user.repository.UserRepository;import kr.ac.univ.util.AccessCheck;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageImpl;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.data.domain.Sort;import org.springframework.stereotype.Service;import javax.transaction.Transactional;@Servicepublic class PublicationService { private final PublicationRepository publicationRepository; private final PublicationRepositoryImpl publicationRepositoryImpl; private final UserRepository userRepository; public PublicationService(PublicationRepository publicationRepository, PublicationRepositoryImpl publicationRepositoryImpl, UserRepository userRepository) { this.publicationRepository = publicationRepository; this.publicationRepositoryImpl = publicationRepositoryImpl; this.userRepository = userRepository; } public Page&amp;lt;PublicationDto&amp;gt; findPublicationList(Pageable pageable, PublicationSearchDto publicationSearchDto) { Page&amp;lt;Publication&amp;gt; publicationList = null; Page&amp;lt;PublicationDto&amp;gt; publicationDtoList = null; pageable = PageRequest.of(pageable.getPageNumber() &amp;lt;= 0 ? 0 : pageable.getPageNumber() - 1, pageable.getPageSize(), Sort.Direction.DESC, &quot;idx&quot;); if(&quot;Show All&quot;.equals(publicationSearchDto.getPublicationSearchType().getSearchPublicationType())) { switch (publicationSearchDto.getSearchType()) { case &quot;TITLE&quot;: publicationList = publicationRepository.findAllByTitleContaining(pageable, publicationSearchDto.getKeyword()); break; case &quot;AUTHORS&quot;: publicationList = publicationRepository.findAllByAuthorsContaining(pageable, publicationSearchDto.getKeyword()); break; case &quot;PUBLISHED_IN&quot;: publicationList = publicationRepository.findAllByPublishedInContaining(pageable, publicationSearchDto.getKeyword()); break; default: publicationList = publicationRepository.findAll(pageable); break; } } else { String[] str = publicationSearchDto.getPublicationSearchType().getSearchPublicationType().split(&quot; &quot;); PublishingArea publishingArea = PublishingArea.valueOf(str[0].toUpperCase()); PublicationType publicationType = PublicationType.valueOf(str[1].toUpperCase()); switch (publicationSearchDto.getSearchType()) { case &quot;TITLE&quot;: publicationList = publicationRepository.findAllByTitleContainingAndPublicationTypeAndPublishingArea(pageable, publicationSearchDto.getKeyword(), publicationType, publishingArea); break; case &quot;AUTHORS&quot;: publicationList = publicationRepository.findAllByAuthorsContainingAndPublicationTypeAndPublishingArea(pageable, publicationSearchDto.getKeyword(), publicationType, publishingArea); break; case &quot;PUBLISHED_IN&quot;: publicationList = publicationRepository.findAllByPublishedInContainingAndPublicationTypeAndPublishingArea(pageable, publicationSearchDto.getKeyword(), publicationType, publishingArea); break; default: publicationList = publicationRepository.findAllByPublicationTypeAndPublishingArea(pageable, publicationType, publishingArea); break; } } publicationDtoList = new PageImpl&amp;lt;PublicationDto&amp;gt;(PublicationMapper.INSTANCE.toDto(publicationList.getContent()), pageable, publicationList.getTotalElements()); return publicationDtoList; } public List&amp;lt;PublicationDto&amp;gt; findPublicationListScroll(Long lastIdx, PublicationSearchDto publicationSearchDto) { List&amp;lt;Publication&amp;gt; publicationList = null; List&amp;lt;PublicationDto&amp;gt; publicationDtoList = null; publicationList = publicationRepositoryImpl.findTop10ByPublicationSearchDto(lastIdx, publicationSearchDto); // Publication -&amp;gt; PublicationDto publicationDtoList = PublicationMapper.INSTANCE.toDto(publicationList); return publicationDtoList; } public Long insertPublication(Publication publication) { return publicationRepository.save(publication).getIdx(); } public PublicationDto findPublicationByIdx(Long idx) { PublicationDto publicationDto = PublicationMapper.INSTANCE.toDto(publicationRepository.findById(idx).orElse(new Publication())); // 권한 설정 // Register: 로그인한 사용자 Register 접근 가능 if (idx == 0) { publicationDto.setAccess(true); } // Update: isAccess 메소드에 따라 접근 가능 및 불가 else if (AccessCheck.isAccess(publicationDto.getCreatedBy(), userRepository.findByUsername(publicationDto.getCreatedBy()).getAuthorityType().getAuthorityType())) { publicationDto.setAccess(true); } else { publicationDto.setAccess(false); } return publicationDto; } @Transactional public Long updatePublication(Long idx, PublicationDto publicationDto) { Publication persistPublication = publicationRepository.getOne(idx); Publication publication = PublicationMapper.INSTANCE.toEntity(publicationDto); persistPublication.update(publication); return publicationRepository.save(publication).getIdx(); } public Long findMaxPublicationIdx() { return publicationRepositoryImpl.findMaxPublicationIdx().getIdx(); } public void deletePublicationByIdx(Long idx) { publicationRepository.deleteById(idx); }}Controller Publication 관련 클라이언트의 요청을 view로 매핑한다. publicationHomeList: 무한 스크롤 게시판에 접근할 때 응답한다.&amp;lt;module-app-web/src/main/java/kr/ac/univ/controller/PublicationController.java&amp;gt;package kr.ac.univ.controller;import kr.ac.univ.publication.dto.PublicationDto;import kr.ac.univ.publication.dto.PublicationSearchDto;import kr.ac.univ.publication.service.PublicationAttachedFileService;import kr.ac.univ.publication.service.PublicationService;import org.springframework.data.domain.Pageable;import org.springframework.data.web.PageableDefault;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;@Controller@RequestMapping(&quot;/publication&quot;)public class PublicationController { private final PublicationService publicationService; private final PublicationAttachedFileService publicationAttachedFileService; public PublicationController(PublicationService publicationService, PublicationAttachedFileService publicationAttachedFileService) { this.publicationService = publicationService; this.publicationAttachedFileService = publicationAttachedFileService; } ... // List Scroll @GetMapping(&quot;/list_scroll&quot;) public String publicationHomeList(PublicationSearchDto publicationSearchDto, Model model) { // 방어 코드: lastIdx는 충분히 큰 값을 전달하면 된다. Long lastIdx = publicationService.findMaxPublicationIdx(); model.addAttribute(&quot;publicationDtoList&quot;, publicationService.findPublicationListScroll(lastIdx, publicationSearchDto)); return &quot;/publication/list_scroll&quot;; }}RestController Publication 관련 클라이언트의 요청을 json 타입으로 응답한다. publicationListScroll: 스크롤 이벤트가 발생할 때 응답하며, lastIdx(조회한 리스트의 마지막 요소의 idx)를 기준으로 publication 데이터를 검색한다.&amp;lt;module-app-api/src/main/java/kr/ac/univ/controller/PublicationRestController.java&amp;gt;package kr.ac.univ.controller;import kr.ac.univ.publication.domain.Publication;import kr.ac.univ.publication.dto.PublicationDto;import kr.ac.univ.publication.dto.PublicationSearchDto;import kr.ac.univ.publication.service.PublicationAttachedFileService;import kr.ac.univ.publication.service.PublicationService;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import java.util.List;@RestController@RequestMapping(&quot;/api/publications&quot;)public class PublicationRestController { private final PublicationService publicationService; private final PublicationAttachedFileService publicationAttachedFileService; public PublicationRestController(PublicationService publicationService, PublicationAttachedFileService publicationAttachedFileService) { this.publicationService = publicationService; this.publicationAttachedFileService = publicationAttachedFileService; } ... // List Scroll @GetMapping(&quot;/list_scroll&quot;) public ResponseEntity&amp;lt;?&amp;gt; publicationListScroll(@RequestParam(value = &quot;lastIdx&quot;, defaultValue = &quot;-1&quot;) Long lastIdx, PublicationSearchDto publicationSearchDto, Model model) { // 방어 코드: lastIdx가 들어오지 않은 경우 충분히 큰 값을 전달하면 된다. if (lastIdx == -1L) { lastIdx = publicationService.findMaxPublicationIdx(); } return new ResponseEntity&amp;lt;&amp;gt;(publicationService.findPublicationListScroll(lastIdx, publicationSearchDto), HttpStatus.OK); }}View Publication 관련 데이터를 화면에 출력한다. 해당 페이지에 접근하면 조회한 리스트의 마지막 요소의 idx(pk)를 계산한다. 이후 스크롤을 화면 가장 하단 - 100 높이만큼 이동시키면 스크롤 이벤트가 발생하며, 요청 URI는 util 함수인 getUriParams 함수(쿼리 스트링의 파라미터를 분리)와 makeGetUri 함수(URI 생성)를 사용하여 생성한다. 생성된 URI는 ajax를 통하여 서버에 요청 후 응답받은 데이터 리스트의 마지막 요소의 idx(pk)를 계산한 다음 데이터 리스트를 화면에 출력한다. 데이터 조회에 성공하는 경우 loading bar는 hide되고, 조회된 데이터를 포맷에 맞게 파싱하여 출력한다. 무한 스크롤 이벤트 발생 자바스크립트 소스 코드는 하단 출처를 참고하였다.출처: https://c10106.tistory.com/4173&amp;lt;module-app-web/src/main/resources/templates/publication/list_scroll.html&amp;gt;&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&amp;gt;&amp;lt;head&amp;gt; &amp;lt;!-- css --&amp;gt; &amp;lt;th:block th:replace=&quot;layout/css.html&quot;&amp;gt;&amp;lt;/th:block&amp;gt; &amp;lt;title th:text=&quot;${@environment.getProperty(&#39;title&#39;)} + &#39; | Publication List&#39;&quot;&amp;gt;&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;div id=&quot;wrapper&quot;&amp;gt; &amp;lt;div id=&quot;page-content-wrapper&quot;&amp;gt; &amp;lt;!-- header --&amp;gt; &amp;lt;div th:replace=&quot;layout/header::header&quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&quot;container publication&quot;&amp;gt; &amp;lt;form name=&quot;form&quot; id=&quot;form&quot; th:object=&quot;${publicationSearchDto}&quot; action=&quot;#&quot;&amp;gt; &amp;lt;div class=&quot;page-header breadcrumbs&quot;&amp;gt; &amp;lt;div class=&quot;d-flex justify-content-between align-items-center&quot; data-aos=&quot;fade-up&quot;&amp;gt; &amp;lt;h2&amp;gt;Publication List&amp;lt;/h2&amp;gt; &amp;lt;ol&amp;gt; &amp;lt;li&amp;gt;Home&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Publication List&amp;lt;/li&amp;gt; &amp;lt;/ol&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div id=&quot;loading&quot;&amp;gt; &amp;lt;img th:src=&quot;@{/images/loading.gif}&quot; alt=&quot;Loading…&quot;/&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&quot;page-search&quot; data-aos=&quot;fade-up&quot;&amp;gt; &amp;lt;div class=&quot;row justify-content-end mt-4&quot;&amp;gt; &amp;lt;div class=&quot;custom-control custom-radio col-auto&quot;&amp;gt; &amp;lt;input type=&quot;radio&quot; class=&quot;custom-control-input&quot; name=&quot;publicationSearchType&quot; id=&quot;showAll&quot; th:value=&quot;SHOW_ALL&quot; th:checked=&quot;*{publicationSearchType?.name() == &#39;SHOW_ALL&#39; || publicationSearchType?.name() == null}&quot;&amp;gt; &amp;lt;label class=&quot;custom-control-label&quot; th:for=&quot;showAll&quot;&amp;gt; Show All &amp;lt;/label&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&quot;custom-control custom-radio col-auto&quot;&amp;gt; &amp;lt;input type=&quot;radio&quot; class=&quot;custom-control-input&quot; name=&quot;publicationSearchType&quot; id=&quot;internationalJournal&quot; th:value=&quot;INTERNATIONAL_JOURNAL&quot; th:checked=&quot;*{publicationSearchType?.name() == &#39;INTERNATIONAL_JOURNAL&#39;}&quot;&amp;gt; &amp;lt;label class=&quot;custom-control-label&quot; th:for=&quot;internationalJournal&quot;&amp;gt; International Journal &amp;lt;/label&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&quot;custom-control custom-radio col-auto&quot;&amp;gt; &amp;lt;input type=&quot;radio&quot; class=&quot;custom-control-input&quot; name=&quot;publicationSearchType&quot; id=&quot;internationalConference&quot; th:value=&quot;INTERNATIONAL_CONFERENCE&quot; th:checked=&quot;*{publicationSearchType?.name() == &#39;INTERNATIONAL_CONFERENCE&#39;}&quot;&amp;gt; &amp;lt;label class=&quot;custom-control-label&quot; th:for=&quot;internationalConference&quot;&amp;gt; International Conference &amp;lt;/label&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&quot;custom-control custom-radio col-auto&quot;&amp;gt; &amp;lt;input type=&quot;radio&quot; class=&quot;custom-control-input&quot; name=&quot;publicationSearchType&quot; id=&quot;domesticJournal&quot; th:value=&quot;DOMESTIC_JOURNAL&quot; th:checked=&quot;*{publicationSearchType?.name() == &#39;DOMESTIC_JOURNAL&#39;}&quot;&amp;gt; &amp;lt;label class=&quot;custom-control-label&quot; th:for=&quot;domesticJournal&quot;&amp;gt; Domestic Journal &amp;lt;/label&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&quot;custom-control custom-radio col-auto&quot;&amp;gt; &amp;lt;input type=&quot;radio&quot; class=&quot;custom-control-input&quot; name=&quot;publicationSearchType&quot; id=&quot;domesticConference&quot; th:value=&quot;DOMESTIC_CONFERENCE&quot; th:checked=&quot;*{publicationSearchType?.name() == &#39;DOMESTIC_CONFERENCE&#39;}&quot;&amp;gt; &amp;lt;label class=&quot;custom-control-label&quot; th:for=&quot;domesticConference&quot;&amp;gt; Domestic Conference &amp;lt;/label&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&quot;row justify-content-end mt-2&quot;&amp;gt; &amp;lt;div class=&quot;pt-2 pr-3&quot;&amp;gt; &amp;lt;select class=&quot;custom-select custom-select-sm&quot; name=&quot;searchType&quot; th:field=&quot;*{searchType}&quot;&amp;gt; &amp;lt;option th:value=&quot;TITLE&quot;&amp;gt;Title&amp;lt;/option&amp;gt; &amp;lt;option th:value=&quot;AUTHORS&quot;&amp;gt;Authors&amp;lt;/option&amp;gt; &amp;lt;option th:value=&quot;PUBLISHED_IN&quot;&amp;gt;ID&amp;lt;/option&amp;gt; &amp;lt;/select&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&quot;pt-2 pr-2&quot;&amp;gt; &amp;lt;input type=&quot;search&quot; class=&quot;custom-search-input&quot; name=&quot;keyword&quot; placeholder=&quot;Search&quot; th:value=&quot;${searchDto?.keyword}&quot;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&quot;pt-2&quot;&amp;gt; &amp;lt;i id=&quot;search&quot; class=&quot;fas fa-search search-icon&quot;&amp;gt;&amp;lt;/i&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;!-- Common --&amp;gt; &amp;lt;div class=&quot;page-content&quot; data-aos=&quot;fade-up&quot;&amp;gt; &amp;lt;div id=&quot;publications&quot; class=&quot;mt-4&quot;&amp;gt; &amp;lt;div th:id=&quot;publicationData0&quot; th:each=&quot;publicationDto : ${publicationDtoList}&quot; class=&quot;publication-wrap mt-4&quot;&amp;gt; &amp;lt;span class=&quot;my-1&quot;&amp;gt; &amp;lt;a th:if=&quot;!${#strings.isEmpty(publicationDto.doi)}&quot; th:href=&quot;&#39;https://doi.org/&#39; + ${publicationDto.doi}&quot; th:id=&quot;publicationTitle&quot; th:text=&quot;${publicationDto.title}&quot; th:class=&quot;title&quot; target=&quot;_blank&quot;&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;a th:if=&quot;${#strings.isEmpty(publicationDto.doi) and !#strings.isEmpty(publicationDto.uri)}&quot; th:href=&quot;${publicationDto.uri}&quot; th:id=&quot;publicationTitle&quot; th:text=&quot;${publicationDto.title}&quot; th:class=&quot;title&quot; target=&quot;_blank&quot;&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;span th:if=&quot;${#strings.isEmpty(publicationDto.doi) and #strings.isEmpty(publicationDto.uri)}&quot; th:id=&quot;publicationTitle&quot; th:text=&quot;${publicationDto.title}&quot; th:class=&quot;title&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;span th:text=&quot;${publicationDto.authors}&quot; th:id=&quot;publicationAuthors&quot; class=&quot;authors my-1&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt; &amp;lt;span th:if=&quot;!${#strings.isEmpty(publicationDto.publishedIn)}&quot; th:text=&quot;${publicationDto.publishedIn}&quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span th:if=&quot;!${#strings.isEmpty(publicationDto.publishedDate)}&quot; th:text=&quot;&#39;, &#39; + ${#temporals.format(publicationDto.publishedDate, &#39;MMM&#39;, new java.util.Locale(&#39;en&#39;, &#39;EN&#39;))}&quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span th:if=&quot;!${#strings.isEmpty(publicationDto.publishedDate)}&quot; th:text=&quot;&#39;, &#39; + ${#temporals.format(publicationDto.publishedDate, &#39;yyyy&#39;)}&quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span th:if=&quot;!${#strings.isEmpty(publicationDto.volume)}&quot; th:text=&quot;&#39;, Vol. &#39; + ${publicationDto.volume} &quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span th:if=&quot;!${#strings.isEmpty(publicationDto.number)}&quot; th:text=&quot;&#39;, No. &#39; + ${publicationDto.number}&quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span th:if=&quot;!${#strings.isEmpty(publicationDto.pages)}&quot; th:text=&quot;&#39;, pp. &#39; + ${publicationDto.pages}&quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span th:if=&quot;!${#strings.isEmpty(publicationDto.isbnIssn)}&quot; th:text=&quot;&#39;, &#39; + ${publicationDto.isbnIssn}&quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;div class=&quot;mt-2&quot;&amp;gt; &amp;lt;span th:if=&quot;${#strings.equals(publicationDto.publishingArea, &#39;INTERNATIONAL&#39;) &amp;amp;&amp;amp; (#strings.equals(publicationDto.publicationType, &#39;JOURNAL_SCIE&#39;) || #strings.equals(publicationDto.publicationType, &#39;JOURNAL_SCOPUS&#39;))}&quot; th:text=&quot;${publicationDto.publishingArea.publishingArea} + &#39; &#39; + ${publicationDto.publicationType.publicationType} + (${#strings.isEmpty(publicationDto.impactFactor)} ? &#39;&#39; : &#39;(&#39; + ${publicationDto.impactFactor} + &#39;)&#39;)&quot; class=&quot;btn-primary btn-sm&quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span th:if=&quot;${#strings.equals(publicationDto.publishingArea, &#39;INTERNATIONAL&#39;) &amp;amp;&amp;amp; !(#strings.equals(publicationDto.publicationType, &#39;JOURNAL_SCIE&#39;) || #strings.equals(publicationDto.publicationType, &#39;JOURNAL_SCOPUS&#39;))}&quot; th:text=&quot;${publicationDto.publishingArea.publishingArea} + &#39; &#39; + ${publicationDto.publicationType.publicationType}&quot; class=&quot;btn-info btn-sm&quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span th:if=&quot;${#strings.equals(publicationDto.publishingArea, &#39;DOMESTIC&#39;) &amp;amp;&amp;amp; #strings.equals(publicationDto.publicationType, &#39;JOURNAL&#39;)}&quot; th:text=&quot;${publicationDto.publishingArea.publishingArea} + &#39; &#39; + ${publicationDto.publicationType.publicationType} &quot; class=&quot;btn-success btn-sm&quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span th:if=&quot;${#strings.equals(publicationDto.publishingArea, &#39;DOMESTIC&#39;) &amp;amp;&amp;amp; !(#strings.equals(publicationDto.publicationType, &#39;JOURNAL&#39;))}&quot; th:text=&quot;${publicationDto.publishingArea.publishingArea} + &#39; &#39; + ${publicationDto.publicationType.publicationType}&quot; class=&quot;btn-warning btn-sm&quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div th:if=&quot;${#lists.size(publicationDtoList) == 0}&quot;&amp;gt; &amp;lt;div class=&quot;no-posts&quot;&amp;gt; No posts founded. &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div id=&quot;loadingScroll&quot; class=&quot;row justify-content-center&quot;&amp;gt; &amp;lt;img th:src=&quot;@{/images/loading.gif}&quot; alt=&quot;Loading…&quot;/&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&quot;row mt-4 mb-4&quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- footer --&amp;gt;&amp;lt;div th:replace=&quot;layout/footer::footer&quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- script file --&amp;gt;&amp;lt;th:block th:replace=&quot;layout/script.html&quot;&amp;gt;&amp;lt;/th:block&amp;gt;&amp;lt;script th:inline=&quot;javascript&quot;&amp;gt; var list = ([[${publicationDtoList}]]); var lastIdx = 0; var isLast = false; var uri = null; // 조회하는 데이터가 10개 보다 적은 경우 loading.gif를 hide if (list.length &amp;lt; 15) { $(&quot;#loadingScroll&quot;).hide(); isLast = true; } // 처음 발생하는 scroll event에서 데이터를 가져오는 기준이 된다.(마지막 배열 요소의 idx) else { lastIdx = list[list.length - 1].idx; } $(document).ready(function () { var win = $(window); var publicationId = 1; // Each time the user scrolls win.scroll(function () { if ($(window).scrollTop() + $(window).height() &amp;gt; $(document).height() - 100) { // 더이상 가져오는 데이터가 없는 경우 if (isLast) { $(&#39;#loadingScroll&#39;).hide(); return true; } $(&#39;#loadingScroll&#39;).show(); // 처음과 마지막 데이터가 중복되는 경우를 제거하기 위해서 lastIdx에서 1을 뺀다. uri = {lastIdx: lastIdx - 1}; // URI 생성 Object.assign(uri, getUriParams()); uri = makeGetUri(moduleAppApiAddress + &quot;/api/publications/list_scroll&quot;, uri); $.ajax({ url: uri, type: &quot;get&quot;, dataType: &quot;text&quot;, contentType: &quot;application/json&quot;, async: false, }) .done(function (msg) { var publicationList = JSON.parse(msg); // 가져오는 데이터가 없는 경우 if (publicationList.length == 0) { isLast = true; return true; } // 다음 발생하는 scroll event에서 데이터를 가져오는 기준이 된다.(마지막 배열 요소의 idx) lastIdx = (JSON.parse(msg))[(JSON.parse(msg)).length - 1].idx; var monthNames = [&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot; ]; $(&quot;#loadingScroll&quot;).hide(); // ajax를 통하여 받은 데이터를 html에 출력한다. for (var i = 0; i &amp;lt; publicationList.length; i++) { var str = null; var publishedDate = publicationList[i].publishedDate.split(&#39;-&#39;); publishedDate[1] = monthNames[publishedDate[1] - 1]; if (publicationList[i].publishingArea == &#39;INTERNATIONAL&#39; &amp;amp;&amp;amp; (publicationList[i].publicationType == &#39;JOURNAL_SCIE&#39; || publicationList[i].publicationType == &#39;JOURNAL_SCOPUS&#39;)) { str = &quot;&amp;lt;span class=&#39;btn-primary btn-sm&#39;&amp;gt;&quot; + capitalize(publicationList[i].publishingArea) + &#39; &#39; + convertPublicationType(publicationList[i].publicationType) + convertImpactFactor(publicationList[i].impactFactor) + &quot;&amp;lt;/span&amp;gt;&quot;; } else if (publicationList[i].publishingArea == &#39;INTERNATIONAL&#39; &amp;amp;&amp;amp; !(publicationList[i].publicationType == &#39;JOURNAL_SCIE&#39; || publicationList[i].publicationType == &#39;JOURNAL_SCOPUS&#39;)) { str = &quot;&amp;lt;span class=&#39;btn-info btn-sm&#39;&amp;gt;&quot; + capitalize(publicationList[i].publishingArea) + &#39; &#39; + convertPublicationType(publicationList[i].publicationType) + &quot;&amp;lt;/span&amp;gt;&quot;; } else if (publicationList[i].publishingArea == &#39;DOMESTIC&#39; &amp;amp;&amp;amp; publicationList[i].publicationType == &#39;JOURNAL&#39;) { str = &quot;&amp;lt;span class=&#39;btn-success btn-sm&#39;&amp;gt;&quot; + capitalize(publicationList[i].publishingArea) + &#39; &#39; + convertPublicationType(publicationList[i].publicationType) + &quot;&amp;lt;/span&amp;gt;&quot;; } else if (publicationList[i].publishingArea == &#39;DOMESTIC&#39; &amp;amp;&amp;amp; !(publicationList[i].publicationType == &#39;JOURNAL&#39;)) { str = &quot;&amp;lt;span class=&#39;btn-warning btn-sm&#39;&amp;gt;&quot; + capitalize(publicationList[i].publishingArea) + &#39; &#39; + convertPublicationType(publicationList[i].publicationType) + &quot;&amp;lt;/span&amp;gt;&quot;; } else { str = &quot;&quot;; } var link = &#39;&amp;lt;span class=&quot;my-1&quot;&amp;gt;&#39;; if (!isEmpty(publicationList[i].doi)) { link += &#39;&amp;lt;a id=&quot;publicationTitle&quot;&#39; + publicationId + &#39; href=&quot;&#39; + &#39;https://doi.org/&#39; + publicationList[i].doi + &#39;&quot; class=&quot;title&quot; target=&quot;_blank&quot;&amp;gt;&#39; + publicationList[i].title + &#39;&amp;lt;/a&amp;gt;&#39; } else if (isEmpty(publicationList[i].doi) &amp;amp;&amp;amp; !isEmpty(publicationList[i].uri)) { link += &#39;&amp;lt;a id=&quot;publicationTitle&quot;&#39; + publicationId + &#39; href=&quot;&#39; + publicationList[i].uri + &#39;&quot; class=&quot;title&quot; target=&quot;_blank&quot;&amp;gt;&#39; + publicationList[i].title + &#39;&amp;lt;/a&amp;gt;&#39; } else { link += &#39;&amp;lt;span id=&quot;publicationTitle&quot;&#39; + publicationId + &#39; class=&quot;title&quot;&amp;gt;&#39; + publicationList[i].title + &#39;&amp;lt;/span&amp;gt;&#39; } link += &#39;&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&#39; var number = !isEmpty(publicationList[i].number) ? &#39;&amp;lt;span&amp;gt;, No. &#39; + publicationList[i].number + &#39;&amp;lt;/span&amp;gt;&#39; : &#39;&#39;; var pages = !isEmpty(publicationList[i].pages) ? &#39;&amp;lt;span&amp;gt;, pp. &#39; + publicationList[i].pages + &#39;&amp;lt;/span&amp;gt;&#39; : &#39;&#39;; var isbnIssn = !isEmpty(publicationList[i].isbnIssn) ? &#39;&amp;lt;span&amp;gt;, &#39; + publicationList[i].isbnIssn + &#39;&amp;lt;/span&amp;gt;&#39; : &#39;&#39;; $(&quot;#publications&quot;).append( &#39;&amp;lt;div id=&quot;publicationData&#39; + publicationId + &#39;&quot; class=&quot;publication-wrap mt-4&quot;&amp;gt;&#39; + link + &#39;&amp;lt;span id=&quot;publicationAuthors&quot;&#39; + publicationId + &#39; class=&quot;authors my-1&quot;&amp;gt;&#39; + publicationList[i].authors + &#39;&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;&#39; + &#39;&amp;lt;span&amp;gt;&#39; + publicationList[i].publishedIn + &#39;&amp;lt;/span&amp;gt;&#39; + &#39;&amp;lt;span&amp;gt;, &#39; + publishedDate[1] + &#39;&amp;lt;/span&amp;gt;&#39; + &#39;&amp;lt;span&amp;gt;, &#39; + publishedDate[0] + &#39;&amp;lt;/span&amp;gt;&#39; + &#39;&amp;lt;span&amp;gt;, Vol. &#39; + publicationList[i].volume + &#39;&amp;lt;/span&amp;gt;&#39; + number + pages + isbnIssn + &#39;&amp;lt;div class=&quot;mt-2&quot;&amp;gt;&#39; + str + &#39;&amp;lt;/div&amp;gt;&#39; + &#39;&amp;lt;/div&amp;gt;&#39;); publicationId++; } }) .fail(function (msg) { searchFail(); $(&#39;#loadingScroll&#39;).hide(); }) } }); }); $(&quot;#search&quot;).click(function () { document.form.action = &quot;/publication/list_scroll&quot;; document.form.method = &quot;get&quot;; document.form.submit(); });&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;Util Javascript: URI 파라미터 반환 및 URI 생성 기능을 담당하는 함수다.출처: &amp;lt;https://m.blog.naver.com/PostView.nhn?blogId=hay6308&amp;amp;logNo=220958671660&amp;amp;proxyReferer=https:%2F%2Fwww.google.com%2F&amp;lt;module-app-web/src/main/resources/static/js/util.js&amp;gt;/* URI 파라미터 반환 */function getUriParams() { var params = {}; window.location.search.replace(/[?&amp;amp;]+([^=&amp;amp;]+)=([^&amp;amp;]*)/gi, function(str, key, value) { params[key] = value; }); return params;}/* URI 생성 */function makeGetUri(uri, params) { Object.keys(params).forEach(function(key, index) { uri += (index === 0 ? &quot;?&quot; : &quot;&amp;amp;&quot;) + key + &quot;=&quot; + params[key]; }); return uri;}&amp;lt;module-app-web/src/main/resources/templates/layout/script.html&amp;gt;&amp;lt;script th:src=&quot;@{/js/jquery.min.js}&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script th:src=&quot;@{/js/jquery.serialize-object.min.js}&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script th:src=&quot;@{/js/bootstrap.bundle.min.js}&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script th:src=&quot;@{/js/fileUtil.js}&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script th:src=&quot;@{/js/util.js}&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script th:src=&quot;@{/summernote/summernote.min.js}&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script th:inline=&quot;javascript&quot;&amp;gt; $(function() { var csrfToken = /*[[${_csrf.token}]]*/ null; var csrfHeader = /*[[${_csrf.headerName}]]*/ null; $(document).ajaxSend(function (e, xhr, options) { xhr.setRequestHeader(csrfHeader, csrfToken); }); });&amp;lt;/script&amp;gt;프로젝트 실행 및 결과 다음 이미지와 같이 무한 스크롤 논문 게시판을 확인할 수 있다. 검색 조건을 변경하는 따른 데이터가 출력되는 것을 확인할 수 있다. 스크롤을 하단으로 내려서 이벤트가 발생하면 다음 이미지와 같이 숨겨진 loading 이미지가 보이게 되고 ajax를 통하여 새로운 데이터를 받아 출력한다." }, { "title": "Project Lab 12. 게시판 개발(댓글) - 8", "url": "/posts/Project-Lab12/", "categories": "Web, Project Lab", "tags": "", "date": "2020-09-01 00:00:00 +0900", "snippet": " 게시글 댓글 개발 과정을 소개한다. github: https://github.com/scribnote5/lab github commit: https://github.com/scribnote5/lab/commit/927d3ed72af532b438c7131482bfb09fcf3698d0 최신 프로젝트 코드와 형상이 다를 수 있습니다. 게시글 코드는 참고만 하시되, 최신 코드는 github에서 확인 부탁드립니다.댓글 기능 및 구체적인 권한 접근 설계 사용자의 권한에 따라 댓글을 등록 할 수 있다. general 권한을 가진 사용자가 root 권한을 가진 사용자가 작성한 게시글의 form 페이지의 URI 주소를 유추할 수 있고 접근할 수 있다. 따라서 사용자 권한에 따라 게시판의 create, update, delete 페이지에 접근을 차단하는 기능을 구현하였다.권한 및 계정 정보 총 4개의 권한이 존재하며, 권한 별로 게시글 및 페이지 접근이 제한된다. 권한 별 페이지 및 게시글 접근 여부는 다음과 같다. 프로젝트에서 분류한 권한 종류는 다음과 같다. root: 모든 권한에 대한 접근 허용, 특정 경로(admin 페이지) 접근 가능 manager: general 권한에 대한 접근 허용, 본인이 create한 게시글에 update 및 delete 가능 general: 본인이 create한 게시글에 update 및 delete 가능 non_user: 비회원으로서, 게시글 read만 가능 anonymous: 게시글 read만 가능Table 설계 프로젝트에서 사용할 댓글 table을 생성한다.&amp;lt;notice_board_comment&amp;gt;CREATE TABLE notice_board_comment( idx bigint auto_increment primary key, created_by varchar(255) null, created_date datetime(6) null, last_modified_by varchar(255) null, last_modified_date datetime(6) null, active_status varchar(255) null, notice_board_idx long null, content longtext null);ALTER TABLE notice_board_comment AUTO_INCREMENT=1;DROP TABLE notice_board_comment;Domain 및 DTO NoticeBoard Comment에서 사용하는 Domain다. NoticeBoard의 idx를 참조할 수 있는 noticeBoardIdx 멤버 필드가 존재한다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/noticeBoard/domain/NoticeBoardComment.java&amp;gt;package kr.ac.univ.noticeBoard.domain;import kr.ac.univ.common.domain.CommonAudit;import kr.ac.univ.common.domain.enums.ActiveStatus;import lombok.Builder;import lombok.Getter;import lombok.NoArgsConstructor;import lombok.ToString;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.Table;@Getter@NoArgsConstructor@Entity@Table@ToStringpublic class NoticeBoardComment extends CommonAudit { @Column private Long noticeBoardIdx; @Column private String content; @Builder public NoticeBoardComment(Long idx, String createdBy, String lastModifiedBy, ActiveStatus activeStatus, Long noticeBoardIdx, String content) { setIdx(idx); setCreatedBy(createdBy); setLastModifiedBy(lastModifiedBy); setActiveStatus(activeStatus); this.noticeBoardIdx = noticeBoardIdx; this.content = content; } public void update(NoticeBoardComment noticeBoard) { setActiveStatus(noticeBoard.getActiveStatus()); this.content = noticeBoard.getContent(); }} NoticeBoard Comment에서 사용하는 DTO다. 새로 등록한 댓글인지 확인하는 isNewIcon 멤버 필드와 사용자 권한에 따라 접근할 수 있는 isAccess 멤버 필드가 존재한다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/noticeBoard/dto/NoticeBoardCommentDto.java&amp;gt;package kr.ac.univ.noticeBoard.dto;import kr.ac.univ.common.dto.CommonDto;import lombok.Getter;import lombok.NoArgsConstructor;import lombok.Setter;import lombok.ToString;@Getter@Setter@NoArgsConstructor@ToStringpublic class NoticeBoardCommentDto extends CommonDto { /* CommonDto: JPA Audit */ /* 기본 정보 */ private Long noticeBoardIdx; private String content; /* newIcon */ private boolean isNewIcon; /* 접근 여부 */ private boolean isAccess;} NoticeBoard Comment Entity&amp;lt;-&amp;gt;DTO mapping 소스 코드를 생성하는 Mapper 클래스다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/noticeBoard/dto/mapper/NoticeBoardCommentMapper.java&amp;gt;package kr.ac.univ.noticeBoard.dto.mapper;import kr.ac.univ.common.dto.mapper.EntityMapper;import kr.ac.univ.noticeBoard.domain.NoticeBoardComment;import kr.ac.univ.noticeBoard.dto.NoticeBoardCommentDto;import org.mapstruct.Mapper;import org.mapstruct.factory.Mappers;@Mapper(componentModel = &quot;spring&quot;)public interface NoticeBoardCommentMapper extends EntityMapper&amp;lt;NoticeBoardCommentDto, NoticeBoardComment&amp;gt; { NoticeBoardCommentMapper INSTANCE = Mappers.getMapper(NoticeBoardCommentMapper.class);}Repository JPA를 사용하여 다음과 같은 쿼리를 작성하였다. findAllByNoticeBoardIdxOrderByCreatedDateDesc: 같은 게시글에 등록된 댓글을 생성일 순서로 내림차순 정렬한다. deleteAllByNoticeBoardIdx: 게시글에 등록된 댓글을 모두 삭제한다. 다음 출처를 참고하면 JPA로 대량의 데이터 삭제할 때 성능 문제가 발생한다. 해당 문제를 해결하기 위해서 JPA 대신 QueryDsl로 쿼리를 작성하여 게시글과 연관된 모든 댓글 삭제 기능을 구현하였다.출처: https://jojoldu.tistory.com/235https://derekpark.tistory.com/84&amp;lt;module-domain-core/src/main/java/kr/ac/univ/noticeBoard/repository/NoticeBoardCommentRepository.java&amp;gt;package kr.ac.univ.noticeBoard.repository;import java.util.List;import kr.ac.univ.noticeBoard.domain.NoticeBoardComment;import org.springframework.data.jpa.repository.JpaRepository;import org.springframework.stereotype.Repository;@Repositorypublic interface NoticeBoardCommentRepository extends JpaRepository&amp;lt;NoticeBoardComment, Long&amp;gt; { List&amp;lt;NoticeBoardComment&amp;gt; findAllByNoticeBoardIdxOrderByCreatedDateDesc(Long noticeBoardIdx); void deleteAllByNoticeBoardIdx(Long noticeBoardIdx);} QueryDsl를 사용하여 다음과 같은 쿼리를 작성하였다. deleteAllByNoticeBoardIdx: 게시글에 등록된 댓글을 모두 삭제한다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/noticeBoard/repository/NoticeBoardCommentRepositoryImpl.java&amp;gt;package kr.ac.univ.noticeBoard.repository;import javax.transaction.Transactional;import kr.ac.univ.noticeBoard.domain.NoticeBoardComment;import kr.ac.univ.noticeBoard.domain.QNoticeBoardComment;import org.springframework.data.jpa.repository.support.QuerydslRepositorySupport;import org.springframework.stereotype.Repository;import com.querydsl.jpa.impl.JPAQueryFactory;@Repository@Transactionalpublic class NoticeBoardCommentRepositoryImpl extends QuerydslRepositorySupport { private final JPAQueryFactory queryFactory; public NoticeBoardCommentRepositoryImpl(JPAQueryFactory queryFactory) { super(NoticeBoardComment.class); this.queryFactory = queryFactory; } public Long deleteAllByNoticeBoardIdx(Long noticeBoardIdx) { QNoticeBoardComment noticeBoardComment = QNoticeBoardComment.noticeBoardComment; /* * DELETE FROM AttachedFile * WHERE noticeBoardIdx = &#39;noticeBoardIdx&#39; */ return queryFactory .delete(noticeBoardComment) .where(noticeBoardComment.noticeBoardIdx.eq(noticeBoardIdx)) .execute(); }}Service NoticeBoard Comment의 비즈니스 로직이다. findAllByNoticeBoardIdxOrderByCreatedDateDesc: 게시글에 등록된 댓글을 모두 조회하며, 새로 등록된 댓글 여부와 접근 권한을 설정한다. NoticeBoard Comment service 처럼 NoticeBoard service 또한 접근 불가능한 사용자가 게시글에 접근 권한을 설정한다.(해당 내용은 생략되었다.)&amp;lt;module-domain-core/src/main/java/kr/ac/univ/noticeBoard/service/NoticeBoardCommentService.java&amp;gt;package kr.ac.univ.noticeBoard.service;import kr.ac.univ.maintenance.dto.mapper.MaintenanceMapper;import kr.ac.univ.noticeBoard.domain.NoticeBoardComment;import kr.ac.univ.noticeBoard.dto.NoticeBoardCommentDto;import kr.ac.univ.noticeBoard.dto.mapper.NoticeBoardCommentMapper;import kr.ac.univ.noticeBoard.repository.NoticeBoardCommentRepository;import kr.ac.univ.noticeBoard.repository.NoticeBoardCommentRepositoryImpl;import kr.ac.univ.user.domain.User;import kr.ac.univ.user.repository.UserRepository;import kr.ac.univ.util.AccessCheck;import kr.ac.univ.util.EmptyUtil;import kr.ac.univ.util.NewIconCheck;import org.springframework.stereotype.Service;import javax.transaction.Transactional;import java.util.List;@Servicepublic class NoticeBoardCommentService { private final NoticeBoardCommentRepository noticeBoardCommentRepository; private final NoticeBoardCommentRepositoryImpl noticeBoardCommentRepositoryImpl; private final UserRepository userRepository; public NoticeBoardCommentService(NoticeBoardCommentRepository noticeBoardCommentRepository, NoticeBoardCommentRepositoryImpl noticeBoardCommentRepositoryImpl, UserRepository userRepository) { this.noticeBoardCommentRepository = noticeBoardCommentRepository; this.noticeBoardCommentRepositoryImpl = noticeBoardCommentRepositoryImpl; this.userRepository = userRepository; } public List&amp;lt;NoticeBoardCommentDto&amp;gt; findAllByNoticeBoardIdxOrderByCreatedDateDesc(Long noticeBoardIdx) { List&amp;lt;NoticeBoardCommentDto&amp;gt; noticeBoardCommentDtoList = null; noticeBoardCommentDtoList = NoticeBoardCommentMapper.INSTANCE.toDto(noticeBoardCommentRepository.findAllByNoticeBoardIdxOrderByCreatedDateDesc(noticeBoardIdx)); for (NoticeBoardCommentDto noticeBoardCommentDto : noticeBoardCommentDtoList) { // NewIcon 판별 noticeBoardCommentDto.setNewIcon(NewIconCheck.isNew(noticeBoardCommentDto.getCreatedDate())); // 권한 설정 // Update: isAccessInGeneral 메소드에 따라 접근 가능 및 불가 // 탈퇴 회원은 권한을 general로 설정 후 권한을 검사함 User user = userRepository.findByUsername(noticeBoardCommentDto.getCreatedBy()); noticeBoardCommentDto.setAccess(AccessCheck.isAccessInGeneral(noticeBoardCommentDto.getCreatedBy(), EmptyUtil.isEmpty(user) ? &quot;general&quot; : user.getAuthorityType().getAuthorityType())); } return noticeBoardCommentDtoList; } public Long insertNoticeBoardComment(NoticeBoardCommentDto noticeBoardCommentDto) { return noticeBoardCommentRepository.save(NoticeBoardCommentMapper.INSTANCE.toEntity(noticeBoardCommentDto)).getIdx(); } @Transactional public Long updateNoticeBoardComment(Long idx, NoticeBoardCommentDto noticeBoardCommentDto) { NoticeBoardComment persistNoticeBoardComment = noticeBoardCommentRepository.getOne(idx); NoticeBoardComment noticeBoardComment = NoticeBoardCommentMapper.INSTANCE.toEntity(noticeBoardCommentDto); persistNoticeBoardComment.update(noticeBoardComment); return noticeBoardCommentRepository.save(persistNoticeBoardComment).getIdx(); } public void deleteNoticeBoardCommentByIdx(Long idx) { noticeBoardCommentRepository.deleteById(idx); } public void deleteAllByNoticeBoardIdx(Long idx) { noticeBoardCommentRepositoryImpl.deleteAllByNoticeBoardIdx(idx); }}Controller NoticeBoard Comment 관련 클라이언트의 요청을 view로 매핑한다. NoticeBoard service에서 설정한 접근 권한을 바탕으로 접근 불가능한 사용자가 게시글에 접근할 수 없도록 로직을 추가하였다.&amp;lt;module-app-web/src/main/java/kr/ac/univ/controller/NoticeBoardController.java&amp;gt;package kr.ac.univ.controller;import kr.ac.univ.common.dto.SearchDto;import kr.ac.univ.noticeBoard.dto.NoticeBoardCommentDto;import kr.ac.univ.noticeBoard.dto.NoticeBoardDto;import kr.ac.univ.noticeBoard.service.NoticeBoardAttachedFileService;import kr.ac.univ.noticeBoard.service.NoticeBoardCommentService;import kr.ac.univ.noticeBoard.service.NoticeBoardService;import org.springframework.data.domain.Pageable;import org.springframework.data.web.PageableDefault;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import java.util.List;@Controller@RequestMapping(&quot;/notice-board&quot;)public class NoticeBoardController { private final NoticeBoardService noticeBoardService; private final NoticeBoardAttachedFileService noticeBoardAttachedFileService; private final NoticeBoardCommentService noticeBoardCommentService; public NoticeBoardController(NoticeBoardService noticeBoardService, NoticeBoardAttachedFileService noticeBoardAttachedFileService, NoticeBoardCommentService noticeBoardCommentService) { this.noticeBoardService = noticeBoardService; this.noticeBoardAttachedFileService = noticeBoardAttachedFileService; this.noticeBoardCommentService = noticeBoardCommentService; } // List @GetMapping(&quot;/list&quot;) public String noticeBoardList(@PageableDefault Pageable pageable, SearchDto searchDto, Model model) { model.addAttribute(&quot;noticeBoardDtoList&quot;, noticeBoardService.findNoticeBoardList(pageable, searchDto)); return &quot;/noticeBoard/list&quot;; } // Form Update @GetMapping(&quot;/form{idx}&quot;) public String noticeBoardForm(@RequestParam(value = &quot;idx&quot;, defaultValue = &quot;0&quot;) Long idx, Model model) { NoticeBoardDto noticeBoardDto = noticeBoardService.findNoticeBoardByIdx(idx); String returnPage = null; // 권한 확인 if (noticeBoardDto.isAccess()) { noticeBoardDto = noticeBoardAttachedFileService.findAttachedFileByNoticeBoardIdx(idx, noticeBoardDto); model.addAttribute(&quot;noticeBoardDto&quot;, noticeBoardDto); returnPage = &quot;/noticeBoard/form&quot;; } else { returnPage = &quot;/user/permission-denied&quot;; } return returnPage; } // Read @GetMapping({&quot;&quot;, &quot;/&quot;}) public String noticeBoardRead(@RequestParam(value = &quot;idx&quot;, defaultValue = &quot;0&quot;) Long idx, Model model) { NoticeBoardDto noticeBoardDto = null; List&amp;lt;NoticeBoardCommentDto&amp;gt; noticeBoardCommentDtoList = null; noticeBoardDto = noticeBoardService.findNoticeBoardByIdx(idx); noticeBoardDto = noticeBoardAttachedFileService.findAttachedFileByNoticeBoardIdx(idx, noticeBoardDto); noticeBoardCommentDtoList = noticeBoardCommentService.findAllByNoticeBoardIdxOrderByCreatedDateDesc(idx); model.addAttribute(&quot;noticeBoardDto&quot;, noticeBoardDto); model.addAttribute(&quot;noticeBoardCommentDtoList&quot;, noticeBoardCommentDtoList); return &quot;/noticeBoard/read&quot;; }}RestController NoticeBoard Comment 관련 클라이언트의 요청을 json 타입으로 응답한다.&amp;lt;module-app-api/src/main/java/kr/ac/univ/controller/NoticeBoardCommentRestController.java&amp;gt;package kr.ac.univ.controller;import kr.ac.univ.noticeBoard.domain.NoticeBoardComment;import kr.ac.univ.noticeBoard.dto.NoticeBoardCommentDto;import kr.ac.univ.noticeBoard.service.NoticeBoardCommentService;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.DeleteMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.PutMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestController@RequestMapping(&quot;/api/notice-boards-comments&quot;)public class NoticeBoardCommentRestController { private final NoticeBoardCommentService noticeBoardCommentService; public NoticeBoardCommentRestController(NoticeBoardCommentService noticeBoardCommentService) { this.noticeBoardCommentService = noticeBoardCommentService; } @PostMapping public ResponseEntity&amp;lt;?&amp;gt; postNoticeBoard(@RequestBody NoticeBoardComment noticeBoardComment) { Long idx = noticeBoardCommentService.insertNoticeBoardComment(noticeBoardComment); return new ResponseEntity&amp;lt;&amp;gt;(idx, HttpStatus.CREATED); } @PutMapping(&quot;/{idx}&quot;) public ResponseEntity&amp;lt;?&amp;gt; putNoticeBoard(@PathVariable(&quot;idx&quot;) Long idx, @RequestBody NoticeBoardCommentDto noticeBoardCommentDto) { noticeBoardCommentService.updateNoticeBoardComment(idx, noticeBoardCommentDto); return new ResponseEntity&amp;lt;&amp;gt;(&quot;{}&quot;, HttpStatus.OK); } @DeleteMapping(&quot;/{idx}&quot;) public ResponseEntity&amp;lt;?&amp;gt; deleteNoticeBoard(@PathVariable(&quot;idx&quot;) Long idx) { noticeBoardCommentService.deleteNoticeBoardCommentByIdx(idx); return new ResponseEntity&amp;lt;&amp;gt;(&quot;{}&quot;, HttpStatus.OK); }}View NoticeBoard Comment 관련 화면을 출력한다. 사용자의 권한에 따라 댓글을 등록할 수 있고, 수정 및 삭제 할 수 있다. 댓글의 ‘Update’ 버튼을 클릭하는 경우 span 태그가 보이지 않고 form 태그가 보여 댓글을 수정할 수 있고, ‘Cancel’ 버튼을 클릭하는 경우 span 태그가 보이고 form 태그가 보이지 않게 된다.&amp;lt;module-app-web/src/main/resources/templates/noticeBoard/read.html&amp;gt;...&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&amp;gt;&amp;lt;head&amp;gt; &amp;lt;!-- css --&amp;gt; &amp;lt;th:block th:replace=&quot;layout/css.html&quot;&amp;gt;&amp;lt;/th:block&amp;gt; &amp;lt;title th:text=&quot;${@environment.getProperty(&#39;title&#39;)} + &#39; | Notice Board Detail&#39;&quot;&amp;gt;&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;div id=&quot;page-content-wrapper&quot;&amp;gt; &amp;lt;!-- header --&amp;gt; &amp;lt;div th:replace=&quot;layout/header::header&quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&quot;container&quot;&amp;gt; &amp;lt;form name=&quot;form&quot; id=&quot;form&quot; th:object=&quot;${noticeBoardDto}&quot; action=&quot;#&quot;&amp;gt; &amp;lt;div class=&quot;page-header breadcrumbs&quot;&amp;gt; &amp;lt;div class=&quot;d-flex justify-content-between align-items-center&quot; data-aos=&quot;fade-up&quot;&amp;gt; &amp;lt;h2&amp;gt;Notice Board Detail&amp;lt;/h2&amp;gt; &amp;lt;ol&amp;gt; &amp;lt;li&amp;gt;Home&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Notice Board Detail&amp;lt;/li&amp;gt; &amp;lt;/ol&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div id=&quot;loading&quot;&amp;gt; &amp;lt;img th:src=&quot;@{/images/loading.gif}&quot; alt=&quot;Loading…&quot;/&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&quot;page-content&quot; data-aos=&quot;fade-up&quot;&amp;gt; &amp;lt;table class=&quot;table mobile-table-read mt-4&quot;&amp;gt; &amp;lt;colgroup&amp;gt; &amp;lt;col width=&quot;17.5%&quot;/&amp;gt; &amp;lt;col width=&quot;82.5%&quot;/&amp;gt; &amp;lt;/colgroup&amp;gt; &amp;lt;!-- Desktop --&amp;gt; &amp;lt;tr class=&quot;d-none d-sm-none d-md-none d-lg-table-row&quot;&amp;gt; &amp;lt;td class=&quot;text-right border-0&quot; colspan=&quot;10&quot;&amp;gt; &amp;lt;strong class=&quot;additional-information&quot;&amp;gt;Created By: &amp;lt;/strong&amp;gt;&amp;lt;span th:text=&quot;*{createdBy}&quot; class=&quot;additional-information&quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; &amp;lt;strong class=&quot;additional-information&quot;&amp;gt;Created Date: &amp;lt;/strong&amp;gt;&amp;lt;span th:text=&quot;*{#temporals.format(createdDate,&#39;yyyy.MM.dd. HH:mm&#39;)}&quot; class=&quot;additional-information&quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; &amp;lt;strong class=&quot;additional-information&quot;&amp;gt;Views: &amp;lt;/strong&amp;gt; &amp;lt;span th:text=&quot;*{views}&quot; class=&quot;additional-information&quot;/&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr class=&quot;d-none d-sm-none d-md-none d-lg-table-row&quot;&amp;gt; &amp;lt;th&amp;gt;Title&amp;lt;/th&amp;gt; &amp;lt;td th:text=&quot;*{title}&quot;&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;!-- Mobile --&amp;gt; &amp;lt;tr class=&quot;d-print-none d-sm-table-row d-md-table-row d-lg-none d-xl-none d-table-row&quot;&amp;gt; &amp;lt;td colspan=&quot;2&quot;&amp;gt; &amp;lt;h4 th:text=&quot;*{title}&quot; class=&quot;mobile-title&quot;&amp;gt;&amp;lt;/h4&amp;gt; &amp;lt;div class=&quot;text-right&quot;&amp;gt; &amp;lt;span th:text=&quot;*{createdBy}&quot; class=&quot;mobile-additional-information&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp; &amp;lt;span th:text=&quot;*{#temporals.format(createdDate,&#39;yyyy.MM.dd. HH:mm&#39;)}&quot; class=&quot;mobile-additional-information&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp; &amp;lt;span th:text=&quot;&#39;Views: &#39; + *{views}&quot; class=&quot;mobile-additional-information&quot;/&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;!-- Common --&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td colspan=&quot;2&quot;&amp;gt; &amp;lt;div class=&quot;content ck-content&quot; th:utext=&quot;*{content}&quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th class=&quot;d-none d-sm-none d-md-none d-lg-table-cell&quot;&amp;gt;Uploaded Attached File&amp;lt;/th&amp;gt; &amp;lt;td colspan=&quot;2&quot;&amp;gt; &amp;lt;strong class=&quot;d-print-none d-sm-inline d-md-inline d-lg-none d-xl-none d-inline mobile-default&quot;&amp;gt;Uploaded Attached File&amp;lt;/strong&amp;gt; &amp;lt;div id=&quot;attachedFileList&quot; th:each=&quot;attachedFile : *{attachedFileList}&quot;&amp;gt; &amp;lt;span th:attr=&quot;onclick=|location.href=encodeURI(&#39;${@environment.getProperty(&#39;module-app-api.address&#39;)}/api/attachedFiles/download/${attachedFile.savedFileName}&#39;)|&quot; th:text=&quot;${attachedFile.fileName} + &#39;,&amp;amp;nbsp;&#39; + &#39;File size: &#39; + ${attachedFile.fileSize}&quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td colspan=&quot;10&quot;&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/table&amp;gt; &amp;lt;!-- Comment --&amp;gt; &amp;lt;table class=&quot;table mt-3&quot;&amp;gt; &amp;lt;colgroup&amp;gt; &amp;lt;col width=&quot;17.5%&quot;/&amp;gt; &amp;lt;col width=&quot;82.5%&quot;/&amp;gt; &amp;lt;/colgroup&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th colspan=&quot;2&quot; class=&quot;sub-item-title&quot;&amp;gt;Comments&amp;lt;/th&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr th:if=&quot;${!#strings.equals(#authentication.principal, &#39;anonymousUser&#39;)}&quot;&amp;gt; &amp;lt;td colspan=&quot;2&quot;&amp;gt; &amp;lt;textarea class=&quot;form-control comment&quot; name=&quot;content&quot; id=&quot;comment&quot;&amp;gt;&amp;lt;/textarea&amp;gt; &amp;lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-primary mt-3&quot; id=&quot;insertComment&quot;&amp;gt;Register&amp;lt;/button&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/table&amp;gt; &amp;lt;div th:if=&quot;!${#lists.isEmpty(noticeBoardCommentDtoList)}&quot; class=&quot;mt-3&quot;&amp;gt; &amp;lt;table class=&quot;table table-hover&quot;&amp;gt; &amp;lt;tr th:each=&quot;noticeBoardCommentDto : ${noticeBoardCommentDtoList}&quot;&amp;gt; &amp;lt;td&amp;gt; &amp;lt;span th:text=&quot;${noticeBoardCommentDto.createdBy}&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp; &amp;lt;span th:text=&quot;${#temporals.format(noticeBoardCommentDto.createdDate,&#39;yyyy.MM.dd. HH:mm&#39;)}&quot; class=&quot;comment-additional-information&quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;img th:class=&quot;new-icon&quot; th:if=&quot;${noticeBoardCommentDto.newIcon}&quot; th:attr=&quot;src=@{|/images/new-icon.png|}&quot;/&amp;gt; &amp;lt;div class=&quot;mt-2&quot;&amp;gt; &amp;lt;span th:id=&quot;commentContent + ${noticeBoardCommentDtoStat.index}&quot; th:utext=&quot;${noticeBoardCommentDto.content}&quot; class=&quot;comment&quot;&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;textarea th:id=&quot;updateCommentContent + ${noticeBoardCommentDtoStat.index}&quot; th:text=&quot;${noticeBoardCommentDto.content}&quot; class=&quot;form-control comment&quot; style=&quot;display: none;&quot; name=&quot;updateContent&quot;&amp;gt; &amp;lt;/textarea&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div th:if=&quot;${noticeBoardCommentDto.access}&quot; class=&quot;mt-3&quot;&amp;gt; &amp;lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-info mr-2&quot; th:id=&quot;displayComment + ${noticeBoardCommentDtoStat.index}&quot; th:onclick=&quot;displayComment([[${noticeBoardCommentDtoStat.index}]])&quot;&amp;gt; Update &amp;lt;/button&amp;gt; &amp;lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-dangIIggdfger&quot; th:id=&quot;deleteComment + ${noticeBoardCommentDtoStat.index}&quot; th:onclick=&quot;deleteComment([[${noticeBoardCommentDto.idx}]], [[${noticeBoardCommentDtoStat.index}]])&quot;&amp;gt; Delete &amp;lt;/button&amp;gt; &amp;lt;button type=&quot;button&quot; style=&quot;display:none;&quot; class=&quot;btn btn-sm btn-outline-primary mr-2&quot; th:id=&quot;updateComment + ${noticeBoardCommentDtoStat.index}&quot; th:onclick=&quot;updateComment([[${noticeBoardCommentDto.idx}]], [[${noticeBoardCommentDto.createdBy}]], [[${noticeBoardCommentDto.activeStatus}]],[[${noticeBoardCommentDtoStat.index}]])&quot;&amp;gt; Register &amp;lt;/button&amp;gt; &amp;lt;button type=&quot;button&quot; style=&quot;display:none;&quot; class=&quot;btn btn-sm btn-outline-danger&quot; th:id=&quot;cancelComment + ${noticeBoardCommentDtoStat.index}&quot; th:onclick=&quot;cancelComment([[${noticeBoardCommentDtoStat.index}]])&quot;&amp;gt; Cancel &amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/table&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&quot;row justify-content-between mt-4 mb-4&quot;&amp;gt; &amp;lt;div class=&quot;col-auto&quot;&amp;gt; &amp;lt;a href=&quot;/notice-board/list&quot; class=&quot;btn btn-sm btn-secondary&quot;&amp;gt;Move to List&amp;lt;/a&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div th:if=&quot;*{access}&quot; class=&quot;col-auto ml-2&quot;&amp;gt; &amp;lt;a th:href=&quot;&#39;/notice-board/form?idx=&#39;+*{idx}&quot; class=&quot;btn btn-sm btn-info mx-1&quot;&amp;gt;Update&amp;lt;/a&amp;gt; &amp;lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-danger mx-1&quot; id=&quot;delete&quot;&amp;gt;Delete&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;!-- input type=&quot;hidden&quot; --&amp;gt; &amp;lt;input type=&quot;hidden&quot; name=&quot;idx&quot; th:value=&quot;*{idx}&quot;/&amp;gt; &amp;lt;input type=&quot;hidden&quot; name=&quot;createdBy&quot; th:if=&quot;${!#strings.equals(#authentication.principal, &#39;anonymousUser&#39;)}&quot; th:value=&quot;${#authentication.principal.username}&quot;/&amp;gt; &amp;lt;input type=&quot;hidden&quot; name=&quot;lastModifiedBy&quot; th:if=&quot;${!#strings.equals(#authentication.principal, &#39;anonymousUser&#39;)}&quot; th:value=&quot;${#authentication.principal.username}&quot;/&amp;gt; &amp;lt;input type=&quot;hidden&quot; name=&quot;activeStatus&quot; th:if=&quot;${!#strings.equals(#authentication.principal, &#39;anonymousUser&#39;)}&quot; th:value=&quot;ACTIVE&quot;/&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- footer --&amp;gt;&amp;lt;div th:replace=&quot;layout/footer::footer&quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- script file --&amp;gt;&amp;lt;th:block th:replace=&quot;layout/script.html&quot;&amp;gt;&amp;lt;/th:block&amp;gt;&amp;lt;script th:inline=&quot;javascript&quot;&amp;gt; sweetalertFire(&quot;notice-board&quot;); $(&quot;#delete&quot;).click(function () { Confirm.fire({ icon: &quot;warning&quot;, title: &quot;Do you want to delete?&quot;, }).then((result) =&amp;gt; { if (result.isConfirmed) { $.ajax({ url: moduleAppApiAddress + &quot;/api/notice-boards/&quot; + document.getElementsByName(&quot;idx&quot;)[0].value, type: &quot;delete&quot;, dataType: &quot;text&quot;, contentType: &quot;application/json&quot;, async: false, }) .done(function (msg) { localStorage.setItem(&quot;result&quot;, &quot;/notice-board/delete-success&quot;); location.href = &quot;/notice-board/list&quot;; }) .fail(function (msg) { parseErrorMsg(msg); }) } else { return false; } }) }); $(&quot;#insertComment&quot;).click(function () { var jsonData = { createdBy: document.getElementsByName(&quot;createdBy&quot;)[0].value, lastModifiedBy: document.getElementsByName(&quot;lastModifiedBy&quot;)[0].value, activeStatus: document.getElementsByName(&quot;activeStatus&quot;)[0].value, noticeBoardIdx: document.getElementsByName(&quot;idx&quot;)[0].value, content: document.getElementsByName(&quot;content&quot;)[0].value.replace(/\\n/g, &quot;&amp;lt;br&amp;gt;&quot;) } // duplicate submit check if (duplicateSubmitCheck()) return false; $.ajax({ url: moduleAppApiAddress + &quot;/api/notice-boards-comments/&quot;, type: &quot;post&quot;, data: JSON.stringify(jsonData), dataType: &quot;text&quot;, contentType: &quot;application/json&quot;, async: false, }) .done(function (msg) { localStorage.setItem(&quot;result&quot;, &quot;/notice-board/register-success&quot;); location.href = &quot;/notice-board?idx=&quot; + document.getElementsByName(&quot;idx&quot;)[0].value; }) .fail(function (msg) { parseErrorMsg(msg); duplicateSubmitFlag = false; }) }); function updateComment(idx, createdBy, activeStatus, commentId) { var jsonData = { idx: idx, createdBy: createdBy, lastModifiedBy: document.getElementsByName(&quot;lastModifiedBy&quot;)[0].value, activeStatus: activeStatus, noticeBoardIdx: document.getElementsByName(&quot;idx&quot;)[0].value, content: document.getElementsByName(&quot;updateContent&quot;)[commentId].value.replace(/\\n/g, &quot;&amp;lt;br&amp;gt;&quot;) } // duplicate submit check if (duplicateSubmitCheck()) return false; $.ajax({ url: moduleAppApiAddress + &quot;/api/notice-boards-comments/&quot; + idx, type: &quot;put&quot;, data: JSON.stringify(jsonData), dataType: &quot;text&quot;, contentType: &quot;application/json&quot;, async: false, }) .done(function (msg) { localStorage.setItem(&quot;result&quot;, &quot;/notice-board/update-success&quot;); location.href = &quot;/notice-board?idx=&quot; + document.getElementsByName(&quot;idx&quot;)[0].value; }) .fail(function (msg) { parseErrorMsg(msg); duplicateSubmitFlag = false; }) } function deleteComment(idx, commentId) { Confirm.fire({ icon: &quot;warning&quot;, title: &quot;Do you want to delete?&quot;, }).then((result) =&amp;gt; { if (result.isConfirmed) { $.ajax({ url: moduleAppApiAddress + &quot;/api/notice-boards-comments/&quot; + idx, type: &quot;delete&quot;, dataType: &quot;text&quot;, contentType: &quot;application/json&quot;, async: false, }) .done(function (msg) { localStorage.setItem(&quot;result&quot;, &quot;/notice-board/delete-success&quot;); location.href = &quot;/notice-board?idx=&quot; + document.getElementsByName(&quot;idx&quot;)[0].value; }) .fail(function (msg) { parseErrorMsg(msg); }) } else { return false; } }) } function displayComment(index) { document.getElementsByName(&quot;updateContent&quot;)[index].style.display = &quot;inline&quot;; document.getElementById(&quot;commentContent&quot; + index).style.display = &quot;none&quot;; document.getElementById(&quot;displayComment&quot; + index).style.display = &quot;none&quot;; document.getElementById(&quot;deleteComment&quot; + index).style.display = &quot;none&quot;; document.getElementById(&quot;updateComment&quot; + index).style.display = &quot;inline&quot;; document.getElementById(&quot;cancelComment&quot; + index).style.display = &quot;inline&quot;; } function cancelComment(index) { document.getElementsByName(&quot;updateContent&quot;)[index].style.display = &quot;none&quot;; document.getElementById(&quot;commentContent&quot; + index).style.display = &quot;inline&quot;; document.getElementById(&quot;displayComment&quot; + index).style.display = &quot;inline&quot;; document.getElementById(&quot;deleteComment&quot; + index).style.display = &quot;inline&quot;; document.getElementById(&quot;updateComment&quot; + index).style.display = &quot;none&quot;; document.getElementById(&quot;cancelComment&quot; + index).style.display = &quot;none&quot;; }&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;Util 생성자, 권한, 로그인한 사용자의 데이터를 활용하여 사용자 접근 권한을 판별한다.&amp;lt;module-system-common/src/main/java/kr/ac/univ/util/AccessCheck.java&amp;gt;package kr.ac.univ.util;import org.springframework.security.core.Authentication;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.security.core.userdetails.UserDetails;public class AccessCheck { /** * [일반적인 상황에서 사용자 권한에 따른 접근 가능 여부] * &amp;lt;p&amp;gt; * root: 모든 권한에 대한 접근 허용, admin 페이지 접근 가능 * manager: 작성자 권한이 root인 경우 접근 불가, 작성자 권한이 manager인 경우 로그인한 사용자의 username과 작성자가 같은 경우 접근 허용, 작성자 권한이 general인 경우 접근 허용, admin 페이지 접근 가능 * general: 작성자 권한이 root, manager인 경우 접근 불가, 작성자 권한이 general인 경우 로그인한 사용자의 username과 작성자가 같은 경우 접근 허용 * non_user: 로그인 불가 * anonymous: 로그인 불가 * * @param createdBy * @return */ public static Boolean isAccessInGeneral(String createdBy, String authorityType) { Authentication authentication = SecurityContextHolder.getContext().getAuthentication(); boolean result = false; // 비인증 사용자, 인증이 안된 경우, authentication 객체가 null인 경우 // -&amp;gt; 접근 불가 if (!&quot;anonymousUser&quot;.equals(authentication.getPrincipal()) || !authentication.isAuthenticated() || EmptyUtil.isEmpty(authentication)) { UserDetails userDetails = (UserDetails) authentication.getPrincipal(); String authenticationUsername = userDetails.getUsername(); for (GrantedAuthority grantedAuthority : userDetails.getAuthorities()) { switch (grantedAuthority.getAuthority()) { // 로그인한 사용자의 권한: root // -&amp;gt; 접근 가능 case &quot;root&quot;: result = true; break; case &quot;manager&quot;: // createdBy: root // -&amp;gt; 접근 불가 if (&quot;root&quot;.equals(createdBy)) { result = false; } // username authority: MANAGER // 로그인한 사용자의 username과 username: 다름 // -&amp;gt; 접근 불가 else if (&quot;manager&quot;.equals(authorityType) &amp;amp;&amp;amp; !authenticationUsername.equals(createdBy)) { result = false; } // 나머지 조건 // -&amp;gt; 접근 가능 else { result = true; } break; default: // 로그인한 사용자의 username과 createdBy: 같음 // -&amp;gt; 접근 가능 if (authenticationUsername.equals(createdBy)) { result = true; } // 로그인한 사용자의 username과 createdBy: 다름 // -&amp;gt; 접근 불가 else { result = false; } break; } } } return result; } /** * [module-app-admin user에서 사용자 권한에 따른 접근 가능 여부] * &amp;lt;p&amp;gt; * 비인증 사용자인 경우 접근 불가 * root: 모든 권한에 대한 접근 허용 * manager: 작성자가 root인 경우 접근 허용, 로그인한 사용자의 username과 작성자가 같은 경우 접근 허용 * * @param createdBy * @return */ public static Boolean isAccessInModuleAdminUser(String createdBy, String username, String authorityType) { Authentication authentication = SecurityContextHolder.getContext().getAuthentication(); boolean result = false; // 비인증 사용자, 인증이 안된 경우, authentication 객체가 null인 경우 // -&amp;gt; 접근 불가 if (!&quot;anonymousUser&quot;.equals(authentication.getPrincipal()) || !authentication.isAuthenticated() || EmptyUtil.isEmpty(authentication)) { UserDetails userDetails = (UserDetails) authentication.getPrincipal(); String authenticationUsername = userDetails.getUsername(); for (GrantedAuthority grantedAuthority : userDetails.getAuthorities()) { switch (grantedAuthority.getAuthority()) { // 로그인한 사용자의 권한: root // -&amp;gt; 접근 가능 case &quot;root&quot;: result = true; break; case &quot;manager&quot;: // 로그인한 사용자의 권한: manager // 로그인한 사용자의 username과 createdBy: 같음 // -&amp;gt; 접근 가능 if (authenticationUsername.equals(createdBy)) { result = true; } // 로그인한 사용자의 권한: manager // username의 권한 general || non_user // -&amp;gt; 접근 가능 else if ((&quot;general&quot;.equals(authorityType) || &quot;non_user&quot;.equals(authorityType))) { result = true; } // 로그인한 사용자의 권한: manager // 로그인한 사용자의 username과 username: 같음 // -&amp;gt; 접근 가능 else if (authenticationUsername.equals(username)) { result = true; } // 이외 // -&amp;gt; 접근 불가 else { result = false; } break; default: result = false; break; } } } return result; } /** * [module-app-web user에서 사용자 권한에 따른 접근 가능 여부] * &amp;lt;p&amp;gt; * 비인증 사용자인 경우 접근 불가 * 작성자가 root인 경우 접근 허용 * 작성자 권한이 MANAGER인 경우 접근 허용 * 작성자와 사용자 아이디가 같은 경우 접근 허용 * * @param createdBy * @return */ public static Boolean isAccessInModuleWebUser(String createdBy, String username, String authorityType) { Authentication authentication = SecurityContextHolder.getContext().getAuthentication(); boolean result = false; // 비인증 사용자, 인증이 안된 경우, authentication 객체가 null인 경우 // -&amp;gt; 접근 불가 if (&quot;anonymousUser&quot;.equals(authentication.getPrincipal()) || !authentication.isAuthenticated() || EmptyUtil.isEmpty(authentication)) { result = false; } else { UserDetails userDetails = (UserDetails) authentication.getPrincipal(); String authenticationUsername = userDetails.getUsername(); // createdBy: root // username authority: MANAGER // 로그인한 사용자의 username과 username: 같음 // -&amp;gt; 접근 가능 if (&quot;root&quot;.equals(createdBy) || &quot;MANAGER&quot;.equals(authorityType) &amp;amp;&amp;amp; username.equals(authenticationUsername)) { result = true; } // 로그인한 사용자의 username과 createdBy: 같음 // -&amp;gt; 접근 가능 else if (authenticationUsername.equals(createdBy)) { result = true; } else { result = false; } } return result; }}프로젝트 실행 및 결과 다음 이미지와 같이 게시글에 댓글이 등록된 것을 확인할 수 있다. ID: manager2, 권한: manager인 사용자는 앞서 설명한 권한 설정에 따라 접근할 수 있는 댓글이 다르다. ID: manager2 사용자는 ID: manager 사용자와 ID: root 사용자의 댓글에 접근할 수 없다. 만약 비인증 사용자가 ID: root 사용자가 작성한 게시글의 URI(http://localhost:8080/notice-board/form?idx=200 )로 접근하는 경우, 다음 이미지와 같이 접근을 차단한다. 이외에도 ID: root가 아닌 사용자가 ID: root 사용자가 작성한 게시글에 접근하는 경우, 접근을 차단한다." }, { "title": "Project Lab 11. 게시판 개발(JPA Audit) - 7", "url": "/posts/Project-Lab11/", "categories": "Web, Project Lab", "tags": "", "date": "2020-08-29 00:00:00 +0900", "snippet": " Spring Data JPA의 Audit을 사용하여 Table에서 공통으로 사용하는 데이터(작성자, 수정자, 생성일, 수정일)를 저장하는 방법을 소개한다. github: https://github.com/scribnote5/lab github commit: https://github.com/scribnote5/lab/commit/b8c08bb61c1a07757e0ef84aed6c5e7d5d3c35a1 최신 프로젝트 코드와 형상이 다를 수 있습니다. 게시글 코드는 참고만 하시되, 최신 코드는 github에서 확인 부탁드립니다.JPA Audit 현재 프로젝트 내 Domain은 CommonAudit(일반적인 데이터) 또는 AttachedFileAudit(첨부 파일 데이터)를 상속받는다. 이를 통해서 생성일자, 수정일자, 작성자, 수정자와 같이 모든 Table에서 공통적으로 사용하고 있는 컬럼과 1:1 매칭되도록 하였다. Table에서 공통적으로 사용하고 있는 컬럼에 데이터를 자동으로 넣어주는 기능인 Spring Data JPA의 JPA Audit을 사용하여, CommonAudit(일반적인 데이터) 또는 AttachedFileAudit(첨부 파일 데이터)의 멤버 변수를 자동으로 초기화 구현하였다.출처: https://velog.io/@conatuseus/2019-12-06-2212-%EC%9E%91%EC%84%B1%EB%90%A8-1sk3u75zo9JPA Audit 설계 Domain 클래스 멤버 필드에 생성일과 수정일을 자동으로 입력하는 @CreatedDate과 @LastModifiedDate 애노테이션을 선언하면 된다. 하지만 생정자 및 수정자를 자동으로 입력하는 @Createdyby, @LastModifiedBy 애노테이션의 경우, 게시글이 Create 및 Update 되는 모듈은 module-app-web이 아니라 module-app-api 모듈이므로 해당 애노테이션을 적용할 수 없다. 즉 사용자는 module-app-web 모듈에서 Spring Security로 로그인하였기에 사용자 데이터를 유지하고 있지만, module-app-api 모듈에서 Spring Security로 로그인되어 있지 않기 때문에 사용자 데이터가 존재하지 않는다. @CreatedBy, @LastModifiedBy 애노태이션을 대신하여, form 페이지의 input 태그를 사용하여 생정자 및 수정자 정보를 전송하도록 구현하였다. 만약 본 프로젝트와 다르게 Spring Security를 적용한 단일 프로젝트인 경우 @Createdyby, @LastModifiedBy을 사용하려고 한다면 AuditorAware 인터페이스를 구현하면 된다. 자세한 내용은 다음 출처를 참고하였다.출처: https://umanking.github.io/jpa/2019/04/12/jpa-audit.htmlhttps://mia-dahae.tistory.com/150비인증 사용자 접속 차단 form 페이지의 input 태그를 사용하여 생정자 및 수정자 정보를 전송하도록 구현하기 위한 전제 조건은, form 페이지에 접근하기 위해서는 인증된 사용자이어야 한다. 따라서 특정 권한이 요구되는 페이지에 비인증 사용자 접근을 차단하는 기능을 Spring Security에 추가하였다.출처: https://lteawoo.tistory.com/14Config .antMatchers(“/**/form”).hasAnyAuthority(“root, manager, general”): 권한을 가진 사용자만 form 페이지에 접근할 수 있다. .authenticationEntryPoint(new CustomAuthenticationEntryPoint());: 비인증 사용자가 접근하는 경우 에러가 발생하며, 해당 에러를 CustomAuthenticationEntryPoint 핸들러가 처리한다.&amp;lt;module-app-web/src/main/java/kr/ac/univ/config/SecurityConfig.java&amp;gt;...@Overrideprotected void configure(HttpSecurity http) throws Exception { http.authorizeRequests() // 페이지 권한 설정 .antMatchers(&quot;/user/list&quot;).hasAuthority(&quot;root&quot;) .antMatchers(&quot;/**/form&quot;).hasAnyAuthority(&quot;root, manager, general&quot;) .antMatchers(&quot;/h2-console/**&quot;).permitAll() // h2-console 접근 허용 .antMatchers(&quot;/**&quot;).permitAll() .and() .csrf().ignoringAntMatchers(&quot;/console/**&quot;) // h2-console csrf 제외 .and() .headers().addHeaderWriter(new XFrameOptionsHeaderWriter(new WhiteListedAllowFromStrategy(Arrays.asList(&quot;localhost&quot;)))) // he-console X-Frame-Options 제외 .frameOptions().sameOrigin() .and() // 로그인 설정 .formLogin() .loginPage(&quot;/user/login&quot;) // login 페이지 URL .loginProcessingUrl(&quot;/user/login/process&quot;) // login 수행 URL // 사용자 정의 handler .successHandler(CustomAuthenticationSuccessHandler()) .failureHandler(CustomAuthenticationFailureHandler()) .defaultSuccessUrl(&quot;/user/index&quot;) // login 성공 URL .permitAll() .and() // 로그아웃 설정 .logout() .logoutRequestMatcher(new AntPathRequestMatcher(&quot;/user/logout&quot;)) .logoutSuccessUrl(&quot;/user/logout/success&quot;) .invalidateHttpSession(true) .and() // 예외처리 .exceptionHandling() .accessDeniedPage(&quot;/user/permission-denied&quot;) // 권한이 없는 경우, 403 예외처리 핸들링 .authenticationEntryPoint(new CustomAuthenticationEntryPoint());}... 비인증 사용자가 인증된 사용자(권한을 요구하는) 페이지에 접근하는 경우 발생하는 예외를 처리한다. Http 상태를 401 에러(UnAuthorized)로 지정하고 비인증 사용자 접근 오류 페이지로 forward 한다.&amp;lt;module-app-web/src/main/java/kr/ac/univ/handler/CustomAuthenticationEntryPoint.java&amp;gt;package kr.ac.univ.handler;import org.springframework.security.core.AuthenticationException;import org.springframework.security.web.AuthenticationEntryPoint;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;public class CustomAuthenticationEntryPoint implements AuthenticationEntryPoint { @Override public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException { // 401(UnAuthorized)에러로 지정 response.setStatus(HttpServletResponse.SC_UNAUTHORIZED); // json 리턴 및 한글깨짐 수정. response.setContentType(&quot;application/json;charset=utf-8&quot;); request.getRequestDispatcher(&quot;/user/anonymous-user-permission-denied&quot;).forward(request, response); }} JPA Audit을 활용하기 위한 애노테이션(@EnableJpaAuditing)을 설정 파일에 추가하였다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/common/config/JpaAuditConfig.java&amp;gt;package kr.ac.univ.common.config;import org.springframework.context.annotation.Configuration;import org.springframework.data.jpa.repository.config.EnableJpaAuditing;@EnableJpaAuditing@Configurationpublic class JpaAuditConfig {}Domain 및 DTO 해당 클래스에서 JPA Audit을 사용하기 위한 애노테이션(@EntityListeners(AuditingEntityListener.class))을 Domain 클래스에 추가하였다. 생성일, 수정일 멤버 필드에 @CreatedDate과 @LastModifiedDate 애노테이션을 선언하였다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/common/domain/CommonAudit.java&amp;gt;package kr.ac.univ.common.domain;import lombok.Getter;import lombok.Setter;import lombok.ToString;import org.springframework.data.annotation.CreatedDate;import org.springframework.data.annotation.LastModifiedDate;import org.springframework.data.jpa.domain.support.AuditingEntityListener;import javax.persistence.*;import java.time.LocalDateTime;@MappedSuperclass@Getter@Setter@ToString@EntityListeners(AuditingEntityListener.class)public abstract class CommonAudit { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long idx; @Column(nullable = false, updatable = false) @CreatedDate private LocalDateTime createdDate; @LastModifiedDate private LocalDateTime lastModifiedDate; private String createdBy; private String lastModifiedBy;} 첨부 파일의 경우, 생성일 멤버 필드에 @CreatedDate과 애노테이션을 선언하였다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/common/domain/AttachedFileAudit.java&amp;gt;package kr.ac.univ.common.domain;import lombok.Getter;import lombok.Setter;import lombok.ToString;import org.springframework.data.annotation.CreatedDate;import org.springframework.data.jpa.domain.support.AuditingEntityListener;import javax.persistence.*;import java.time.LocalDateTime;@MappedSuperclass@Getter@Setter@ToString@EntityListeners(AuditingEntityListener.class)public abstract class AttachedFileAudit { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long idx; @CreatedDate private LocalDateTime createdDate; private String createdBy;} DTO &amp;lt;-&amp;gt; Domain 변환에 사용되는 Builder 패턴에 작성자 및 수정자 정보를 저장하는 setCreatedBy(createdBy));, setLastModifiedBy(lastModifiedBy); 소스 코드를 추가하였다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/noticeBoard/domain/NoticeBoard.java&amp;gt;package kr.ac.univ.noticeBoard.domain;import kr.ac.univ.common.domain.CommonAudit;import kr.ac.univ.common.domain.enums.ActiveStatus;import lombok.Builder;import lombok.Getter;import lombok.NoArgsConstructor;import lombok.ToString;import javax.persistence.*;@Getter@NoArgsConstructor@Entity@Table@ToStringpublic class NoticeBoard extends CommonAudit { @Column private String title; @Column private String content; @Column @Enumerated(EnumType.STRING) private ActiveStatus activeStatus; @Column private Long viewCount = 0L; @Builder public NoticeBoard(Long idx, String createdBy, String lastModifiedBy, String title, String content, ActiveStatus activeStatus) { setIdx(idx); setCreatedBy(createdBy); setLastModifiedBy(lastModifiedBy); this.title = title; this.content = content; this.activeStatus = activeStatus; } public void update(NoticeBoard noticeBoard) { this.title = noticeBoard.getTitle(); this.content = noticeBoard.getContent(); this.activeStatus = noticeBoard.getActiveStatus(); }}&amp;lt;module-domain-core/src/main/java/kr/ac/univ/noticeBoard/domain/NoticeBoardAttachedFile.java&amp;gt;package kr.ac.univ.noticeBoard.domain;import kr.ac.univ.common.domain.AttachedFileAudit;import lombok.Builder;import lombok.Getter;import lombok.NoArgsConstructor;import lombok.ToString;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.Table;@Getter@NoArgsConstructor@Entity@Table@ToStringpublic class NoticeBoardAttachedFile extends AttachedFileAudit { @Column private Long noticeBoardIdx; @Column private String fileName; @Column private String savedFileName; @Column private String fileSize; @Builder public NoticeBoardAttachedFile(String createdBy, Long noticeBoardIdx, String fileName, String savedFileName, String fileSize) { setCreatedBy(createdBy); this.noticeBoardIdx = noticeBoardIdx; this.fileName = fileName; this.savedFileName = savedFileName; this.fileSize = fileSize; }}Test 새로 등록된 게시글의 생성일이 JPA Audit에 의해 과거 시간 이후에 등록되었는지 테스트하였다.&amp;lt;module-app-web/src/test/java/kr/ac/univ/JpaAuditTest.java&amp;gt;package kr.ac.univ;import java.time.LocalDateTime;import java.util.List;import java.util.stream.IntStream;import kr.ac.univ.common.domain.enums.ActiveStatus;import kr.ac.univ.noticeBoard.domain.NoticeBoard;import kr.ac.univ.noticeBoard.repository.NoticeBoardRepository;import kr.ac.univ.noticeBoard.repository.NoticeBoardRepositoryImpl;import lombok.extern.slf4j.Slf4j;import org.junit.Assert;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.EnableAutoConfiguration;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit.jupiter.SpringExtension;@Slf4j@SpringBootTest@EnableAutoConfiguration@ExtendWith(SpringExtension.class)public class JpaAuditTest { @Autowired NoticeBoardRepository noticeBoardRepository; @Autowired NoticeBoardRepositoryImpl noticeBoardRepositoryImpl; @BeforeEach public void init() { IntStream.rangeClosed(1, 200) .forEach(index -&amp;gt; noticeBoardRepository.save(NoticeBoard.builder() .title(&quot;게시글&quot; + index) .content(&quot;컨텐츠&quot;) .activeStatus(ActiveStatus.ACTIVE) .build())); } @Test @DisplayName(&quot;JPA Auditing 테스트&quot;) public void Test() { List&amp;lt;NoticeBoard&amp;gt; list = noticeBoardRepository.findAll(); LocalDateTime pastDateTime = LocalDateTime.of(2020,4,26,0,0,0,0); // 새로 생성한 게시글이 과거 시간 이후에 생성되어 있는지 확인한다. for (NoticeBoard noticeboard : list) { Assert.assertEquals(noticeboard.getCreatedDate().isAfter(pastDateTime), true); } }}Service 게시글의 경우 DTO에 데이터가 저장되어 전달되지만, 첨부 파일의 경우 데이터를 객체에 저장하여 전달하지 않기 때문에 작성자 데이터를 부가적으로 전달 받는다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/noticeBoard/service/NoticeBoardAttachedFileService.java&amp;gt;.../** * 첨부 파일 업로드 * * @param noticeBoardIdx * @param files */ public void uploadAttachedFile(Long noticeBoardIdx, String createdBy, MultipartFile[] files) throws Exception { NoticeBoardAttachedFile uploadFile = new NoticeBoardAttachedFile(); for (MultipartFile file : files) { String uuid = UUID.randomUUID().toString().replaceAll(&quot;-&quot;, &quot;&quot;); String savedFileName = uuid + &quot;_&quot; + file.getOriginalFilename(); // 대체 가능 // File savedFile = new File(&quot;./upload/&quot;, savedFileName); // FileCopyUtils.copy(file.getBytes(), savedFile); Path path = Paths.get(&quot;./upload/&quot; + savedFileName); Files.write(path, file.getBytes()); uploadFile = NoticeBoardAttachedFile.builder() .noticeBoardIdx(noticeBoardIdx) .createdBy(createdBy) .fileName(file.getOriginalFilename()) .savedFileName(savedFileName) .fileSize(FileUtil.convertFileSize(file.getSize())) .build(); insertAttachedFile(uploadFile); } }...Controller 사용자가 로그인 페이지에 접근할 때 두가지 경우가 존재하며, 이에 따른 사용자가 이동하는 페이지를 세분화 하였다. 비인증 사용자: 로그인 페이지로 이동한다. 인증 사용자: index 페이지로 이동한다.&amp;lt;module-app-web/src/main/java/kr/ac/univ/controller/UserController.java&amp;gt;...//Login Page@GetMapping(&quot;/login&quot;)public String login(@AuthenticationPrincipal UserPrincipal userPrincipal) { String returnPage = null; // 사용자가 로그인하지 않는 경우 login 페이지로 이동 if(EmptyUtil.isEmpty(userPrincipal)) { returnPage = &quot;/user/login&quot;; } // 사용자가 로그인한 경우 index 페이지로 이동 else { returnPage = &quot;user/index&quot;; } return returnPage;}...RestController 게시글의 경우 DTO에 데이터가 저장되어 전달되지만, 첨부 파일의 경우 데이터를 객체에 저장하여 전달하지 않기 때문에 작성자 데이터를 view에서 부가적으로 전달 받는다.&amp;lt;module-app-api/src/main/java/kr/ac/univ/controller/NoticeBoardRestController.java&amp;gt;// 첨부 파일 업로드@PostMapping(&quot;/attachedFile&quot;)public ResponseEntity&amp;lt;?&amp;gt; uploadAttachedFile(Long idx, String createdBy, MultipartFile[] files) throws Exception { noticeBoardAttachedFileService.uploadAttachedFile(idx, createdBy, files); return new ResponseEntity&amp;lt;&amp;gt;(&quot;{}&quot;, HttpStatus.CREATED);}View 작성자 및 수정자 데이터는 input hidden type에 저장되며, 해당 데이터는 RestController로 전달된다. authentication 객체는 Spring Security에서 인증한 사용자의 세션 데이터가 저장된다.&amp;lt;module-app-web/src/main/resources/templates/noticeBoard/form.html&amp;gt;...&amp;lt;!-- input type=&quot;hidden&quot; --&amp;gt;&amp;lt;input type=&quot;hidden&quot; name=&quot;idx&quot; th:value=&quot;*{idx}&quot;/&amp;gt;&amp;lt;input type=&quot;hidden&quot; name=&quot;createdBy&quot; th:value=&quot;*{#strings.isEmpty(createdBy)} ? ${#authentication.principal.username} : *{createdBy}&quot; /&amp;gt;&amp;lt;input type=&quot;hidden&quot; name=&quot;lastModifiedBy&quot; th:value=&quot;${#authentication.principal.username}&quot; /&amp;gt;...// 파일 업로드var formData = new FormData();for (var i = 0; i &amp;lt; insertFileArray.length; i++) { formData.append(&quot;files&quot;, insertFileArray[i]);}formData.append(&quot;idx&quot;, noticeBoardIdx);formData.append(&quot;createdBy&quot;, document.getElementsByName(&quot;createdBy&quot;)[0].value);... 비인증 사용자가 form 페이지에 접근하는 경우 이동하는 페이지다.&amp;lt;module-app-web/src/main/resources/templates/user/anonymous-user-permission-denied.html&amp;gt;&amp;lt;script&amp;gt; alert(&quot;The login is required to access the page.&quot;); location.href = &quot;/user/login&quot;&amp;lt;/script&amp;gt;프로젝트 실행 및 결과 다음과 이미지와 게시글을 새로 등록하면 작성자, 생성일, 수정일 정보가 등록되어 표시되는 것을 확인할 수 있다." }, { "title": "Project Lab 10. 로그인 구현(Spring Security) - 1", "url": "/posts/Project-Lab10/", "categories": "Web, Project Lab", "tags": "", "date": "2020-08-23 00:00:00 +0900", "snippet": " Spring Sercurity를 사용하여 로그인 기능 구현 개발 과정을 소개한다. github: https://github.com/scribnote5/lab github commit: https://github.com/scribnote5/lab/commit/566099ff988532cec4f6a0466d158d95258b8d9f 최신 프로젝트 코드와 형상이 다를 수 있습니다. 게시글 코드는 참고만 하시되, 최신 코드는 github에서 확인 부탁드립니다.Spring Security Spring Sercurity는 스프링 기반의 어플리케이션의 보안(인증과 권한, 인가 등)을 담당하는 스프링의 하위 프레임워크이다. 보안 관련하여 다양한 옵션을 제공한다. 해당 이미지는 Spring Security 인증 아키텍처이며, Spring Security를 이해하기 위한 자세한 설명은 하단 출처를 참고하였다.출처: https://sjh836.tistory.com/165 https://webfirewood.tistory.com/m/115?category=694472로그인 구현 및 설계 Spring Security를 사용하여 로그인에 필요한 전반적인 기능(파일 업로드를 제공하는 사용자 CRUD 페이지, 권한, 로그아웃, 로그인 실패시 메시지 출력 등)들을 구현하였다. Spring Security 관련 기능들은 하단 출처를 주로 참고하여 개발하였다. 본 프로젝트에서는 Spring Security Session을 사용하여서 로그인을 구현하였다. 로그인 기능 관련 최신 트렌드는 Session 방식이 아니라 JWT(JSON WEB TOKEN) 방식이다. JWT는 Session 보다 서버의 부하를 줄일 수 있는 방식으로 추후 프로젝트 개발할 때 JWT 방식을 사용할 예정이다.출처: https://victorydntmd.tistory.com/328https://ict-nroo.tistory.com/118권한 종류 프로젝트에서 분류한 권한 종류는 다음과 같다. root: 모든 권한에 대한 접근 허용, 특정 경로(admin 페이지) 접근 가능 manager: general 권한에 대한 접근 허용, 본인이 create한 게시글에 update 및 delete 가능 general: 본인이 create한 게시글에 update 및 delete 가능 non_user: 비회원으로서, 게시글 read만 가능 anonymous: 게시글 read만 가능Spring Sercurity와 H2-console 같이 사용하기 Spring Security를 적용한 프로젝트에서 H2-DB를 같이 사용하기 위해서는 부가적인 보안 설정이 필요하다. 자세한 설정은 하단 출처를 참고하였다.출처:https://github.com/HomoEfficio/dev-tips/blob/master/Spring%20Security%EC%99%80%20h2-console%20%ED%95%A8%EA%BB%98%20%EC%93%B0%EA%B8%B0.md사용자 테이블 설계 사용자의 정보를 저장하는 테이블을 생성한다.&amp;lt;user table&amp;gt;CREATE TABLE user( idx bigint auto_increment primary key, created_by varchar(255) null, created_date datetime null, last_modified_by varchar(255) null, last_modified_date datetime null, active_status varchar(255) null, admission_date date null, authority_type varchar(255) null, birth_date date null, contact varchar(255) null, email varchar(255) null, private_email varchar(255) null, english_name varchar(255) null, gender varchar(255) null, graduated_date date null, introduction longtext null, korean_name varchar(255) null, username varchar(255) null, user_status varchar(255) null, user_type varchar(255) null, messanger_id varchar(255) null, password varchar(255) null, web_page varchar(255) null, workplace varchar(255) null); 사용자의 이미지 파일 업로드시 파일 정보를 저장하는 테이블을 생성한다.&amp;lt;user_attached_file table&amp;gt;CREATE TABLE user_attached_file ( idx bigint auto_increment primary key, created_by varchar(255) null, created_date datetime(6) null, file_name varchar(255) null, saved_file_name varchar(255) null, user_idx bigint null, file_size varchar(255) null);의존성 관리 module-app-web는 view인 thymeleaf에서 spring Security 관련 태그를 사용가능 하도록 thymeleaf-extras-springSecurity5 의존성 라이브러리를 추가하였다. 모든 모듈에서 spring-boot-starter-Security 의존성 라이브러리를 사용하도록 변경하였다.&amp;lt;build.gradle&amp;gt;// 프로젝트 개발에 필요한 공통 의존성 라이브러리를 선언한다.dependencies { // spring boot implementation &quot;org.springframework.boot:spring-boot-starter-web&quot; implementation &quot;org.springframework.boot:spring-boot-starter-data-jpa&quot; implementation &quot;org.springframework.boot:spring-boot-starter-Security&quot; runtimeOnly &quot;org.springframework.boot:spring-boot-devtools&quot;...project(&quot;:module-app-web&quot;) { dependencies { compile project(&quot;:module-system-common&quot;) compile project(&quot;:module-domain-core&quot;) implementation &quot;org.springframework.boot:spring-boot-starter-thymeleaf&quot; implementation &quot;org.thymeleaf.extras:thymeleaf-extras-springSecurity5&quot; }}project(&quot;module-app-api&quot;) { dependencies { compile project(&quot;:module-system-common&quot;) compile project(&quot;:module-domain-core&quot;) // spring-boot-starter-Security 의존성 라이브러리를 전체 프로젝트로 변경 }...Spring Security 설정 파일 Spring Security 기본 설정을 개발자가 새로 정의한 파일이다. 각 설정에 대한 설명은 주석을, 인증 처리를 위한 CORS 관련 설명은 하단 출처를 참고하였다.SecurityConfig.java에서 설정한 항목 static 디렉터리 파일들을 Spring Security 보안 설정에서 제외 페이지 접근 권한 설정 비밀번호 암호화(BCryptPasswordEncoder) 라이브러리 사용 로그인 및 로그아웃 설정 로그인 성공 및 실패시 이를 처리하는 사용자가 정의 예외처리 handelr 등록출처: https://oddpoet.net/blog/2017/04/27/cors-with-spring-Security/&amp;lt;module-app-web/src/main/java/kr/ac/univ/config/SecurityConfig.java&amp;gt;package kr.ac.univ.config;import kr.ac.univ.handler.CustomAuthenticationFailureHandler;import kr.ac.univ.handler.CustomAuthenticationSuccessHandler;import kr.ac.univ.user.service.UserService;import lombok.AllArgsConstructor;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.Security.authentication.AuthenticationManager;import org.springframework.Security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.Security.config.annotation.web.builders.HttpSecurity;import org.springframework.Security.config.annotation.web.builders.WebSecurity;import org.springframework.Security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.Security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.Security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.Security.crypto.password.PasswordEncoder;import org.springframework.Security.web.authentication.AuthenticationFailureHandler;import org.springframework.Security.web.authentication.AuthenticationSuccessHandler;import org.springframework.Security.web.header.writers.frameoptions.WhiteListedAllowFromStrategy;import org.springframework.Security.web.header.writers.frameoptions.XFrameOptionsHeaderWriter;import org.springframework.Security.web.util.matcher.AntPathRequestMatcher;import java.util.Arrays;@Configuration@EnableWebSecurity@AllArgsConstructorpublic class SecurityConfig extends WebSecurityConfigurerAdapter { private UserService userService; @Override public void configure(WebSecurity web) throws Exception { // static 디렉터리의 하위 파일 목록은 인증 무시 ( = 항상통과 ) web.ignoring().antMatchers(&quot;/css/**&quot;, &quot;/js/**&quot;, &quot;/imgages/**&quot;, &quot;/summernote/**&quot;); } @Override protected void configure(HttpSecurity http) throws Exception { http.authorizeRequests() // 페이지 권한 설정 .antMatchers(&quot;/user/list&quot;).hasAuthority(&quot;root&quot;) .antMatchers(&quot;/h2-console/**&quot;).permitAll() // h2-console 접근 허용 .antMatchers(&quot;/**&quot;).permitAll() .and() .csrf().ignoringAntMatchers(&quot;/console/**&quot;) // h2-console csrf 제외 .and() .headers().addHeaderWriter(new XFrameOptionsHeaderWriter(new WhiteListedAllowFromStrategy(Arrays.asList(&quot;localhost&quot;)))) // he-console X-Frame-Options 제외 .frameOptions().sameOrigin() .and() // 로그인 설정 .formLogin() .loginPage(&quot;/user/login&quot;) // login 페이지 URL // 사용자 정의 handler .successHandler(CustomAuthenticationSuccessHandler()) .failureHandler(CustomAuthenticationFailureHandler()) .defaultSuccessUrl(&quot;/user/index&quot;) // login 성공 URL .permitAll() .and() // 로그아웃 설정 .logout() .logoutRequestMatcher(new AntPathRequestMatcher(&quot;/user/logout&quot;)) .logoutSuccessUrl(&quot;/user/logout/success&quot;) .invalidateHttpSession(true) .and() // 권한이 없는 경우, 403 예외처리 핸들링 .exceptionHandling().accessDeniedPage(&quot;/user/permission-denied&quot;); } @Bean public PasswordEncoder passwordEncoder() { return new BCryptPasswordEncoder(); } /** * 비밀번호 암호화에 사용될 PasswordEncoder를 BCryptPasswordEncoder로 사용 * BCryptPasswordEncoder는 해시 뿐만 아니라 Salt를 넣는 작업을 수행하므로, 입력 값이 같음에도 매번 다른 encoded된 값을 반환함 * * @return */ @Override public void configure(AuthenticationManagerBuilder auth) throws Exception { auth.userDetailsService(userService).passwordEncoder(passwordEncoder()); } /** * 로그인 성공 후 수행하는 handler * * @return */ @Bean public AuthenticationSuccessHandler CustomAuthenticationSuccessHandler() { return new CustomAuthenticationSuccessHandler(); } /** * 로그인 실패 후 수행하는 handler * * @return */ @Bean public AuthenticationFailureHandler CustomAuthenticationFailureHandler() { return new CustomAuthenticationFailureHandler(); } /** * 개발자가 원하는 시점에 로그인을 할 수 있도록 구현 가능 * * @return * @throws Exception */ @Override @Bean public AuthenticationManager authenticationManagerBean() throws Exception { return super.authenticationManagerBean(); }}Handler 로그인 실패 또는 성공시 수행하는 handler를 사용자가 새로 정의한 파일이다. 로그인 실패시 실패한 에러 메시와 id를 controller에 전달하며, controller는 다시 로그인 페이지에 전달한다. 에러 종류에 따른 에러 메시지는 각 주석을 참고하면 된다.출처: https://u2ful.tistory.com/35&amp;lt;module-app-web/src/main/java/kr/ac/univ/handler/CustomAuthenticationFailureHandler.java&amp;gt;package kr.ac.univ.handler;import org.springframework.Security.authentication.*;import org.springframework.Security.core.AuthenticationException;import org.springframework.Security.web.authentication.AuthenticationFailureHandler;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;public class CustomAuthenticationFailureHandler implements AuthenticationFailureHandler { @Override public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception) throws IOException, ServletException { // 로그인 실패시 기능 구현 String username = request.getParameter(&quot;username&quot;); String errormsg = null; if (exception instanceof BadCredentialsException) { errormsg = &quot;The email or passwords do not match.&quot;; } else if (exception instanceof InternalAuthenticationServiceException) { errormsg = &quot;The authentication is not processed due to system problem that occured internally.&quot;; } else if (exception instanceof AuthenticationCredentialsNotFoundException) { errormsg = &quot;The authentication is not found.&quot;; } // 추후 잠금 및 비활성화 기능 구현 else if (exception instanceof LockedException) { errormsg = &quot;This user is locked.&quot;; } else if (exception instanceof DisabledException) { errormsg = &quot;This user is disabled.&quot;; } request.setAttribute(&quot;username&quot;, username); request.setAttribute(&quot;errormsg&quot;, errormsg); request.getRequestDispatcher(&quot;/user/login/fail&quot;).forward(request, response); }} 로그인 성공시 수행하는 handler로, 추후 admon 페이지가 개발되면 root와 manager 권한을 가진 사용자를 admin 페이지로 redirect 시킬 예정이다.&amp;lt;module-app-web/src/main/java/kr/ac/univ/handler/CustomAuthenticationSuccessHandler.java&amp;gt;package kr.ac.univ.handler;import java.io.IOException;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.springframework.context.annotation.Configuration;import org.springframework.Security.core.Authentication;import org.springframework.Security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;@Configurationpublic class CustomAuthenticationSuccessHandler extends SavedRequestAwareAuthenticationSuccessHandler { @Override public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws ServletException, IOException { // 로그인 성공시 기능 구현 super.onAuthenticationSuccess(request, response, authentication); }}UserPrincipal Spring Security는 UserDetails 인터페이스를 구현한 UserPricipal 클래스에 데이터를 저장한 다음 사용자 인증을 진행한다. 사용자가 로그인하는 동안 UserPricipal 클래스를 통하여 데이터를 불러올 수 있다. UserPricipal 클래스의 멤버 변수와 생성자를 변경하면, 사용자가 로그인하는 동안 UserPricipal 클래스가 저장하는 데이터를 변경할 수 있다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/user/dto/UserPrincipal.java&amp;gt;package kr.ac.univ.user.dto;import kr.ac.univ.common.domain.enums.ActiveStatus;import kr.ac.univ.user.domain.User;import kr.ac.univ.user.domain.enums.AuthorityType;import lombok.*;import org.springframework.Security.core.GrantedAuthority;import org.springframework.Security.core.authority.SimpleGrantedAuthority;import org.springframework.Security.core.userdetails.UserDetails;import java.util.ArrayList;import java.util.Collection;import java.util.List;@Getter@Setter@NoArgsConstructor@ToStringpublic class UserPrincipal implements UserDetails { private long idx; @Getter(value = AccessLevel.NONE) private String username; @Getter(value = AccessLevel.NONE) private String password; private String koreanName; private String englishName; private ActiveStatus activeStatus; private AuthorityType authorityType; public UserPrincipal(User user) { setIdx(user.getIdx()); setUsername(user.getUsername()); setPassword(user.getPassword()); setKoreanName(user.getKoreanName()); setEnglishName(user.getEnglishName()); setActiveStatus(user.getActiveStatus()); setAuthorityType(user.getAuthorityType()); } @Override public Collection&amp;lt;? extends GrantedAuthority&amp;gt; getAuthorities() { List&amp;lt;GrantedAuthority&amp;gt; authorities = new ArrayList&amp;lt;&amp;gt;(); switch (this.getAuthorityType()) { case ROOT: authorities.add(new SimpleGrantedAuthority(AuthorityType.ROOT.getAuthorityType())); break; case MANAGER: authorities.add(new SimpleGrantedAuthority(AuthorityType.MANAGER.getAuthorityType())); break; case GENERAL: authorities.add(new SimpleGrantedAuthority(AuthorityType.GENERAL.getAuthorityType())); break; default: authorities.add(new SimpleGrantedAuthority(AuthorityType.NON_USER.getAuthorityType())); break; } return authorities; } @Override public String getPassword() { return this.password; } @Override public String getUsername() { return this.username; } @Override public boolean isAccountNonExpired() { return true; } @Override public boolean isAccountNonLocked() { return true; } @Override public boolean isCredentialsNonExpired() { return true; } @Override public boolean isEnabled() { return this.getActiveStatus() == ActiveStatus.ACTIVE; }}Repository User에서 사용하는 쿼리다. countByMemberId: 매개변수의 username과 같은 사용자를 모두 검색한다.(username 중복 조회) findAllByUsernameContaining, findAllByKoreanNameContaining, findAllByEmailContaining: username, koreanname, email을 검색할 때 사용하는 메소드다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/user/repository/UserRepository.java&amp;gt;package kr.ac.univ.user.repository;import kr.ac.univ.noticeBoard.domain.NoticeBoard;import kr.ac.univ.user.domain.User;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;import org.springframework.data.jpa.repository.JpaRepository;import org.springframework.stereotype.Repository;@Repositorypublic interface UserRepository extends JpaRepository&amp;lt;User, Long&amp;gt; { Long countByUsername(String username); User findByUsername(String username); Page&amp;lt;User&amp;gt; findAllByUsernameContaining(Pageable pageable, String username); Page&amp;lt;User&amp;gt; findAllByKoreanNameContaining(Pageable pageable, String koreanName); Page&amp;lt;User&amp;gt; findAllByEmailContaining(Pageable pageable, String email);}Service UserDetails 인터페이스를 구현하면 Spring Security에서 해당 인터페이스를 구현한 클래스에서 인증 작업을 수행한다. 사용자가 새로 정의한 메소드는 다음과 같다. joinUser: 회원 가입 할 때 사용하는 메소드로, 비밀번호는 암호화하여 DB에 저장한다. loadUserByUsername: 사용자가 새로 정의한 로그인 메소스다. Spring Security가 사용자 인증시 데이터를 저장하는 UserPrincipal 객체를 생성 후 반환한다. 예외 처리는 추후 개발 예정이다.출처: https://to-dy.tistory.com/86&amp;lt;module-domain-core/src/main/java/kr/ac/univ/user/service/UserService.java&amp;gt;package kr.ac.univ.user.service;import kr.ac.univ.common.dto.SearchDto;import kr.ac.univ.user.domain.User;import kr.ac.univ.user.dto.UserDto;import kr.ac.univ.user.dto.UserPrincipal;import kr.ac.univ.user.dto.mapper.UserMapper;import kr.ac.univ.user.repository.UserRepository;import kr.ac.univ.util.EmptyUtil;import org.springframework.data.domain.*;import org.springframework.Security.core.userdetails.UserDetails;import org.springframework.Security.core.userdetails.UserDetailsService;import org.springframework.Security.core.userdetails.UsernameNotFoundException;import org.springframework.Security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;@Servicepublic class UserService implements UserDetailsService { private final UserRepository userRepository; public UserService(UserRepository userRepository) { this.userRepository = userRepository; } public Page&amp;lt;UserDto&amp;gt; findUserList(Pageable pageable, SearchDto searchDto) { Page&amp;lt;User&amp;gt; userList = null; Page&amp;lt;UserDto&amp;gt; userDtoList = null; pageable = PageRequest.of(pageable.getPageNumber() &amp;lt;= 0 ? 0 : pageable.getPageNumber() - 1, pageable.getPageSize(), Sort.Direction.DESC, &quot;idx&quot;); switch (searchDto.getSearchType()) { case &quot;USER_ID&quot;: userList = userRepository.findAllByUsernameContaining(pageable, searchDto.getKeyword()); break; case &quot;KOREAN_NAME&quot;: userList = userRepository.findAllByKoreanNameContaining(pageable, searchDto.getKeyword()); break; case &quot;Email&quot;: userList = userRepository.findAllByEmailContaining(pageable, searchDto.getKeyword()); break; default: userList = userRepository.findAll(pageable); break; } userDtoList = new PageImpl&amp;lt;UserDto&amp;gt;(UserMapper.INSTANCE.toDto(userList.getContent()), pageable, userList.getTotalElements()); return userDtoList; } /** * 회원 가입 * * @param userDto * @return */ @Transactional public Long joinUser(UserDto userDto) { // 비밀번호 암호화 BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder(); userDto.setPassword(passwordEncoder.encode(userDto.getPassword())); return userRepository.save(UserMapper.INSTANCE.toEntity(userDto)).getIdx(); } /** * 사용자 정의 로그인 * * @param username * @return * @throws UsernameNotFoundException */ @Override public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException { User user = userRepository.findByUsername(username); UserPrincipal userPrincipal = null; if(EmptyUtil.isEmpty(user)) { // 추후 변경: 에러 처리 throw new UsernameNotFoundException(&quot;Username is not found&quot;); } else { userPrincipal = new UserPrincipal(user); } return userPrincipal; } public Long insertUser(User user) { return userRepository.save(user).getIdx(); } public User findUserByIdx(Long idx) { return userRepository.findById(idx).orElse(new User()); } @Transactional public Long updateUser(Long idx, UserDto userDto) { User persistUser = userRepository.getOne(idx); User user = UserMapper.INSTANCE.toEntity(userDto); persistUser.update(user); return userRepository.save(persistUser).getIdx(); } public void deleteUserByIdx(Long idx) { userRepository.deleteById(idx); } public boolean isDupulicationUserByUsername(String username) { return (userRepository.countByUsername(username) &amp;gt; 0) ? true : false; } public User findByUsername(String username) { return userRepository.findByUsername(username); }}Controller User(로그인, CRUD 페이지) 관련한 URI 매핑을 담당한다.&amp;lt;module-app-web/src/main/java/kr/ac/univ/controller/UserController.java&amp;gt;package kr.ac.univ.controller;import kr.ac.univ.common.dto.SearchDto;import kr.ac.univ.user.dto.UserDto;import kr.ac.univ.user.dto.UserPrincipal;import kr.ac.univ.user.dto.mapper.UserMapper;import kr.ac.univ.user.service.UserAttachedFileService;import kr.ac.univ.user.service.UserService;import org.springframework.data.domain.Pageable;import org.springframework.data.web.PageableDefault;import org.springframework.Security.core.annotation.AuthenticationPrincipal;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import javax.servlet.http.HttpServletRequest;@Controller@RequestMapping(&quot;/user&quot;)public class UserController { private final UserService userService; private final UserAttachedFileService userAttachedFileService; public UserController(UserService userService, UserAttachedFileService userAttachedFileService) { this.userService = userService; this.userAttachedFileService = userAttachedFileService; } // Login Index @GetMapping(&quot;/index&quot;) public String index(@AuthenticationPrincipal UserPrincipal userPrincipal, Model model) { model.addAttribute(&quot;userDto&quot;, userPrincipal); return &quot;/user/index&quot;; } //Login Page @GetMapping(&quot;/login&quot;) public String login() { return &quot;/user/login&quot;; } // Login Fail @PostMapping(&quot;/login/fail&quot;) public String loginFail(HttpServletRequest request, String errormsg) { return &quot;/user/login&quot;; } // Logout @GetMapping(&quot;/logout/success&quot;) public String logout() { return &quot;/user/logoutSuccess&quot;; } // Permission Denied @GetMapping(&quot;/permission-denied&quot;) public String permissionDenied() { return &quot;/user/permission-denied&quot;; } // List @GetMapping(&quot;/list&quot;) public String noticeBoardList(@PageableDefault Pageable pageable, SearchDto searchDto, Model model) { model.addAttribute(&quot;userDtoList&quot;, userService.findUserList(pageable, searchDto)); return &quot;/user/list&quot;; } // Form Update @GetMapping(&quot;/form{idx}&quot;) public String loginForm(@RequestParam(value = &quot;idx&quot;, defaultValue = &quot;0&quot;) Long idx, Model model) { UserDto userDto = null; userDto = UserMapper.INSTANCE.toDto(userService.findUserByIdx(idx)); userDto = UserMapper.INSTANCE.toDto(userDto, userAttachedFileService.findAttachedFileByUserIdx(idx)); model.addAttribute(&quot;userDto&quot;, userDto); return &quot;/user/form&quot;; } // Read @GetMapping({&quot;&quot;, &quot;/&quot;}) public String noticeBoardRead(@RequestParam(value = &quot;idx&quot;, defaultValue = &quot;0&quot;) Long idx, Model model) { UserDto userDto = null; userDto = UserMapper.INSTANCE.toDto(userService.findUserByIdx(idx)); userDto = UserMapper.INSTANCE.toDto(userDto, userAttachedFileService.findAttachedFileByUserIdx(idx)); model.addAttribute(&quot;userDto&quot;, userDto); return &quot;/user/read&quot;; }}RestController 회원 가입하는 사용자의 ID의 중복을 확인한다. User를 Create, Update, Delete를 담당하는 메소드는 생략하였다.&amp;lt;module-app-api/src/main/java/kr/ac/univ/controller/UserRestController.java&amp;gt;...@PostMappingpublic ResponseEntity&amp;lt;?&amp;gt; postUser(@RequestBody UserDto userDto) { // 추후 변경 if (userService.isDupulicationUserByUsername(userDto.getUsername())) { } Long idx = userService.joinUser(userDto); return new ResponseEntity&amp;lt;&amp;gt;(idx, HttpStatus.CREATED);}...View CSRF(Cross-site request forgery)는 사용자가 자신의 의지와는 무관하게 공격자의 의도한 행위를 특정 웹사이트에 요청하게 하는 공격이다. CSRF 공격을 방지하기 위한 대표적인 방법은 form 페이지에 CSRF 토큰을 사용하는 것이다. View에서 CSRF 토큰을 보내면 Spring Security는 해당 토큰 값을 확인하고, 신뢰할수 있는 form 데이터인지 확인한다.출처: https://velog.io/@josworks27/CSRF-%EA%B0%9C%EB%85%90https://velog.io/@max9106/Spring-Security-csrf&amp;lt;module-app-web/src/main/resources/templates/layout/script.html&amp;gt;&amp;lt;script th:src=&quot;@{/js/jquery.min.js}&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script th:src=&quot;@{/js/jquery.serialize-object.min.js}&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script th:src=&quot;@{/js/bootstrap.bundle.min.js}&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script th:src=&quot;@{/js/fileUtil.js}&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script th:src=&quot;@{/summernote/summernote.min.js}&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script th:inline=&quot;javascript&quot;&amp;gt; $(function() { var csrfToken = /*[[${_csrf.token}]]*/ null; var csrfHeader = /*[[${_csrf.headerName}]]*/ null; $(document).ajaxSend(function (e, xhr, options) { xhr.setRequestHeader(csrfHeader, csrfToken); }); });&amp;lt;/script&amp;gt; 사용자 로그인 페이지다.&amp;lt;module-app-web/src/main/resources/templates/user/login.html&amp;gt;&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&amp;gt;&amp;lt;head&amp;gt; &amp;lt;!-- css --&amp;gt; &amp;lt;th:block th:replace=&quot;layout/css.html&quot;&amp;gt;&amp;lt;/th:block&amp;gt; &amp;lt;title&amp;gt;Login&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;!-- header --&amp;gt;&amp;lt;div class=&quot;container&quot;&amp;gt; &amp;lt;h1&amp;gt;Login&amp;lt;/h1&amp;gt; &amp;lt;hr&amp;gt; &amp;lt;form action=&quot;/user/login&quot; method=&quot;post&quot;&amp;gt; &amp;lt;input type=&quot;hidden&quot; th:name=&quot;${_csrf.parameterName}&quot; th:value=&quot;${_csrf.token}&quot;/&amp;gt; &amp;lt;input type=&quot;text&quot; name=&quot;username&quot; th:value=&quot;*{username}&quot; placeholder=&quot;Enter the Id.&quot;&amp;gt; &amp;lt;input type=&quot;password&quot; name=&quot;password&quot; placeholder=&quot;Enter the passwords.&quot;&amp;gt; &amp;lt;span th:text=&quot;*{errormsg}&quot;&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;button type=&quot;submit&quot;&amp;gt;Login&amp;lt;/button&amp;gt; &amp;lt;/form&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt; 사용자가 로그인 후 이동하는 간략한 사용자 정보 확인 페이지다.&amp;lt;module-app-web/src/main/resources/templates/user/index.html&amp;gt;&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&amp;gt;&amp;lt;head&amp;gt; &amp;lt;!-- css --&amp;gt; &amp;lt;th:block th:replace=&quot;layout/css.html&quot;&amp;gt;&amp;lt;/th:block&amp;gt; &amp;lt;title&amp;gt;Index&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;!-- header --&amp;gt;&amp;lt;div class=&quot;container&quot;&amp;gt; &amp;lt;form name=&quot;form&quot; id=&quot;form&quot; th:object=&quot;${userDto}&quot; action=&quot;#&quot;&amp;gt; &amp;lt;h1&amp;gt;Index&amp;lt;/h1&amp;gt; &amp;lt;hr&amp;gt; &amp;lt;a sec:authorize=&quot;isAnonymous()&quot; th:href=&quot;@{/user/login}&quot;&amp;gt;Login&amp;lt;/a&amp;gt; &amp;lt;a sec:authorize=&quot;isAnonymous()&quot; th:href=&quot;@{/user/form}&quot;&amp;gt;Join&amp;lt;/a&amp;gt; &amp;lt;a sec:authorize=&quot;isAuthenticated()&quot; th:href=&quot;@{/user/logout}&quot;&amp;gt;Logout&amp;lt;/a&amp;gt; &amp;lt;a sec:authorize=&quot;isAuthenticated()&quot; th:href=&quot;@{&#39;/user?idx=&#39;+*{idx}}&quot;&amp;gt;My Information&amp;lt;/a&amp;gt; &amp;lt;br&amp;gt; &amp;lt;br&amp;gt; User Authority: &amp;lt;a sec:authorize=&quot;hasAuthority(&#39;root&#39;)&quot;&amp;gt;root&amp;lt;/a&amp;gt; &amp;lt;a sec:authorize=&quot;hasAuthority(&#39;manager&#39;)&quot;&amp;gt;manager&amp;lt;/a&amp;gt; &amp;lt;a sec:authorize=&quot;hasAuthority(&#39;general&#39;)&quot;&amp;gt;gerneral&amp;lt;/a&amp;gt; &amp;lt;br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;!-- User Authority Check:--&amp;gt;&amp;lt;!-- &amp;lt;span sec:authentication=&quot;principal.authorities&quot;&amp;gt;&amp;lt;/span&amp;gt;--&amp;gt; &amp;lt;/form&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt; 로그아웃 할 때 이동하는 페이지다.&amp;lt;module-app-web/src/main/resources/templates/user/logoutSuccess.html&amp;gt;&amp;lt;script&amp;gt; alert(&quot;You have logged out.&quot;); location.href = &quot;/user/index&quot;;&amp;lt;/script&amp;gt; 사용자의 권한으로는 접근 불가능한 페이지에 접근하는 경우 이동하는 페이지다.&amp;lt;module-app-web/src/main/resources/templates/user/permission-denied.html&amp;gt;&amp;lt;script&amp;gt; alert(&quot;You do not have permission on this path.&quot;); window.history.back();&amp;lt;/script&amp;gt; User form 페이지에서 ID 중복을 위한 기능을 ajax로 구현하였다. 사용자는 회원 가입 전 ID가 중복되는지 확인 후 회원 가입을 진행해야 한다.(해당 기능은 구현되었으며 추후 세부적으로 개발 예정)&amp;lt;module-app-web/src/main/resources/templates/user/form.html&amp;gt;&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&amp;gt;&amp;lt;head&amp;gt; &amp;lt;!-- css --&amp;gt; &amp;lt;th:block th:replace=&quot;layout/css.html&quot;&amp;gt;&amp;lt;/th:block&amp;gt; &amp;lt;title&amp;gt;Member Form&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;!-- header --&amp;gt;&amp;lt;div th:replace=&quot;layout/header::header&quot;&amp;gt;&amp;lt;/div&amp;gt;.../* username 중복 검사 */$(&quot;#validationUserId&quot;).click(function () { $.ajax({ url: &quot;http://localhost:8081/api/users/validation/username/&quot; + document.getElementsByName(&quot;username&quot;)[0].value, type: &quot;get&quot;, dataType: &quot;text&quot;, contentType: &quot;application/json&quot;, async: false, success: function (msg) { if (msg == &quot;false&quot;) { document.getElementById(&quot;usernameCheckResult&quot;).innerHTML = &quot;This user id is not duplicated.&quot;; document.getElementById(&quot;usernameCheckResult&quot;).style.color = &quot;blue&quot;; usernameVaildation = true; } else { document.getElementById(&quot;usernameCheckResult&quot;).innerHTML = &quot;This user id is already in use.&quot;; document.getElementById(&quot;usernameCheckResult&quot;).style.color = &quot;red&quot;; usernameVaildation = false; } }, error: function () { alert(&quot;User id duplicate fail!&quot;); } });});...Util 현재 로그인한 사용자 정보를 가져와 해당 페이지에 접근하는지 판별하는 메소드다. 이후 각 페이지 개발이 완료되면 해당 메소드를 사용하여 권한별로 그리고 사용자 아이디 별로 페이지를 접근 가능 여부 기능을 구현할 예정이다.출처: https://itstory.tk/entry/Spring-Security-%ED%98%84%EC%9E%AC-%EB%A1%9C%EA%B7%B8%EC%9D%B8%ED%95%9C-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A0%95%EB%B3%B4-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0https://lemontia.tistory.com/602&amp;lt;module-system-common/src/main/java/kr/ac/univ/util/AccessCheck.java&amp;gt;package kr.ac.univ.util;import org.springframework.security.core.Authentication;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.security.core.userdetails.UserDetails;public class AccessCheck { /** * [일반적인 상황에서 사용자 권한에 따른 접근 가능 여부] * &amp;lt;p&amp;gt; * 비인증 사용자인 경우 접근 불가 * root: 모든 권한에 대한 접근 허용 * manager: 생성자가 root인 경우 접근 허용, 로그인한 사용자의 username과 생성자가 같은 경우 접근 허용 * * @param createdBy * @return */ public static Boolean isAccessInGeneral(String createdBy, String authorityType) { Authentication authentication = SecurityContextHolder.getContext().getAuthentication(); boolean result = false; // 비인증 사용자, 인증이 안된 경우, authentication 객체가 null인 경우 // -&amp;gt; 접근 불가 if (!&quot;anonymousUser&quot;.equals(authentication.getPrincipal()) || !authentication.isAuthenticated() || EmptyUtil.isEmpty(authentication)) { UserDetails userDetails = (UserDetails) authentication.getPrincipal(); String authenticationUsername = userDetails.getUsername(); for (GrantedAuthority grantedAuthority : userDetails.getAuthorities()) { switch (grantedAuthority.getAuthority()) { // 로그인한 사용자의 권한: root // -&amp;gt; 접근 가능 case &quot;root&quot;: result = true; break; case &quot;manager&quot;: // createdBy: root // -&amp;gt; 접근 불가 if (&quot;root&quot;.equals(createdBy)) { result = false; } // username authority: MANAGER // 로그인한 사용자의 username과 username: 다름 // -&amp;gt; 접근 불가 else if (&quot;manager&quot;.equals(authorityType) &amp;amp;&amp;amp; !authenticationUsername.equals(createdBy)) { result = false; } // 나머지 조건 // -&amp;gt; 접근 가능 else { result = true; } break; default: // 로그인한 사용자의 username과 createdBy: 같음 // -&amp;gt; 접근 가능 if (authenticationUsername.equals(createdBy)) { result = true; } // 로그인한 사용자의 username과 createdBy: 다름 // -&amp;gt; 접근 불가 else { result = false; } break; } } } return result; } /** * [module-app-admin user에서 사용자 권한에 따른 접근 가능 여부] * &amp;lt;p&amp;gt; * 비인증 사용자인 경우 접근 불가 * root: 모든 권한에 대한 접근 허용 * manager: 생성자가 root인 경우 접근 허용, 로그인한 사용자의 username과 생성자가 같은 경우 접근 허용 * * @param createdBy * @return */ public static Boolean isAccessInModuleAdminUser(String createdBy, String username, String authorityType) { Authentication authentication = SecurityContextHolder.getContext().getAuthentication(); boolean result = false; // 비인증 사용자, 인증이 안된 경우, authentication 객체가 null인 경우 // -&amp;gt; 접근 불가 if (!&quot;anonymousUser&quot;.equals(authentication.getPrincipal()) || !authentication.isAuthenticated() || EmptyUtil.isEmpty(authentication)) { UserDetails userDetails = (UserDetails) authentication.getPrincipal(); String authenticationUsername = userDetails.getUsername(); for (GrantedAuthority grantedAuthority : userDetails.getAuthorities()) { switch (grantedAuthority.getAuthority()) { // 로그인한 사용자의 권한: root // -&amp;gt; 접근 가능 case &quot;root&quot;: result = true; break; case &quot;manager&quot;: // 로그인한 사용자의 권한: manager // 로그인한 사용자의 username과 createdBy: 같음 // -&amp;gt; 접근 가능 if (authenticationUsername.equals(createdBy)) { result = true; } // 로그인한 사용자의 권한: manager // username의 권한 general || non_user // -&amp;gt; 접근 가능 else if ((&quot;general&quot;.equals(authorityType) || &quot;non_user&quot;.equals(authorityType))) { result = true; } // 로그인한 사용자의 권한: manager // 로그인한 사용자의 username과 username: 같음 // -&amp;gt; 접근 가능 else if(authenticationUsername.equals(username)) { result = true; } // 이외 // -&amp;gt; 접근 불가 else { result = false; } break; default: result = false; break; } } } return result; } /** * [module-app-web user에서 사용자 권한에 따른 접근 가능 여부] * &amp;lt;p&amp;gt; * 비인증 사용자인 경우 접근 불가 * 생성자가 root인 경우 접근 허용 * 생성자 권한이 MANAGER인 경우 접근 허용 * 생성자와 사용자 아이디가 같은 경우 접근 허용 * * @param createdBy * @return */ public static Boolean isAccessInModuleWebUser(String createdBy, String username, String authorityType) { Authentication authentication = SecurityContextHolder.getContext().getAuthentication(); boolean result = false; // 비인증 사용자, 인증이 안된 경우, authentication 객체가 null인 경우 // -&amp;gt; 접근 불가 if (&quot;anonymousUser&quot;.equals(authentication.getPrincipal()) || !authentication.isAuthenticated() || EmptyUtil.isEmpty(authentication)) { result = false; } else { UserDetails userDetails = (UserDetails) authentication.getPrincipal(); String authenticationUsername = userDetails.getUsername(); // createdBy: root // username authority: MANAGER // 로그인한 사용자의 username과 username: 같음 // -&amp;gt; 접근 가능 if (&quot;root&quot;.equals(createdBy) || &quot;MANAGER&quot;.equals(authorityType) &amp;amp;&amp;amp; username.equals(authenticationUsername)) { result = true; } // 로그인한 사용자의 username과 createdBy: 같음 // -&amp;gt; 접근 가능 else if (authenticationUsername.equals(createdBy)) { result = true; } else { result = false; } } return result; }} 해당 변수가 문자열인 경우 공백을 제외한 문자열의 길이가 0인지, 객체인 경우 NULL 인지 확인하기 위해 사용하는 Util 메소드다.출처: https://gun0912.tistory.com/1&amp;lt;module-system-common/src/main/java/kr/ac/univ/util/EmptyUtil.java&amp;gt;package kr.ac.univ.util;import java.util.List;import java.util.Map;public class EmptyUtil { public static boolean isEmpty(Object obj) { if (obj == null) return true; if ((obj instanceof String) &amp;amp;&amp;amp; (((String) obj).trim().length() == 0)) { return true; } if (obj instanceof Map) { return ((Map&amp;lt;?, ?&amp;gt;) obj).isEmpty(); } if (obj instanceof Map) { return ((Map&amp;lt;?, ?&amp;gt;) obj).isEmpty(); } if (obj instanceof List) { return ((List&amp;lt;?&amp;gt;) obj).isEmpty(); } if (obj instanceof Object[]) { return (((Object[]) obj).length == 0); } return false; }}main 프로젝트 수행시 사용자 정보를 미리 DB에 저장하도록 하였다. 사용자 아이디와 비밀번호는 ‘root/123123123’, ‘manager/123123123’, ‘general/123123123’, ‘non_user/123123123’ 다.&amp;lt;module-app-web/src/main/java/kr/ac/univ/ModuleWebApplication.java&amp;gt;package kr.ac.univ;import kr.ac.univ.common.domain.enums.ActiveStatus;import kr.ac.univ.noticeBoard.repository.NoticeBoardRepository;import kr.ac.univ.user.domain.enums.AuthorityType;import kr.ac.univ.user.domain.enums.UserType;import org.springframework.boot.CommandLineRunner;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.context.annotation.Bean;import org.springframework.Security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.web.bind.annotation.RestController;import kr.ac.univ.user.domain.User;import kr.ac.univ.user.repository.UserRepository;@RestController@SpringBootApplicationpublic class ModuleWebApplication { BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder(); public static void main(String[] args) { SpringApplication.run(ModuleWebApplication.class, args); } @Bean public CommandLineRunner runner(NoticeBoardRepository noticeBoardRepository, UserRepository userRepository) { return (args) -&amp;gt; { /* 게시글 모두 삭제 */ /* noticeBoardRepository.deleteAll(); */ /* 게시글 등록 */ /* IntStream.rangeClosed(1, 200).forEach(index -&amp;gt; noticeBoardRepository.save(NoticeBoard.builder() .title(&quot;게시글&quot; + index) .content(&quot;컨텐츠&quot; + index) .activeStatus(ActiveStatus.ACTIVE) .build())); */ /* 사용자 모두 삭제 */ /* userRepository.deleteAll(); */ /* 사용자 생성 */ /* userRepository.save(User.builder() .username(&quot;root&quot;) .password(passwordEncoder.encode(&quot;123123123&quot;)) .userType(UserType.PART_TIME_MS) .authorityType(AuthorityType.ROOT) .activeStatus(ActiveStatus.ACTIVE) .build()); userRepository.save(User.builder() .username(&quot;manager&quot;) .password(passwordEncoder.encode(&quot;123123123&quot;)) .userType(UserType.PART_TIME_MS) .authorityType(AuthorityType.MANAGER) .activeStatus(ActiveStatus.ACTIVE) .build()); userRepository.save(User.builder() .username(&quot;manager2&quot;) .password(passwordEncoder.encode(&quot;123123123&quot;)) .userType(UserType.PART_TIME_MS) .authorityType(AuthorityType.MANAGER) .activeStatus(ActiveStatus.ACTIVE) .build()); userRepository.save(User.builder() .username(&quot;general&quot;) .password(passwordEncoder.encode(&quot;123123123&quot;)) .userType(UserType.PART_TIME_MS) .authorityType(AuthorityType.GENERAL) .activeStatus(ActiveStatus.ACTIVE) .build()); userRepository.save(User.builder() .username(&quot;general2&quot;) .password(passwordEncoder.encode(&quot;123123123&quot;)) .userType(UserType.PART_TIME_MS) .authorityType(AuthorityType.GENERAL) .activeStatus(ActiveStatus.ACTIVE) .build()); userRepository.save(User.builder() .username(&quot;non_user&quot;) .password(passwordEncoder.encode(&quot;123123123&quot;)) .userType(UserType.PART_TIME_MS) .authorityType(AuthorityType.NON_USER) .activeStatus(ActiveStatus.ACTIVE) .build()); */ }; }}프로젝트 수행 결과 http://localhost:8080/user/login 으로 접속하면 로그인 페이지에 접속한다. 만약 아이디와 비밀번호가 틀린 경우 하단 이미지 처럼 로그인에 실패하고 에러 메시지를 확인할 수 있다. 로그인에 성공하면 http://localhost:8080/user/index 페이지로 이동한다. 해당 페이지에서 사용자의 권한을 확인할 수 있고 다른 페이지로 이동할 수 있다. root 권한을 가지고 있지 않는 사용자가 root 권한을 요구하는 http://localhost:8080/user/list 페이지에 접근하는 경우, 다음과 같이 경고창이 출력되며 접근할 수 없도록 한다. 다음 이미지는 User의 CRUD 페이지다." }, { "title": "Project Lab 9. 게시판 개발(검색) - 6", "url": "/posts/Project-Lab9/", "categories": "Web, Project Lab", "tags": "", "date": "2020-08-13 00:00:00 +0900", "snippet": " 게시글 검색 기능 개발 과정을 소개한다. github: https://github.com/scribnote5/lab github commit: https://github.com/scribnote5/lab/commit/b806ca1160cca021c5e1abdc2ad012686965dee8 최신 프로젝트 코드와 형상이 다를 수 있습니다. 게시글 코드는 참고만 하시되, 최신 코드는 github에서 확인 부탁드립니다.페이징 처리 방법: JPA vs DataTables? 게시판의 페이징 처리 방법으로 Spring JPA 또는 Javascript DataTables 라이브러리를 사용할 수 있다. Spring JPA는 페이징 처리 기능을 제공한다. 반면 Javascript DataTables 라이브러리는 페이징 처리 뿐만 아니라 다양한 기능(복잡한 검색 기능, ajax를 사용한 페이징 처리, 모바일 지원 등)들을 간단한 설정과 최소한의 소스 코드 추가를 통하여 사용할 수 있다. 게시판의 다양한 기능들을 직접 구현하지 않고 빠르게 사용하기를 원한다면, Javascript DataTables 라이브러리를 사용하는 것을 적극 추천한다. 본 프로젝트에서는Spring JPA로 페이징 처리를 구현하였다.(DataTables 라이브러리를 너무 늦게 알게됨)출처: https://datatables.net/https://medium.com/@gustavo.ponce.ch/spring-boot-jquery-datatables-a2e816e2b5e9검색 기능 설계 본 프로젝트에서는 Spring JPA의 메소드 이름으로 쿼리 작성하는 방법으로 기본적인 검색 기능을 구현하였다. 검색 기능은 검색 유형(searchType)과 검색어(keyword)로 구성되며, 검색 조건이 여러 개인 복잡한 검색 기능은 다루지 않는다. 복잡한 검색 기능은 추후 기회가 되면 개발할 예정이다.DTO 설계 검색 유형과 검색어를 저장하는 공통 DTO다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/common/dto/SearchDto.java&amp;gt;package kr.ac.univ.common.dto;import lombok.Getter;import lombok.NoArgsConstructor;import lombok.Setter;import lombok.ToString;@Getter@Setter@NoArgsConstructor@ToStringpublic class SearchDto { private String searchType = &quot;&quot;; private String keyword = &quot;&quot;;}비즈니스 로직 DB에 접근하여 데이터를 조회하는 메소드다. findAllByTitleContaining: 제목에 키워드가 포함된 게시글을 모두 검색한다. findAllByContentContaining: 내용에 키워드가 포함된 게시글을 모두 검색한다. findAllByCreatedByContaining: 작성자에 키워드가 포함된 게시글을 모두 검색한다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/noticeBoard/repository/NoticeBoardRepository.java&amp;gt;&amp;gt;package kr.ac.univ.noticeBoard.repository;import kr.ac.univ.noticeBoard.domain.NoticeBoard;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;import org.springframework.data.jpa.repository.JpaRepository;import org.springframework.stereotype.Repository;@Repositorypublic interface NoticeBoardRepository extends JpaRepository&amp;lt;NoticeBoard, Long&amp;gt; { Page&amp;lt;NoticeBoard&amp;gt; findAllByTitleContaining(Pageable pageable, String title); Page&amp;lt;NoticeBoard&amp;gt; findAllByContentContaining(Pageable pageable, String content); Page&amp;lt;NoticeBoard&amp;gt; findAllByCreatedByContaining(Pageable pageable, String memberId);} 게시글의 리스트를 조회하는 findNoticeBoardList 메소드에 검색 기능을 추가하였다. searchDto의 searchType에 따라서 수행되는 메소드가 변경된다. searchType이 “TITLE”(제목)이면 제목에 키워드가 포함된 게시글을 모두 검색한다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/noticeBoard/service/NoticeBoardService.java&amp;gt;...public Page&amp;lt;NoticeBoardDto&amp;gt; findNoticeBoardList(Pageable pageable, SearchDto searchDto) { Page&amp;lt;NoticeBoard&amp;gt; noticeBoardList = null; Page&amp;lt;NoticeBoardDto&amp;gt; noticeBoardDtoList = null; pageable = PageRequest.of(pageable.getPageNumber() &amp;lt;= 0 ? 0 : pageable.getPageNumber() - 1, pageable.getPageSize(), Sort.Direction.DESC, &quot;idx&quot;); switch (searchDto.getSearchType()) { case &quot;TITLE&quot;: noticeBoardList = noticeBoardRepository.findAllByTitleContaining(pageable, searchDto.getKeyword()); break; case &quot;CONTENT&quot;: noticeBoardList = noticeBoardRepository.findAllByContentContaining(pageable, searchDto.getKeyword()); break; case &quot;ID&quot;: noticeBoardList = noticeBoardRepository.findAllByCreatedByContaining(pageable, searchDto.getKeyword()); break; default: noticeBoardList = noticeBoardRepository.findAll(pageable); break; } noticeBoardDtoList = new PageImpl&amp;lt;NoticeBoardDto&amp;gt;(NoticeBoardMapper.INSTANCE.toDto(noticeBoardList.getContent()), pageable, noticeBoardList.getTotalElements()); // NewIcon 판별 for (NoticeBoardDto noticeBoardDto : noticeBoardDtoList) { // 추후 변경 noticeBoardDto.setNewIcon(NewIconCheck.isNew(LocalDateTime.now())); } return noticeBoardDtoList;}... View에서 전달한 SearchDto(검색 관련 데이터)를 Service 계층으로 전달한다.&amp;lt;module-app-web/src/main/java/kr/ac/univ/controller/NoticeBoardController.java&amp;gt;...// List@GetMapping(&quot;/list&quot;)public String noticeBoardList(@PageableDefault Pageable pageable, SearchDto searchDto, Model model) { model.addAttribute(&quot;noticeBoardDtoList&quot;, noticeBoardService.findNoticeBoardList(pageable, searchDto)); return &quot;/noticeBoard/list&quot;;}...View 게시글 리스트 상단에 검색 UI를 추가하였다. 페이징 번호를 클릭할 때 URI 뒤에 검색 데이터를 함께 제공하여(쿼리 스트링), Controller에서 get 방식으로 검색 데이터를 받을 수 있도록 하였다. 기존 페이징 처리 소스 코드에서 문제점이 발견되었는데, 하단 이미지처럼 검색 결과가 하나도 없는 경우 페이징 번호가 ‘1’만 출력되어야 하지만 페이징 번호가 ‘1’ ‘0’ 두 개가 출력된다. 해당 오류를 수정하기 위해서 마지막 페이징 번호인 endNumber를 정하는 로직에, ${noticeBoardDtoList.totalPages} == 0 ? 1 : ${noticeBoardDtoList.totalPages} 소스 코드를 추가하였다. 검색 결과가 하나도 없는 경우, 즉 totalPages가 0인 경우 endNumber에 1을 대입하여 해결하였다.&amp;lt;module-app-web/src/main/resources/templates/noticeBoard/list.html&amp;gt;... &amp;lt;form name=&quot;form&quot; id=&quot;form&quot; th:object=&quot;${searchDto}&quot; action=&quot;#&quot;&amp;gt; &amp;lt;div class=&quot;pull-right&quot;&amp;gt; &amp;lt;div class=&quot;pull-left&quot; style=&quot;width: 100px; margin: 10px 10px;&quot;&amp;gt; &amp;lt;select name=&quot;searchType&quot; th:field=&quot;*{searchType}&quot; class=&quot;form-control input-sm&quot;&amp;gt; &amp;lt;option th:value=&quot;TITLE&quot;&amp;gt;Title&amp;lt;/option&amp;gt; &amp;lt;option th:value=&quot;CONTENT&quot;&amp;gt;Content&amp;lt;/option&amp;gt; &amp;lt;option th:value=&quot;ID&quot;&amp;gt;ID&amp;lt;/option&amp;gt; &amp;lt;/select&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&quot;pull-left&quot; style=&quot;width: 200px; margin: 10px 10px; float: left;&quot;&amp;gt; &amp;lt;input type=&quot;text&quot; name=&quot;keyword&quot; class=&quot;col-md-1 form-control input-sm&quot; th:value=&quot;${searchDto?.keyword}&quot;/&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&quot;pull-left&quot; style=&quot;width: 100px; margin: 10px 0; float:left;&quot;&amp;gt; &amp;lt;button id=&quot;search&quot; type=&quot;button&quot; class=&quot;btn btn-primary btn-block&quot;&amp;gt;Search&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;... &amp;lt;/form&amp;gt;&amp;lt;/div&amp;gt;...&amp;lt;script&amp;gt; $(&#39;#search&#39;).click(function () { document.form.action = &#39;/notice-board/list&#39;; document.form.method = &#39;get&#39;; document.form.submit(); });&amp;lt;/script&amp;gt;프로젝트 실행 결과 검색 유형에 “TITLE” 검색어에 “12”를 입력하고 페이징 번호를 클릭한 경우 다음 이미지와 같이 페이징 번호, searchType 그리고 keyword가 포함된 쿼리 스트링을 확인할 수 있다. 검색 결과, 제목에 “12”가 포함된 게시글 리스트가 출력된다." }, { "title": "MISRA C++ 2008 가이드라인 표기 방식", "url": "/posts/MISRA-CPP2/", "categories": "MISRA CPP, SW Test", "tags": "", "date": "2020-08-08 00:00:00 +0900", "snippet": " MISRA C++ 2008 가이드라인 표기 방식을 소개한다.규칙 표기 방식 규칙 표기 방식은 다음과 같다. number: 규칙 식별자로서, 처음오는 숫자마다 큰 주제마다 변경된다. category: 규칙분류 headline text: 가이드라인의 제목 issuse reference: 해당 규칙 이해에 도움이되는 ISO/IEC 14882 : 2003 이슈 위치   Rule[number]   ([category])     [headline text]                     [issue reference]     Rule Classification(category) 규칙은 ‘Required’, ‘Advisory’, ‘Document’의 category로 분류된다. 해당 분류는 규칙의 중요도를 의미하지 않는다.Advisory Rules 개발자가 일반적으로 준수해야 하는 규칙이다. 만약 준수할 수 없는 경우, deviation(예외)가 필요 없지만 적절하다고 판단되는 경우 작성할 수 있다.Required Rules 개발자가 필수로 준수해야 하는 규칙이다. 만약 준수할 수 없는 경우, deviation(예외)를 작성해야 한다.Document Rules 개발자가 소스 코드 내에서 관련 기능을 사용할 때, 필수로 준수해야 하는 규칙이다. 해당 규칙은 deviation(예외)를 허용하지 않는다.Scope of Rules 대부분의 규칙들은 single translation unit(위배한 규칙이 translation unit 범위 내 즉 전처리된 하나의 C언어 파일에서만 영향을 미치는 경우)에 적용할 수 있지만, 모든 규칙은 가능한 system(시스템 전체 범위에 영향을 미치는 경우)을 고려해야 한다. 일반적으로 모든 규칙은 템플릿에 적용해야 하지만, 일부 규칙은 인스턴스화된 템플릿에서만 의미가 있다. 별도로 명시되지 않는 한, 모든 규칙은 묵시적으로 선언되거나 정의된 멤버함수(기본 생성자, 복사 생성자, 복사 대입 연산자, 소멸자)에 적용되어야 한다." }, { "title": "Project Lab 8. 게시판 개발(파일 업로드 및 다운로드) - 5", "url": "/posts/Project-Lab8/", "categories": "Web, Project Lab", "tags": "", "date": "2020-08-05 00:00:00 +0900", "snippet": " 드래그 앤 드랍 기능을 지원하는 다중 파일 업로드 및 파일 다운로드를 ajax로 개발한 과정을 소개한다. github: https://github.com/scribnote5/lab github commit: https://github.com/scribnote5/lab/commit/c7dd944785ff76133498ff6e95df748b140c717b 최신 프로젝트 코드와 형상이 다를 수 있습니다. 게시글 코드는 참고만 하시되, 최신 코드는 github에서 확인 부탁드립니다.파일 업로드 및 다운로드 설계 Spirng은 MultipartResolver 인터페이스와 Servlet Multipart Request 그리고 Apache Commons FileUpload API 두 개의 구현체로 파일 업로드를 지원한다. 본 프로젝트에서는 Servlet Multipart Request를 사용하여 파일 업로드를 구현한다. module-app-web 모듈 서버에서 다중 파일 업로드를 하게 되면 ajax를 통하여 요청하며, REST api를 사용하는 module-app-api 모듈 서버가 응답한다. 다중 파일 업로드는 드래그앤드랍 기능을 지원한다.출처: https://advenoh.tistory.com/26https://mkyong.com/spring-boot/spring-boot-file-upload-example-ajax-and-rest/https://doublesprogramming.tistory.com/130https://sooin01.tistory.com/m/entry/jQuery-ajax-%ED%8C%8C%EC%9D%BC%EC%97%85%EB%A1%9C%EB%93%9Chttps://cofs.tistory.com/181https://offbyone.tistory.com/69https://okky.kr/article/610701https://gofnrk.tistory.com/80Table 설계 프로젝트에서 사용할 게시판 첨부 파일 table을 생성한다.&amp;lt;notice_board_attached_file&amp;gt;CREATE TABLE notice_board_attached_file ( idx bigint auto_increment primary key, created_by varchar(255) null, created_date datetime(6) null, file_name varchar(255) null, saved_file_name varchar(255) null, notice_board_idx bigint null, file_size varchar(255) null);Config max-swallow-size: 요청 body의 크기를 설정한다. 업로드되는 파일 크기가 제한(20MB)을 초과하여 예외가 발생하는 경우, 사용자 정의 예외처리 방식으로 수행되도록 구현하였다. max-file-size과 max-request-size: 업로드되는 파일 크기를 제한한다. 만약 제한된 파일 업로드 크기보다 큰 파일이 업로드되는 경우 예외가 발생한다. 파일 업로드 되는 경로는 /upload 폴더이므로, 해당 경로에 upload 폴더를 필수로 생성해야 한다.(root 프로젝트에 upload 폴더를 생성하면 된다.)&amp;lt;module-app-api/src/main/resources/application.yml&amp;gt;spring: servlet: multipart: # 한개의 파일의 최대 크기 max-file-size: 20MB # form-data 요청에 따른 모든 파일의 최대 크기 max-request-size: 20MBserver: tomcat: max-swallow-size: -1...Domain 및 DTO 설계 모든 Attachedfile에서 공통적으로 사용하는 Domain다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/common/domain/AttachedFileAudit.java&amp;gt;import lombok.Getter;import org.springframework.data.jpa.domain.support.AuditingEntityListener;import javax.persistence.*;import java.time.LocalDateTime;@MappedSuperclass@Getter@EntityListeners(AuditingEntityListener.class)public abstract class AttachedFileAudit { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) protected Long idx; private LocalDateTime createdDate; private String createdBy;} NoticeBoard attachedfile에서 사용하는 DTO다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/noticeBoard/domain/NoticeBoardAttachedFile.java&amp;gt;package kr.ac.univ.noticeBoard.domain;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.EntityListeners;import javax.persistence.Table;import kr.ac.univ.common.domain.AttachedFileAudit;import org.springframework.data.jpa.domain.support.AuditingEntityListener;import lombok.Builder;import lombok.Getter;import lombok.NoArgsConstructor;import lombok.ToString;@Getter@NoArgsConstructor@Entity@Table@ToString@EntityListeners(AuditingEntityListener.class)public class NoticeBoardAttachedFile extends AttachedFileAudit { @Column private Long noticeBoardIdx; @Column private String fileName; @Column private String savedFileName; @Column private String fileSize; @Builder public NoticeBoardAttachedFile(Long noticeBoardIdx, String fileName, String savedFileName, String fileSize) { this.fileName = fileName; this.noticeBoardIdx = noticeBoardIdx; this.savedFileName = savedFileName; this.fileSize = fileSize; }} NoticeBoard 파일 업로드에 사용하는 DTO다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/noticeBoard/dto/NoticeBoardDto.java&amp;gt;package kr.ac.univ.noticeBoard.dto;import kr.ac.univ.common.domain.enums.ActiveStatus;import kr.ac.univ.common.dto.CommonDto;import kr.ac.univ.noticeBoard.domain.NoticeBoardAttachedFile;import lombok.Getter;import lombok.NoArgsConstructor;import lombok.Setter;import lombok.ToString;import java.util.ArrayList;import java.util.List;@Getter@Setter@NoArgsConstructor@ToStringpublic class NoticeBoardDto extends CommonDto { /* CommonDto: JPA Audit */ /* 기본 정보 */ private String title; private String content; private ActiveStatus activeStatus; private Long viewCount; /* newIcon */ private boolean isNewIcon; /* 첨부 파일 */ private List&amp;lt;NoticeBoardAttachedFile&amp;gt; attachedFileList = new ArrayList&amp;lt;NoticeBoardAttachedFile&amp;gt;();} NoticeBoard DTO &amp;lt;-&amp;gt; Entity간 객체 mapping 소스 코드가 Mapstruct에 의해 생성되도록 메소드를 선언 및 정의하는 클래스다. default 메소드는 사용자가 정의한 메소드로, NoticeBoardAttachedFile 파일 리스트를 NoticeBoardDto의 파일 리스트로 매핑한다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/noticeBoard/dto/mapper/NoticeBoardMapper.java&amp;gt;package kr.ac.univ.noticeBoard.dto.mapper;import kr.ac.univ.common.dto.mapper.EntityMapper;import kr.ac.univ.noticeBoard.domain.NoticeBoard;import kr.ac.univ.noticeBoard.domain.NoticeBoardAttachedFile;import kr.ac.univ.noticeBoard.dto.NoticeBoardDto;import org.mapstruct.Mapper;import org.mapstruct.factory.Mappers;import java.util.List;@Mapper(componentModel = &quot;spring&quot;)public interface NoticeBoardMapper extends EntityMapper&amp;lt;NoticeBoardDto, NoticeBoard&amp;gt; { NoticeBoardMapper INSTANCE = Mappers.getMapper(NoticeBoardMapper.class); default NoticeBoardDto toDto(NoticeBoardDto noticeBoardDto, List&amp;lt;NoticeBoardAttachedFile&amp;gt; attachedFileList) { for (NoticeBoardAttachedFile attachedFile : attachedFileList) { noticeBoardDto.getAttachedFileList().add(attachedFile); } return noticeBoardDto; }}Repository QueryDsl를 사용하여 다음과 같은 쿼리를 작성하였다.(JPA로 대체 가능하다.) findAttachedFileByNoticeBoardIdx: 매개변수의 게시글 idx와 같은 파일을 모두 검색한다. deleteAttachedFileByNoticeBoardIdx: 매개변수의 게시글 idx와 같은 파일을 모두 삭제한다&amp;lt;module-domain-core/src/main/java/kr/ac/univ/noticeBoard/repository/NoticeBoardAttachedFileRepositoryImpl.java&amp;gt;package kr.ac.univ.noticeBoard.repository;import java.util.List;import javax.transaction.Transactional;import kr.ac.univ.noticeBoard.domain.NoticeBoardAttachedFile;import kr.ac.univ.noticeBoard.domain.QNoticeBoardAttachedFile;import org.springframework.data.jpa.repository.support.QuerydslRepositorySupport;import org.springframework.stereotype.Repository;import com.querydsl.jpa.impl.JPAQueryFactory;@Repository@Transactionalpublic class NoticeBoardAttachedFileRepositoryImpl extends QuerydslRepositorySupport { private final JPAQueryFactory queryFactory; public NoticeBoardAttachedFileRepositoryImpl(JPAQueryFactory queryFactory) { super(NoticeBoardAttachedFile.class); this.queryFactory = queryFactory; } public List&amp;lt;NoticeBoardAttachedFile&amp;gt; findAttachedFileByNoticeBoardIdx(Long noticeBoardIdx) { QNoticeBoardAttachedFile noticeBoardAttachedFile = QNoticeBoardAttachedFile.noticeBoardAttachedFile; /* SELECT * * FROM AttachedFile * WHERE noticeBoardIdx = &#39;noticeBoardIdx&#39; * ORDER BY idx asc */ return queryFactory .selectFrom(noticeBoardAttachedFile) .where(noticeBoardAttachedFile.noticeBoardIdx.eq(noticeBoardIdx)) .orderBy(noticeBoardAttachedFile.idx.asc()) .fetch(); } public Long deleteAttachedFileByNoticeBoardIdx(Long noticeBoardIdx) { QNoticeBoardAttachedFile noticeBoardAttachedFile = QNoticeBoardAttachedFile.noticeBoardAttachedFile; /* DELETE FROM AttachedFile * WHERE noticeBoardIdx = &#39;noticeBoardIdx&#39; */ return queryFactory .delete(noticeBoardAttachedFile) .where(noticeBoardAttachedFile.noticeBoardIdx.eq(noticeBoardIdx)) .execute(); }}Service NoticeBoard attachedfile의 비즈니스 로직이다. uploadAttachedFile: view에서 전달받은 파일을 저장하는 로직이다. 파일명 앞에 고유한 식별문자를 생성하는 UUID를 사용하여 파일명 중복이 발생하지 않도록 하였다. 자바에서는 입출력 방법으로 IO 라이브러리와 NIO(New IO) 라이브러리를 사용할 수 있다. NIO 라이브러리는 연결 클라이언트 수가 많고 하나의 입출력 처리 작업이 오래 걸리지 않는 경우에 사용하는 것이 좋다. IO 라이브러리는 연결 클라이언트 수가 적고 전송되는 데이터가 대용량이면서 순차적으로 처리될 필요성이 있는 경우 사용하는 것이 좋다. 프로젝트에서는 업로드하는 파일 크기를 20 MB로 제한할 예정이므로, 적은 시간이 소요되는 입출력 처리 작업이 많은 프로젝트의 특성상 NIO 라이브러리가 IO 라이브러리 보다 성능상 더 유리하다고 생각하였다. 따라서 NIO 라이브러리를 사용하여 파일 업로드 및 다운로드를 구현하였다.출처: https://m.blog.naver.com/PostView.nhn?blogId=rain483&amp;amp;logNo=220636709530&amp;amp;proxyReferer=https:%2F%2Fwww.google.com%2Fhttp://eincs.com/2009/08/java-nio-bytebuffer-performance/&amp;lt;module-domain-core/src/main/java/kr/ac/univ/noticeBoard/service/NoticeBoardAttachedFileService.java&amp;gt;package kr.ac.univ.noticeBoard.service;import kr.ac.univ.noticeBoard.domain.NoticeBoardAttachedFile;import kr.ac.univ.noticeBoard.dto.NoticeBoardDto;import kr.ac.univ.noticeBoard.dto.mapper.NoticeBoardMapper;import kr.ac.univ.noticeBoard.repository.NoticeBoardAttachedFileRepository;import kr.ac.univ.noticeBoard.repository.NoticeBoardAttachedFileRepositoryImpl;import kr.ac.univ.util.FileUtil;import org.springframework.stereotype.Service;import org.springframework.web.multipart.MultipartFile;import java.io.IOException;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;import java.util.List;import java.util.UUID;@Servicepublic class NoticeBoardAttachedFileService { private final NoticeBoardAttachedFileRepository noticeBoardAttachedFileRepository; private final NoticeBoardAttachedFileRepositoryImpl noticeBoardAttachedFileRepositoryImpl; public NoticeBoardAttachedFileService(NoticeBoardAttachedFileRepository noticeBoardAttachedFileRepository, NoticeBoardAttachedFileRepositoryImpl noticeBoardAttachedFileRepositoryImpl) { this.noticeBoardAttachedFileRepository = noticeBoardAttachedFileRepository; this.noticeBoardAttachedFileRepositoryImpl = noticeBoardAttachedFileRepositoryImpl; } public NoticeBoardDto findAttachedFileByNoticeBoardIdx(Long noticeBoardIdx, NoticeBoardDto noticeBoardDto) { return NoticeBoardMapper.INSTANCE.toDto(noticeBoardDto, noticeBoardAttachedFileRepositoryImpl.findAttachedFileByNoticeBoardIdx(noticeBoardIdx)); } public void insertAttachedFile(NoticeBoardAttachedFile attachedFile) { noticeBoardAttachedFileRepository.save(attachedFile); } public NoticeBoardAttachedFile findAttachedFileByIdx(Long idx) { return noticeBoardAttachedFileRepository.findById(idx).orElse(new NoticeBoardAttachedFile()); } public NoticeBoardAttachedFile getAttachedFileByIdx(Long idx) { return noticeBoardAttachedFileRepository.getOne(idx); } public void deleteAttachedFileByIdx(Long idx) { noticeBoardAttachedFileRepository.deleteById(idx); } public Long deleteAttachedFileByNoticeBoardIdx(Long idx) { return noticeBoardAttachedFileRepositoryImpl.deleteAttachedFileByNoticeBoardIdx(idx); } /** * 첨부 파일 업로드 * * @param noticeBoardIdx * @param files */ public void uploadAttachedFile(Long noticeBoardIdx, MultipartFile[] files) throws Exception { NoticeBoardAttachedFile uploadFile = new NoticeBoardAttachedFile(); for (MultipartFile file : files) { String uuid = UUID.randomUUID().toString().replaceAll(&quot;-&quot;, &quot;&quot;); String savedFileName = uuid + &quot;_&quot; + file.getOriginalFilename(); // 대체 가능 // File savedFile = new File(&quot;./upload/&quot;, savedFileName); // FileCopyUtils.copy(file.getBytes(), savedFile); Path path = Paths.get(&quot;./upload/&quot; + savedFileName); Files.write(path, file.getBytes()); uploadFile = NoticeBoardAttachedFile.builder() .noticeBoardIdx(noticeBoardIdx) .fileName(file.getOriginalFilename()) .savedFileName(savedFileName) .fileSize(FileUtil.convertFileSize(file.getSize())) .build(); insertAttachedFile(uploadFile); } } /** * 첨부 파일 삭제 * * @param deleteAttachedFileIdxList */ public void deleteAttachedFile(List&amp;lt;Long&amp;gt; deleteAttachedFileIdxList) throws Exception { for (Long idx : deleteAttachedFileIdxList) { NoticeBoardAttachedFile attachedFile = findAttachedFileByIdx(idx); Path path = Paths.get(&quot;./upload/&quot; + attachedFile.getSavedFileName()); Files.delete(path); deleteAttachedFileByIdx(attachedFile.getIdx()); } } /** * 모든 첨부 파일 삭제 * * @param noticeBoardIdx */ public void deleteAllAttachedFile(Long noticeBoardIdx) throws Exception { List&amp;lt;NoticeBoardAttachedFile&amp;gt; attachedFileList = noticeBoardAttachedFileRepositoryImpl.findAttachedFileByNoticeBoardIdx(noticeBoardIdx); for (NoticeBoardAttachedFile attachedFile : attachedFileList) { Path path = Paths.get(&quot;./upload/&quot; + attachedFile.getSavedFileName()); Files.delete(path); } deleteAttachedFileByNoticeBoardIdx(noticeBoardIdx); }}Controller NoticeBoard attachedfile 관련 클라이언트의 요청을 view로 매핑한다. noticeBoardForm, noticeBoardRead: noticeBoard와 연관된 noticeBoard attachedfile을 데이터를 조회 후 noticeBoard 데이터와 함께 view에 전달한다.&amp;lt;module-app-web/src/main/java/kr/ac/univ/controller/NoticeBoardController.java&amp;gt;package kr.ac.univ.controller;import kr.ac.univ.noticeBoard.dto.NoticeBoardDto;import kr.ac.univ.noticeBoard.dto.mapper.NoticeBoardMapper;import kr.ac.univ.noticeBoard.service.NoticeBoardAttachedFileService;import kr.ac.univ.noticeBoard.service.NoticeBoardService;import org.springframework.data.domain.Pageable;import org.springframework.data.web.PageableDefault;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;@Controller@RequestMapping(&quot;/notice-board&quot;)public class NoticeBoardController { private final NoticeBoardService noticeBoardService; private final NoticeBoardAttachedFileService noticeBoardAttachedFileService; public NoticeBoardController(NoticeBoardService noticeBoardService, NoticeBoardAttachedFileService noticeBoardAttachedFileService) { this.noticeBoardService = noticeBoardService; this.noticeBoardAttachedFileService = noticeBoardAttachedFileService; } // List @GetMapping(&quot;/list&quot;) public String noticeBoardList(@PageableDefault Pageable pageable, Model model) { model.addAttribute(&quot;noticeBoardDtoList&quot;, noticeBoardService.findNoticeBoardList(pageable)); return &quot;/noticeBoard/list&quot;; } // Form Update @GetMapping(&quot;/form{idx}&quot;) public String noticeBoardForm(@RequestParam(value = &quot;idx&quot;, defaultValue = &quot;0&quot;) Long idx, Model model) { NoticeBoardDto noticeBoardDto = null; noticeBoardDto = noticeBoardService.findNoticeBoardByIdx(idx); noticeBoardDto = noticeBoardAttachedFileService.findAttachedFileByNoticeBoardIdx(idx, noticeBoardDto); model.addAttribute(&quot;noticeBoardDto&quot;, noticeBoardDto); return &quot;/noticeBoard/form&quot;; } // Read @GetMapping({&quot;&quot;, &quot;/&quot;}) public String noticeBoardRead(@RequestParam(value = &quot;idx&quot;, defaultValue = &quot;0&quot;) Long idx, Model model) { NoticeBoardDto noticeBoardDto = null; noticeBoardDto = noticeBoardService.findNoticeBoardByIdx(idx); noticeBoardDto = noticeBoardAttachedFileService.findAttachedFileByNoticeBoardIdx(idx, noticeBoardDto); model.addAttribute(&quot;noticeBoardDto&quot;, noticeBoardDto); return &quot;/noticeBoard/read&quot;; }}RestController NoticeBoard attachedfile 관련 클라이언트의 요청을 처리 후 json 타입으로 응답한다.&amp;lt;module-app-api/src/main/java/kr/ac/univ/controller/NoticeBoardRestController.java&amp;gt;package kr.ac.univ.controller;import kr.ac.univ.noticeBoard.dto.NoticeBoardDto;import kr.ac.univ.noticeBoard.service.NoticeBoardAttachedFileService;import kr.ac.univ.noticeBoard.service.NoticeBoardService;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import java.util.List;@RestController@RequestMapping(&quot;/api/notice-boards&quot;)public class NoticeBoardRestController { private final NoticeBoardService noticeBoardService; private final NoticeBoardAttachedFileService noticeBoardAttachedFileService; public NoticeBoardRestController(NoticeBoardService noticeBoardService, NoticeBoardAttachedFileService noticeBoardAttachedFileService) { this.noticeBoardService = noticeBoardService; this.noticeBoardAttachedFileService = noticeBoardAttachedFileService; } @PostMapping public ResponseEntity&amp;lt;?&amp;gt; postNoticeBoard(@RequestBody NoticeBoardDto noticeBoardDto) { Long idx = noticeBoardService.insertNoticeBoard(noticeBoardDto); return new ResponseEntity&amp;lt;&amp;gt;(idx, HttpStatus.CREATED); } @PutMapping(&quot;/{idx}&quot;) public ResponseEntity&amp;lt;?&amp;gt; putNoticeBoard(@PathVariable(&quot;idx&quot;) Long idx, @RequestBody NoticeBoardDto noticeBoardDto) { noticeBoardService.updateNoticeBoard(idx, noticeBoardDto); return new ResponseEntity&amp;lt;&amp;gt;(&quot;{}&quot;, HttpStatus.OK); } @DeleteMapping(&quot;/{idx}&quot;) public ResponseEntity&amp;lt;?&amp;gt; deleteNoticeBoard(@PathVariable(&quot;idx&quot;) Long idx) throws Exception { noticeBoardService.deleteNoticeBoardByIdx(idx); noticeBoardAttachedFileService.deleteAllAttachedFile(idx); return new ResponseEntity&amp;lt;&amp;gt;(&quot;{}&quot;, HttpStatus.OK); } // 첨부 파일 업로드 @PostMapping(&quot;/attachedFile&quot;) public ResponseEntity&amp;lt;?&amp;gt; uploadAttachedFile(Long idx, MultipartFile[] files) throws Exception { noticeBoardAttachedFileService.uploadAttachedFile(idx, files); return new ResponseEntity&amp;lt;&amp;gt;(&quot;{}&quot;, HttpStatus.CREATED); } // 첨부 파일 삭제 @DeleteMapping(&quot;/attachedFile&quot;) public ResponseEntity&amp;lt;?&amp;gt; deleteAttachedFile(@RequestBody List&amp;lt;Long&amp;gt; deleteAttachedFileIdxList) throws Exception { noticeBoardAttachedFileService.deleteAttachedFile(deleteAttachedFileIdxList); return new ResponseEntity&amp;lt;&amp;gt;(&quot;{}&quot;, HttpStatus.OK); }} Attachedfile 다운로드 클라이언트의 요청을 응답한다. downloadAttachedFile: 모든 파일 다운로드는 요청은 하나의 URL에서 담당하며, 파일 이름을 같이 전달한다. 헤더, MimeType(웹을 통해 전달되는 다양한 형태의 파일 정보), 다운로드 파일의 bytes 총 3개의 정보로 구성되어 파일 다운로드 요청에 응답한다.&amp;lt;module-app-api/src/main/java/kr/ac/univ/controller/AttachedFileRestController.java&amp;gt;package kr.ac.univ.controller;import org.springframework.core.io.ByteArrayResource;import org.springframework.http.HttpHeaders;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.net.URLEncoder;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;@RestController@RequestMapping(&quot;/api/attachedFiles&quot;)public class AttachedFileRestController { @GetMapping(&quot;/download/{savedFileName}&quot;) public ResponseEntity&amp;lt;?&amp;gt; downloadAttachedFile(@PathVariable(&quot;savedFileName&quot;) String savedFileName) throws Exception { // 파일 이름이 한글인 경우 인코딩이 깨지지 않도록 변경 String encordedSavedFileName = URLEncoder.encode(savedFileName, &quot;UTF-8&quot;).replace(&quot;+&quot;, &quot;%20&quot;); // 헤더 추가 HttpHeaders header = new HttpHeaders(); header.add(HttpHeaders.CONTENT_DISPOSITION, &quot;attachment;filename=&quot; + encordedSavedFileName.substring(33)); header.add(&quot;Cache-Control&quot;, &quot;no-cache, no-store, must-revalidate&quot;); header.add(&quot;Pragma&quot;, &quot;no-cache&quot;); header.add(&quot;Expires&quot;, &quot;0&quot;); // MimeType 추가, application/octet-stream은 text/plain 타입을 제외한 기본 값 MediaType mediaType = MediaType.parseMediaType(&quot;application/octet-stream&quot;); // 다운로드 파일 추가 Path path = Paths.get(&quot;./upload/&quot; + savedFileName); ByteArrayResource resource = new ByteArrayResource(Files.readAllBytes(path)); return ResponseEntity.ok() .headers(header) .contentType(mediaType) .body(resource); }}View NoticeBoard attachedfiled 관련 데이터를 화면에 출력한다. input tag를 사용하거나, 파일 업로드 영역으로 파일을 드래그앤드랍 하면 파일을 업로드 할 수 있다. 파일을 업로드 하면 파일 데이터가 insertFileArray 배열에 추가되고 attachedFileList div 태그 내에 파일 데이터가 출력된다. 파일 데이터 오른쪽에 있는 X 아이콘을 클릭하면 해당되는 insertFileArray 배열의 요소와 attachedFileList div 태그내에 파일 데이터가 삭제되어 업로드 하는 파일을 취소할 수 있다. 게시글을 수정하는 경우 업로드된 파일 데이터가 uploadedAttachedFileList div 태그내에 파일 데이터가 출력된다. 파일 데이터 오른쪽에 있는 X 아이콘을 클릭하면 해당되는 파일 idx(pk)가 deleteFileArray 배열의 요소에 추가되고 uploadedAttachedFileList div 태그내에 파일 데이터가 삭제되어 업로드된 파일을 삭제할 수 있다. 게시글이 먼저 업로드된 다음 파일을 업로드가 진행되도록 구현하였다.(파일 업로드 수행시 게시글의 idx가 필요하기 때문이다.) 또한 파일을 수정하는 모든 경우를 고려하여 알고리즘 로직을 구현하였으며, 자세한 알고리즘 로직은 주석을 참고하면 된다.(3개의 첨부 파일 중 2개를 삭제하고 1개를 새로 업로드 하는 경우, 3개의 첨부 파일을 모두 삭제하는 경우, 첨부 파일이 없을 때 파일을 업로드하는 경우 등) formdata 객체는 서버 전송에 필요한 데이터를 저장할 수 있다. 하지만 해당 객체는 보안상의 이유로 console.log(formdata);을 사용하여 객체 정보를 확인할 수 없다. formdata 객체의 정보를 확인하는 방법은 다음과 같다.for (var key of formData.keys()) { console.log(key);}for (var value of formData.values()) { console.log(value);}출처: https://programmerpsk.tistory.com/177&amp;lt;module-app-web/src/main/resources/templates/noticeBoard/form.html&amp;gt;&amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;Attached File&amp;lt;/th&amp;gt; &amp;lt;td&amp;gt; &amp;lt;input type=&quot;file&quot; multiple=&quot;multiple&quot; name=&quot;file&quot; id=&quot;file&quot;/&amp;gt; &amp;lt;div id=&quot;fileDrop&quot; class=&quot;fileDrop&quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;Total file size&amp;lt;/th&amp;gt; &amp;lt;td&amp;gt; &amp;lt;div&amp;gt;&amp;lt;span id=&quot;totalFileSize&quot;&amp;gt; 0 MB&amp;lt;/span&amp;gt;, Up to 20 MB&amp;lt;/div&amp;gt; &amp;lt;/td&amp;gt;&amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;Uplaod Attached File&amp;lt;/th&amp;gt; &amp;lt;td&amp;gt; &amp;lt;div id=&quot;attachedFileList&quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;Uploaded Attached File&amp;lt;/th&amp;gt; &amp;lt;td&amp;gt; &amp;lt;div id=&quot;uploadedAttachedFileList&quot; th:each=&quot;attachedFile : *{attachedFileList}&quot;&amp;gt; &amp;lt;div th:id=&quot;imgData + ${attachedFileStat.index}&quot;&amp;gt; &amp;lt;span th:text=&quot;${attachedFile.fileName} + &#39;,&amp;amp;nbsp;&#39; + &#39;File Size: &#39; + ${attachedFile.fileSize} + &#39;&amp;amp;nbsp;&#39;&quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;img th:attr=&quot;src=@{|/images/cancel.png|}, onclick=|deleteFile(&#39;${attachedFileStat.index}&#39;,&#39;${attachedFile.idx}&#39;,&#39;${attachedFile.savedFileName}&#39;)|&quot; th:style=&quot;&#39;width: 16px; height: 16px&#39;&quot;/&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;...&amp;lt;script&amp;gt; var totalFileSize = 0; var insertFileArray = []; var deleteFileArray = []; var imgDataId = 0; var exit = null; $(document).ready(function () { &amp;lt;!-- summernote setting --&amp;gt; $(&#39;#summernote&#39;).summernote({ height: 250, // 에디터 높이 minHeight: null, // 최소 높이 maxHeight: null, // 최대 높이 // focus: true, // 에디터 로딩후 포커스를 맞출지 여부 lang: &quot;ko-KR&quot;,// 한글 설정 placeholder: &quot;The editor&#39;s max input size of bytes is 16777215.&quot; //placeholder 설정 }); &amp;lt;!-- File Drop --&amp;gt; $(&quot;#fileDrop&quot;).on(&quot;dragenter dragover&quot;, function (event) { event.preventDefault(); // 기본 이벤트 발생을 막음 }); }); /* input tag event */ $(&#39;#file&#39;).change(function () { var files = document.getElementsByName(&quot;file&quot;)[0].files; for (var i = 0; i &amp;lt; files.length; i++) { insertFileArray.push(files[i]); document.getElementById(&quot;totalFileSize&quot;).innerHTML = convertFileSize(totalFileSize); $(&quot;#attachedFileList&quot;).append(&#39;&amp;lt;div id=&quot;imgData&#39; + imgDataId + &#39;&quot;&amp;gt;&#39; + &#39;&amp;lt;span&amp;gt;&#39; + files[i].name + &quot;,&amp;amp;nbsp; File Size: &quot; + convertFileSize(files[i].size) + &quot;&amp;amp;nbsp;&quot; + &#39;&amp;lt;img src=&quot;/images/cancel.png&quot; style=&quot;width: 16px; height: 16px&quot; onClick=&quot;cancelFile(&#39; + imgDataId + &#39;)&quot; /&amp;gt;&#39; + &#39;&amp;lt;/span&amp;gt;&#39; + &#39;&amp;lt;/div&amp;gt;&#39;); imgDataId++; } }); /* Drag &amp;amp; drop event */ $(&quot;#fileDrop&quot;).on(&quot;drop&quot;, function (event) { event.preventDefault(); // 기본 효과를 막음 // 드래그된 파일의 정보 // event : jQuery의 이벤트 // originalEvent : javascript의 이벤트 var files = event.originalEvent.dataTransfer.files; for (var i = 0; i &amp;lt; files.length; i++) { insertFileArray.push(files[i]); document.getElementById(&quot;totalFileSize&quot;).innerHTML = convertFileSize(totalFileSize); $(&quot;#attachedFileList&quot;).append(&#39;&amp;lt;div id=&quot;imgData&#39; + imgDataId + &#39;&quot;&amp;gt;&#39; + &#39;&amp;lt;span&amp;gt;&#39; + files[i].name + &quot;,&amp;amp;nbsp; File Size: &quot; + convertFileSize(files[i].size) + &quot;&amp;amp;nbsp;&quot; + &#39;&amp;lt;img src=&quot;/images/cancel.png&quot; style=&quot;width: 16px; height: 16px&quot; onClick=&quot;cancelFile(&#39; + imgDataId + &#39;)&quot; /&amp;gt;&#39; + &#39;&amp;lt;/span&amp;gt;&#39; + &#39;&amp;lt;/div&amp;gt;&#39;); imgDataId++; } }); // 새로 업로드한 파일을 취소하는 경우 function cancelFile(fileId) { $(&#39;#imgData&#39; + fileId).remove(); insertFileArray[fileId] = null; } // 기존 업로드한 파일을 삭제하는 경우 function deleteFile(fileId, idx, savedFileName) { $(&#39;#imgData&#39; + fileId).remove(); deleteFileArray.push(idx); } function deleteNoticeBoard(noticeBoardIdx) { // 게시글 삭제 $.ajax({ url: &quot;/api/notice-boards/&quot; + noticeBoardIdx, type: &quot;delete&quot;, dataType: &quot;text&quot;, contentType: &quot;application/json&quot;, async: false, }) .done(function (msg) { console.log(&quot;NoticeBoard delete success.&quot;); }) .fail(function (msg) { console.log(&quot;NoticeBoard delete fail.&quot;); }); }&amp;lt;/script&amp;gt;&amp;lt;script th:if=&quot;!${noticeBoardDto?.idx}&quot;&amp;gt; $(&#39;#insert&#39;).click(function () { var jsonData = $(&quot;#form&quot;).serializeObject(); var noticeBoardIdx; // 게시글 업로드 $.ajax({ url: &quot;http://localhost:8081/api/notice-boards&quot;, type: &quot;post&quot;, data: JSON.stringify(jsonData), dataType: &quot;text&quot;, contentType: &quot;application/json&quot;, async: false, }) .done(function (msg) { noticeBoardIdx = msg; exit = false; }) .fail(function (msg) { exit = true; }); if (exit) return false; // 파일 업로드 var formData = new FormData(); for (var i = 0; i &amp;lt; insertFileArray.length; i++) { formData.append(&quot;files&quot;, insertFileArray[i]); } formData.append(&quot;idx&quot;, noticeBoardIdx); $.ajax({ url: &quot;http://localhost:8081/api/notice-boards/attachedFile&quot;, type: &quot;post&quot;, data: formData, dataType: &quot;text&quot;, enctype: &#39;multipart/form-data&#39;, processData: false, contentType: false, async: false, }) .done(function (msg) { location.href = &quot;/notice-board?idx=&quot; + noticeBoardIdx; }) .fail(function (msg) { deleteNoticeBoard(noticeBoardIdx); }); });&amp;lt;/script&amp;gt;&amp;lt;script th:if=&quot;${noticeBoardDto?.idx}&quot; th:inline=&quot;javascript&quot;&amp;gt; $(&#39;#update&#39;).click(function () { var jsonData = $(&quot;#form&quot;).serializeObject(); var idx = document.getElementsByName(&quot;idx&quot;)[0].value; // 게시글 수정 $.ajax({ url: &quot;http://localhost:8081/api/notice-boards/&quot; + document.getElementsByName(&quot;idx&quot;)[0].value, type: &quot;put&quot;, data: JSON.stringify(jsonData), dataType: &quot;text&quot;, contentType: &quot;application/json&quot;, async: false, }) .done(function (msg) { exit = false; }) .fail(function (msg) { exit = true; }); if (exit) return false; // 만일 파일이 수정되지 않은 경우 &#39;파일 업로드&#39; 및 &#39;파일 삭제&#39;를 수행하지 않음 if (insertFileArray.length == 0 &amp;amp;&amp;amp; deleteFileArray.length == 0) { location.href = &#39;/notice-board?idx=&#39; + document.getElementsByName(&quot;idx&quot;)[0].value; } // 파일 삭제 if (deleteFileArray.length &amp;gt; 0) { $.ajax({ url: &quot;http://localhost:8081/api/notice-boards/attachedFile&quot;, type: &quot;delete&quot;, data: JSON.stringify(deleteFileArray), contentType: &quot;application/json&quot;, async: false, }) .done(function (msg) { console.log(&quot;AttachedFile delete success.&quot;); exit = false; }) .fail(function (msg) { console.log(&quot;AttachedFile delete fail.&quot;); exit = true; }); } if (exit) return false; if (insertFileArray.length &amp;lt;= 0) location.href = &quot;/notice-board?idx=&quot; + document.getElementsByName(&quot;idx&quot;)[0].value; // 파일 업로드 var formData = new FormData(); for (var i = 0; i &amp;lt; insertFileArray.length; i++) { formData.append(&quot;files&quot;, insertFileArray[i]); } formData.append(&quot;idx&quot;, idx); $.ajax({ url: &quot;http://localhost:8081/api/notice-boards/attachedFile&quot;, type: &quot;post&quot;, data: formData, dataType: &quot;text&quot;, enctype: &#39;multipart/form-data&#39;, processData: false, contentType: false, async: false, }) .done(function (msg) { location.href = &quot;/notice-board?idx=&quot; + document.getElementsByName(&quot;idx&quot;)[0].value; }) .fail(function (msg) { }) });&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt; 업로드된 파일 데이터를 클릭하면 api 서버가 요청에 응답하여, 파일을 다운로드 한다.&amp;lt;module-app-web/src/main/resources/templates/noticeBoard/read.html&amp;gt;&amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;Uploaded Attached File&amp;lt;/th&amp;gt; &amp;lt;td&amp;gt; &amp;lt;div id=&quot;attachedFileList&quot; th:each=&quot;attachedFile : *{attachedFileList}&quot;&amp;gt; &amp;lt;span th:attr=&quot;onclick=|location.href=&#39;http://localhost:8081/api/attachedFiles/download/${attachedFile.savedFileName}&#39;|&quot; th:text=&quot;${attachedFile.fileName} + &#39;,&amp;amp;nbsp;&#39; + &#39;File size: &#39; + ${attachedFile.fileSize}&quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;Util Java: 파일 업로드할 때 저장되는 파일의 크기 단위를 변경한다.&amp;lt;module-system-common/src/main/java/kr/ac/univ/util/FileUtil.java&amp;gt;package kr.ac.univ.util;import java.text.DecimalFormat;public class FileUtil { public static String getExtension(String fileName) { return (fileName.substring(fileName.lastIndexOf(&quot;.&quot;))).toLowerCase(); } public static String convertFileSize(long fileSize) { String retFormat = &quot;0&quot;; String[] s = { &quot;bytes&quot;, &quot;KB&quot;, &quot;MB&quot;, &quot;GB&quot;, &quot;TB&quot;, &quot;PB&quot; }; DecimalFormat df = new DecimalFormat(&quot;#,###.##&quot;); if (fileSize != 0) { int idx = (int) Math.floor(Math.log(fileSize) / Math.log(1024)); double ret = ((fileSize / Math.pow(1024, Math.floor(idx)))); retFormat = df.format(ret) + &quot; &quot; + s[idx]; } else { retFormat += &quot; &quot; + s[0]; } return retFormat; }} Javascript: 업로드 하는 파일의 크기 단위를 변경한다.(Byte 단위를 KB, MB 단위로 변경한다.)&amp;lt;module-app-web/src/main/resources/static/js/fileUtil.js&amp;gt;/* 파일 크기 변환 */function convertFileSize(fileSize) { var retFormat = &quot;0&quot;; var s = [&#39;bytes&#39;, &#39;KB&#39;, &#39;MB&#39;, &#39;GB&#39;, &#39;TB&#39;, &#39;PB&#39;]; var e = Math.floor(Math.log(fileSize) / Math.log(1024)); if (fileSize != 0) { retFormat = (fileSize / Math.pow(1024, e)).toFixed(2) + &quot; &quot; + s[e]; } else { retFormat = fileSize + &quot; &quot; + s[0]; } return retFormat;}; Javascript: fileUtil.js 파일을 다른 파일에서 사용할 수 있도록 포함시킨다.&amp;lt;module-app-web/src/main/resources/templates/layout/script.html&amp;gt;...&amp;lt;script th:src=&quot;@{/js/fileUtil.js}&quot;&amp;gt;&amp;lt;/script&amp;gt;...프로젝트 실행 결과 NoticeBoard form 페이지에서 파일을 업로드 하면 다음 이미지 처럼 프로젝트의 upload 폴더에 파일이 업로드 된다. 드래그앤드랍으로 파일을 이동시키는 경우 파일 업로드가 된다. 첨부 파일의 삭제(X 버튼 클릭) 클릭한 경우 업로드 하는 파일이 취소되며, 해당 상태에서 Update 버튼을 클릭하면 upload 폴더에 실제 파일이 삭제된다." }, { "title": "MISRA C++ 2008 가이드라인 개요", "url": "/posts/MISRA-CPP1/", "categories": "MISRA CPP, SW Test", "tags": "", "date": "2020-08-04 00:00:00 +0900", "snippet": " 안전성과 신뢰성이 요구되는 임베디드시스템에서 사용되는 MISRA C++ 2008 가이드라인을 소개한다.소프트웨어 안전성 관점에서의 C++ 특징 C++은 다중 상속, 템플릿, 연산자 오버로드, 예외처리, 실행시 형 식별 등과 같은 다양한 기능을 가지고 있다. 하지만 그만큼 C++의 표준은 다른 언어보다 복잡하고 난해하기에, 오류로 이어질 가능성이 크다. 이러한 C++의 특징은 컴파일러 개발자가 C++ 표준을 잘못 해석하여 표준과 다른 방향으로 결과를 출력할 가능성이 다른 언어보다 크다. C++ 표준은 언어의 정의를 명확하게 정의하지 않았다. 따라서 개발자의 예상과 다른 의도치 않은 결과를 초래할 수 있으며 이는 결함으로 이어질 수 있다. 또한 C++ 컴파일러 마다 언어 정의를 다르게 구현하여 같은 소스 코드라도 컴파일러 마다 다른 결과를 출력할 수 있기에, 개발자는 이점을 유의해야 한다. C++은 실행 시간을 점검하는 기능이 부족하기에, 예기치 못한 실행 시간 에러가 발생할 수 있다. 일반적으로 산술 예외(0으로 나누기), 오버플로, 포인터 주소의 유효성 또는 잘못된 배열 참조 에러는 개발자가 직접 확인해야 한다.MISRA C++란? MISRA(Motor Industry Software Reliability Association) 자동차 산업에서 개발된 C++ 개발 가이드라인이다. 안전성, 보안성, 이식성, 신뢰성이 요구되는 안전 필수 시스템(safety-critical- systems, 자동차, 우주, 항공, 국방, 철도 등) 소프트웨어 개발에서 대표적인 표준 가이드라인으로 사용되고 있다. MISRA C++ 2008 가이드라인을 통하여 C++ 안전성을 검증 할 수 있다. C++ 03 표준인 ISO 14882 : 2003에 정의된 대로만 사용해야 하며, 언어 확장 사용을 금지한다. 총 228개의 규칙으로 구성된다.Deviation(예외) 특정 경우에 따라서 예외적으로 MISRAC C++: 2008 규칙을 위배할 수 있다. 이러한 deviation은 코드나 파일로 문서화하여 기록해야 한다. 규칙을 위배하는 경우 소프트웨어의 안전성에 부정적인 영향을 주지 않는다는 근거와 이에 대한 자세한 설명이 문서에 명시되어야 한다. Deviation의 대부분은 입출력 작업에서 발생하며, 출력 프로세스를 다른 부분과 분리되도록 설계할 것을 권고한다.ex) Deviation 예제마이크로프로세서 하드웨어와의 인터페이스에 작성된 소스 코드는 언어 확장을 사용해야 하므로, MISRA C++ 2008 규칙을 위배하게 된다." }, { "title": "Project Lab 7. 게시판 개발(새로운 글 표시) - 4", "url": "/posts/Project-Lab7/", "categories": "Web, Project Lab", "tags": "", "date": "2020-08-03 00:00:00 +0900", "snippet": " 새로운 게시글이 등록되었을 때, 사용자가 이를 확인 할 수 있는 기능 개발 과정을 소개한다. github: https://github.com/scribnote5/lab github commit: https://github.com/scribnote5/lab/commit/51751f0a9c6b8a7b2fc75e39f449697588f38026 최신 프로젝트 코드와 형상이 다를 수 있습니다. 게시글 코드는 참고만 하시되, 최신 코드는 github에서 확인 부탁드립니다.새로운 글 표시 하단 이미지는 네이버 카페에서 새로운 게시글을 등록하였을 때, N 아이콘을 사용하여 사용자에게 최근 등록된 게시글임을 알려주고 있다. 네이버 카페처럼 새로운 게시글을 등록하였을 때, 사용자가 이를 확인할 수 있는 기능을 개발하려고 한다. 새로운 글인지를 판별하기 위해서는 등록될 때 날짜와 현재 날짜를 비교해야 한다.출처: https://cafe.naver.com/thisisjavaUtil Java: 게시글이 등록된 날짜와 현재 날짜를 비교한다. 해당 메소드는 비교 단위가 시간(hour)으로 계산하기에, 시간에 따른 오차가 발생한다. ‘게시글이 등록된 날짜’가 ‘현재 시간 + 24시간’보다 이전인 경우(최근에 등록된 게시글) true를 반환하며, 아닌 경우 false를 반환한다.&amp;lt;module-system-common/src/main/java/kr/ac/univ/util/NewIconCheck.java&amp;gt;package kr.ac.univ.util;import java.time.LocalDateTime;import java.time.temporal.ChronoUnit;public class NewIconCheck { public static Boolean isNew(LocalDateTime pastLocalDateTime ) { LocalDateTime currentTime = LocalDateTime.now(); // 현재 시간과 비교하여 24시간 이내인 경우 newIcon 생성 boolean result; if(ChronoUnit.HOURS.between(currentTime , pastLocalDateTime) &amp;gt;= -24 ) { result = true; } else { result = false; } return result; }}JUnit Test ‘게시글이 등록된 날짜’와 ‘현재 시간 + 24시간’을 비교하여 최근에 등록된 게시글인지 판별하는 과정을 테스트하였다. 테스트를 수행하려면 비교하고 싶은 날짜와 시간 수정이 필요하다.&amp;lt;module-app-web/src/test/java/kr/ac/univ/NewIconCheckTest.java&amp;gt;package kr.ac.univ;import kr.ac.univ.noticeBoard.repository.NoticeBoardRepository;import kr.ac.univ.noticeBoard.repository.NoticeBoardRepositoryImpl;import kr.ac.univ.util.NewIconCheck;import lombok.extern.slf4j.Slf4j;import org.junit.Assert;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.EnableAutoConfiguration;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit.jupiter.SpringExtension;import java.time.LocalDateTime;@Slf4j@SpringBootTest@EnableAutoConfiguration@ExtendWith(SpringExtension.class)public class NewIconCheckTest { @Autowired NoticeBoardRepository noticeBoardRepository; @Autowired NoticeBoardRepositoryImpl noticeBoardRepositoryImpl; @Test @DisplayName(&quot;Time 테스트&quot;) public void Test() { long days = 2; // 비교하고 싶은 날짜와 시간을 입력한다. LocalDateTime pastDateTime = LocalDateTime.of(2020, 7, 30, 0, 0, 0, 0); // 현재 날짜와 비교하고 싶은 날짜의 차이가 24시간인 경우 Test가 통과된다. Assert.assertEquals(NewIconCheck.isNew(pastDateTime),true); }}Domain 및 DTO NoticeBoard에서 사용하는 DTO다. 새로 등록한 게시글인지 확인하는 boolean 자료형 isNewIcon 멤버 필드를 추가하였다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/noticeBoard/dto/NoticeBoardDto.java&amp;gt;package kr.ac.univ.noticeBoard.dto;import kr.ac.univ.common.domain.enums.ActiveStatus;import kr.ac.univ.common.dto.CommonDto;import kr.ac.univ.noticeBoard.domain.NoticeBoardAttachedFile;import lombok.Getter;import lombok.NoArgsConstructor;import lombok.Setter;import lombok.ToString;import java.util.ArrayList;import java.util.List;@Getter@Setter@NoArgsConstructor@ToStringpublic class NoticeBoardDto extends CommonDto { /* CommonDto: JPA Audit */ /* 기본 정보 */ private String title; private String content; private ActiveStatus activeStatus; private Long viewCount; /* newIcon */ private boolean isNewIcon;}Service NoticeBoard의 비즈니스 로직이다. findNoticeBoardList(모든 게시글 리스트 검색): 최근 등록된 게시글을 판별하는 로직을 해당 메소드에서 판별한다. ‘noticeBoardDto.setNewIcon(NewIconCheck.isNew(LocalDateTime.now()));’ 해당 소스 코드는 JPA Audit을 적용한 다음 createdDated(게시글 등록 날짜)로 변경할 예정이다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/noticeBoard/service/NoticeBoardService.java&amp;gt;... public Page&amp;lt;NoticeBoardDto&amp;gt; findNoticeBoardList(Pageable pageable) { Page&amp;lt;NoticeBoard&amp;gt; noticeBoardList = null; Page&amp;lt;NoticeBoardDto&amp;gt; noticeBoardDtoList = null; pageable = PageRequest.of(pageable.getPageNumber() &amp;lt;= 0 ? 0 : pageable.getPageNumber() - 1, pageable.getPageSize(), Sort.Direction.DESC, &quot;idx&quot;); noticeBoardList = noticeBoardRepository.findAll(pageable); noticeBoardDtoList = new PageImpl&amp;lt;NoticeBoardDto&amp;gt;(NoticeBoardMapper.INSTANCE.toDto(noticeBoardList.getContent()), pageable, noticeBoardList.getTotalElements()); // NewIcon 판별 for(NoticeBoardDto noticeBoardDto : noticeBoardDtoList) { // 추후 변경 noticeBoardDto.setNewIcon(NewIconCheck.isNew(LocalDateTime.now())); } return noticeBoardDtoList; }View NoticeBoard 관련 데이터를 화면에 출력한다. 최근 등록된 게시글은 NoticeBoard list.html에서 newIcon의 조건을 판별 후 true인 경우 N 아이콘을 출력한다. 참고로 자바 DTO에서는 isNewIcon 변수를 사용하지만, thymeleaf에서는 이와 다르게 is가 생략된 newIcon 변수를 사용한다.&amp;lt;module-app-web/src/main/resources/templates/noticeBoard/list.html&amp;gt;...&amp;amp;nbsp;&amp;lt;img th:if=&quot;${noticeBoardDto.newIcon}&quot; th:attr=&quot;src=@{|/images/new_icon.png|}&quot; th:style=&quot;&#39;width: 15px; height: 15px&#39;&quot; /&amp;gt;...프로젝트 실행 및 결과 다음과 같이 새로 등록된 게시글에 N 아이콘이 표시되는 것을 확인할 수 있다." }, { "title": "Project Lab 6. 게시판 개발(DTO, MapStruct) - 3", "url": "/posts/Project-Lab6/", "categories": "Web, Project Lab", "tags": "", "date": "2020-08-02 00:00:00 +0900", "snippet": " Object Mapping를 제공하는 MapStruct를 사용하여, Domain 모델에서 DTO 모델로 변환하는 과정을 소개한다. github: https://github.com/scribnote5/lab github commit: https://github.com/scribnote5/lab/commit/f0d7ab13069ebdb5ec8018f8da510c03790a08c5 최신 프로젝트 코드와 형상이 다를 수 있습니다. 게시글 코드는 참고만 하시되, 최신 코드는 github에서 확인 부탁드립니다.DTO(Data Transfer Object) 계층간 데이터 교환을 위한 객체(Java Beans)이다. DTO는 데이터 접근만을 위해 사용하는 Domain Model을 복사한 형태로, view에서 부가적으로 사용하는 데이터(멤버 필드)를 추가한 객체다.DTO를 사용하는 이유 기존 Domain Model은 개발하기 빠르다는 장점이 있다. 하지만 프로젝트의 로직이 복잡해지는 경우, DTO를 사용하면 객체지향 프로그래밍을 할 수 있고, 프론트엔드와 백엔드에서 사용하는 데이터를 명확하게 구분지을 수 있어 추후 유지보수가 쉬워지는 장점이 있다.객체의 역할을 철저하게 분리하기 위해 Domain에 view 로직에서 사용되는 데이터가 포함될 수 있다. 따라서 모든 클래스는 하나의 책임만 가지 객체의 ‘단일 책임 원칙’을 위반하게 된다.Domain model은 View 계층의 요구사항을 모두 반영할 수 없음 Domain은 실제 DB 테이블과 매칭되기에, view의 요구사항을 모두 반영하여 표현하기 어렵다. 만약 요구사항을 모두 반영하게 된다면 객체 간의 결합도가 증가하기 때문에 객체에서 코드를 수정하는 경우 다른 객체에서 코드 수정이 불가피하게 발생할 수 있으며 이를 개발자가 놓치는 경우 버그로 이어질 수 있다.출처:https://netframework.tistory.com/entry/16-Model-%EA%B8%B0%EC%88%A0-%EC%A0%95%EB%A6%AC-%EB%B0%8F-%EB%B9%84%EA%B5%90https://gmlwjd9405.github.io/2018/12/25/difference-dao-dto-entity.htmlDTO 사용 범위? 구글링한 결과, 이미 많은 개발자들은 ‘DTO의 사용 범위를 어디까지 정해야 하는가?’에 대한 고민을 계속 하였다. ‘DTO를 controller에서만 사용한다? DTO를 service까지 사용한다?’ 등 다양한 의견들이 있었지만, 이에 대한 명확한 해답은 없었다. 프로젝트에서는 service 계층까지 DTO를 사용할 것이며, DTO &amp;lt;-&amp;gt; domain 간 객체 mapping 과정 또한 service 계층에서만 수행할 것이다.출처: https://velog.io/@aidenshin/DTO%EC%97%90-%EA%B4%80%ED%95%9C-%EA%B3%A0%EC%B0%B0https://os94.tistory.com/157https://yonguri.tistory.com/m/entry/Entity-DTO-%EA%B7%B8-%EC%82%AC%EC%9D%B4%EC%9D%98-ModelMapper-%EC%9D%B4%EC%95%BC%EA%B8%B0Mapstrcut DTO &amp;lt;-&amp;gt; Entity간 객체 mapping 소스 코드를 자동으로 생성하는 라이브러리다. 하단 출처처럼 객체 간 mapping을 지원하는 라이브러리가 많이 존재하지만, 가장 많이 사용하는 ModelMapper와 MapStruct의 처리 속도를 비교한 결과 MapStruct의 속도가 더 빠른 것으로 확인되어 MapStruct를 선택하게 되었다.출처:https://www.baeldung.com/java-performance-mapping-frameworks의존성 라이브러리 관리 Mapstrcut 의존성 라이브러리를 추가한다. 해당 프로젝트에서 사용하는 mapstruct 버전은 1.3.1이며, lombok 버전은 1.18.12다. Mapstruct의 의존성이 lombok 보다 먼저 선언되어야 한다. 원인은 모르겠지만 의존성 순서가 변경되면 JUnit 테스트시 Mapper 인터페이스의 구현체인 MapperImpl 클래스를 인식하지 못하는 문제가 발생한다.&amp;lt;build.gradle&amp;gt;...// mapstruct, lombok 의존성보다 먼저 선언되어야 한다.implementation &quot;org.mapstruct:mapstruct:1.3.1.Final&quot;annotationProcessor &quot;org.mapstruct:mapstruct-processor:1.3.1.Final&quot;// lombokimplementation &quot;org.projectlombok:lombok&quot;annotationProcessor &quot;org.projectlombok:lombok&quot;... 만약 lombok 버전이 1.18.16 이후인 경우 mapstruct 이슈로 매핑 코드가 생성되지 않으므로 다음과 같이 의존성 라이브러리를 선언해야 한다.&amp;lt;build.gradle&amp;gt;// Mapstructimplementation &quot;org.mapstruct:mapstruct:1.4.2.Final&quot;annotationProcessor &quot;org.mapstruct:mapstruct-processor:1.4.2.Final&quot;// lombokimplementation &quot;org.projectlombok:lombok&quot;implementation &quot;org.projectlombok:lombok-mapstruct-binding:0.2.0&quot;annotationProcessor &quot;org.projectlombok:lombok&quot;annotationProcessor &quot;org.projectlombok:lombok-mapstruct-binding:0.2.0&quot;출처: https://huisam.tistory.com/entry/mapStructhttps://wise-develop.tistory.com/18Domain 및 DTO 모든 Mapper 클래스가 공통적으로 사용하는 인터페이스다. DTO &amp;lt;-&amp;gt; Entity간 객체 mapping을 담당하는 MapperImpl 클래스는 EntityMapper 인터페이스를 구현받으며, EntityMapper 인터페이스의 메소드는 Mapstruct에 의해 자동으로 DTO &amp;lt;-&amp;gt; Entity간 객체 mapping 소스 코드가 생성된다. Gradle build 할 때 MapStruct는 자동으로 MapeprImpl 소스 코드를 생성한다. MapperImpl 소스 코드는 Domain 그리고 DTO에 선언된 setter 또는 builder 패턴에 의하여 매핑 코드를 생성한다. setter와 builder 패턴이 동시에 존재하는 경우 setter을 우선적으로 사용한다. 본 프로젝트에서는 Domain에서는 builder 패턴을 사용하였으며, DTO에서는 setter를 사용하여 매핑 코드를 생성gks다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/common/dto/mapper/EntityMapper&amp;gt;package kr.ac.univ.common.dto.mapper;import java.util.List;public interface EntityMapper &amp;lt;Dto, Entity&amp;gt; { Entity toEntity(Dto dto); Dto toDto(Entity entity); List&amp;lt;Entity&amp;gt; toEntity(List&amp;lt;Dto&amp;gt; dto); List&amp;lt;Dto&amp;gt; toDto(List&amp;lt;Entity&amp;gt; entity);} NoticeBoard Entity&amp;lt;-&amp;gt;DTO간 객체 mapping 소스 코드가 Mapstruct에 의해 생성되도록 메소드를 선언 및 하는 클래스다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/noticeBoard/NoticeBoardMapper&amp;gt;package kr.ac.univ.noticeBoard.dto.mapper;import kr.ac.univ.common.dto.mapper.EntityMapper;import kr.ac.univ.noticeBoard.domain.NoticeBoard;import kr.ac.univ.noticeBoard.dto.NoticeBoardDto;import org.mapstruct.Mapper;import org.mapstruct.factory.Mappers;@Mapper(componentModel = &quot;spring&quot;)public interface NoticeBoardMapper extends EntityMapper&amp;lt;NoticeBoardDto, NoticeBoard&amp;gt; { NoticeBoardMapper INSTANCE = Mappers.getMapper(NoticeBoardMapper.class);} Domain 클래스가 공통적으로 사용하는 데이터를 담은 클래스다. 모든 Domain 클래스는 CommonAudit 클래스를 상속 받는다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/common/domain/CommonAudit&amp;gt;package kr.ac.univ.common.domain;import kr.ac.univ.common.domain.enums.ActiveStatus;import lombok.Getter;import lombok.Setter;import lombok.ToString;import org.springframework.data.annotation.CreatedDate;import org.springframework.data.annotation.LastModifiedDate;import org.springframework.data.jpa.domain.support.AuditingEntityListener;import javax.persistence.*;import java.time.LocalDateTime;@MappedSuperclass@Getter@Setter@ToString@EntityListeners(AuditingEntityListener.class)public abstract class CommonAudit { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long idx; @Column(nullable = false, updatable = false) @CreatedDate private LocalDateTime createdDate; @LastModifiedDate private LocalDateTime lastModifiedDate; private String createdBy; private String lastModifiedBy; @Enumerated(EnumType.STRING) private ActiveStatus activeStatus; private Long views = 0L;} NoticeBoard에서 사용하는 Domain다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/noticeBoard/dto/NoticeBoard&amp;gt;package kr.ac.univ.noticeBoard.domain;import kr.ac.univ.common.domain.CommonAudit;import kr.ac.univ.common.domain.enums.ActiveStatus;import kr.ac.univ.noticeBoard.listener.NoticeBoardListener;import lombok.Builder;import lombok.Getter;import lombok.NoArgsConstructor;import lombok.ToString;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.EntityListeners;import javax.persistence.Table;@Getter@NoArgsConstructor@Entity@Table@ToStringpublic class NoticeBoard extends CommonAudit { private String title; private Long mainPagePriority; private String content; @Builder public NoticeBoard(Long idx, String createdBy, String lastModifiedBy, ActiveStatus activeStatus, String title, Long mainPagePriority, String content) { setIdx(idx); setCreatedBy(createdBy); setLastModifiedBy(lastModifiedBy); setActiveStatus(activeStatus); this.title = title; this.mainPagePriority = mainPagePriority; this.content = content; } public void update(NoticeBoard noticeBoard) { setActiveStatus(noticeBoard.getActiveStatus()); this.title = noticeBoard.getTitle(); this.mainPagePriority = noticeBoard.getMainPagePriority(); this.content = noticeBoard.getContent(); }} DTO 클래스가 공통적으로 사용하는 데이터를 담은 클래스다. 모든 DTO 클래스는 CommonDto 클래스를 상속 받는다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/common/dto/CommonDto&amp;gt;package kr.ac.univ.common.dto;import lombok.Getter;import lombok.NoArgsConstructor;import lombok.Setter;import lombok.ToString;import java.time.LocalDateTime;@Getter@Setter@NoArgsConstructor@ToStringpublic class CommonDto { private Long idx; private LocalDateTime createdDate; private LocalDateTime lastModifiedDate; private String createdBy; private String lastModifiedBy; private boolean isAccess;} NoticeBoard에서 사용하는 DTO다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/noticeBoard/dto/NoticeBoardDto&amp;gt;import kr.ac.univ.common.domain.enums.ActiveStatus;import kr.ac.univ.common.dto.CommonDto;import lombok.Getter;import lombok.NoArgsConstructor;import lombok.Setter;import lombok.ToString;@Getter@Setter@NoArgsConstructor@ToStringpublic class NoticeBoardDto extends CommonDto { /* CommonDto: JPA Audit */ /* 기본 정보 */ private String title; private String content; private ActiveStatus activeStatus; private Long viewCount;} Gradle build를 수행하면 다음 이미지와 같이 프로젝트에서 MapperImpl 경로를 자동으로 인식하고 Mapper 인터페이스가 구현되어 MapperImpl 클래스가 자동으로 생성한다. DTO &amp;lt;-&amp;gt; Entity간 객체 mapping을 담당하는 소스 코드가 MapperImpl에 자동으로 생성되기 위해서는, domain에 builder pattern이 구현되야 한다. 자동으로 생성된 MapperImpl 클래스를 확인해 보면, builder pattern을 사용하여 mapping을 수행하는 것을 확인할 수 있다.JUnit Test MapperImpl 클래스의 DTO &amp;lt;-&amp;gt; Entity간 객체 mapping을 테스트 하였다.&amp;lt;module-app-web/src/test/java/kr/ac/univ/MapStructTest&amp;gt;package kr.ac.univ;import kr.ac.univ.noticeBoard.domain.NoticeBoard;import kr.ac.univ.noticeBoard.dto.NoticeBoardDto;import kr.ac.univ.noticeBoard.dto.mapper.NoticeBoardMapper;import lombok.extern.slf4j.Slf4j;import org.junit.Assert;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.springframework.boot.autoconfigure.EnableAutoConfiguration;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit.jupiter.SpringExtension;@SpringBootTest@EnableAutoConfiguration@ExtendWith(SpringExtension.class)@Slf4jpublic class MapStructTest { @Test @DisplayName(&quot;Mapstrcut 테스트&quot;) public void Test() { NoticeBoardDto noticeBoardDto = new NoticeBoardDto(); noticeBoardDto.setTitle(&quot;제목입니다&quot;); noticeBoardDto.setContent(&quot;글입니다&quot;); NoticeBoard noticeBoard = NoticeBoardMapper.INSTANCE.toEntity(noticeBoardDto); // DTO -&amp;gt; Entity Assert.assertEquals(noticeBoardDto.getTitle(), noticeBoard.getTitle()); Assert.assertEquals(noticeBoardDto.getContent(), noticeBoard.getContent()); }}Service NoticeBoard의 비즈니스 로직이다. MapStruct를 사용하여 DTO &amp;lt;-&amp;gt; Entitiy간 객체 mapping 소스 코드를 추가하였다. findNoticeBoardList는 페이징 처리하여 NoticeBoard 리스트를 반환하는 메소드다. 해당 메소드에서 Pageable 객체는 Paging을 담당하고 NoticeBoard 리스트를 반환하는 객체로 DTO 변환 과정이 기존과 다르다. 해당 객체를 DTO로 변환하는 소스 코드는 하단 출처를 참고하였다.출처: https://effectivecode.tistory.com/1220&amp;lt;module-domain-core/src/main/java/kr/ac/univ/noticeBoard/service/NoticeBoardService&amp;gt;package kr.ac.univ.noticeBoard.service;import kr.ac.univ.noticeBoard.domain.NoticeBoard;import kr.ac.univ.noticeBoard.dto.NoticeBoardDto;import kr.ac.univ.noticeBoard.dto.mapper.NoticeBoardMapper;import kr.ac.univ.noticeBoard.repository.NoticeBoardRepository;import kr.ac.univ.noticeBoard.repository.NoticeBoardRepositoryImpl;import org.springframework.data.domain.*;import org.springframework.stereotype.Service;import javax.transaction.Transactional;@Servicepublic class NoticeBoardService { private final NoticeBoardRepository noticeBoardRepository; private final NoticeBoardRepositoryImpl noticeBoardRepositoryImpl; public NoticeBoardService(NoticeBoardRepository noticeBoardRepository, NoticeBoardRepositoryImpl noticeBoardRepositoryImpl) { this.noticeBoardRepository = noticeBoardRepository; this.noticeBoardRepositoryImpl = noticeBoardRepositoryImpl; } public Page&amp;lt;NoticeBoardDto&amp;gt; findNoticeBoardList(Pageable pageable) { Page&amp;lt;NoticeBoard&amp;gt; noticeBoardList = null; pageable = PageRequest.of(pageable.getPageNumber() &amp;lt;= 0 ? 0 : pageable.getPageNumber() - 1, pageable.getPageSize(), Sort.Direction.DESC, &quot;idx&quot;); noticeBoardList = noticeBoardRepository.findAll(pageable); return new PageImpl&amp;lt;NoticeBoardDto&amp;gt;(NoticeBoardMapper.INSTANCE.toDto(noticeBoardList.getContent()), pageable, noticeBoardList.getTotalElements()); } public Long insertNoticeBoard(NoticeBoard noticeBoard) { return noticeBoardRepository.save(noticeBoard).getIdx(); } public NoticeBoardDto findNoticeBoardByIdx(Long idx) { noticeBoardRepositoryImpl.updateViewCountById(idx); return NoticeBoardMapper.INSTANCE.toDto(noticeBoardRepository.findById(idx).orElse(new NoticeBoard())); } @Transactional public Long updateNoticeBoard(Long idx, NoticeBoard noticeBoard) { noticeBoardRepository.getOne(idx).update(noticeBoard); return noticeBoardRepository.save(noticeBoard).getIdx(); } public void deleteNoticeBoardByIdx(Long idx) { noticeBoardRepository.deleteById(idx); }}Controller NoticeBoard 관련 클라이언트의 요청을 view로 매핑한다. Controller에서 view로 전달하는 noticeBoard 변수명을 noticeBoardDto로 변경하였다.&amp;lt;module-app-web/src/main/java/kr/ac/univ/controller/NoticeBoardController&amp;gt;model.addAttribute(&quot;noticeBoardDtoList&quot;, noticeBoardService.findNoticeBoardByIdx(idx));View NoticeBoard 관련 데이터를 화면에 출력한다.&amp;lt;module-app-web/src/main/resources/templates/noticeBoard/list, form, read&amp;gt;&amp;lt;tr th:each=&quot;noticeBoardDto : ${noticeBoardDtoList}&quot;&amp;gt;" }, { "title": "무기체계 소프트웨어의 정적시험 개요", "url": "/posts/Reliability-Test3/", "categories": "SW Test", "tags": "", "date": "2020-07-30 00:00:00 +0900", "snippet": " 본 글은 무기체계 소프트웨어의 정적시험을 소개하는 글이며, ‘방위사업청 매뉴얼 제2020-8호’에 참고하여 작성하였다.정적시험 소프트웨어를 실행하지 않은 상태에서 잠재적인 결함을 검출하는 시험을 말하며, 코딩 규칙(Coding Rule) 검증, 취약점 점검 그리고 소스코드 메트릭(Code Metrics) 점검을 의미한다. 개발자들은 신뢰성 시험을 피하기 위해서 파이썬 등의 신뢰성 시험에 지정되지 않는 언어를 사용하는 경우가 있다. 해당 경우, 신뢰성 검증을 위한 방안을 서로 협의해야 한다. 일반적인 무기체계 소프트웨어에서는 보안성 시험을 수행하지 않는다. 전장관리시스템, 그룹웨어 같은 극히 제한된 시스템에서 보안성 시험을 수행한다. 보안성 시험은 행정안전부의 ‘소프트웨어 개발보안 가이드’를 준수해야 한다.정적 시험 예외 처리 사례상용 소프트웨어(C 파일)을 참조하는 헤더 파일(코드를 수정하여 시험 대상에 포함)에서 위배 발생 상용 소프트웨어(C 파일)은 시험 제외 대상이고 이를 참조하는 헤더 파일에서 ‘함수의 정의가 없다’라는 위배가 발생 1번째 예외 처리 방법: 상용 소프트웨어(C 파일)임을 증빙할 수 있는 서류를 준비한다. 2번째 예외 처리 방법: 상용 소프트웨어(C 파일)은 시험 제외 대상 파일로서 헤더 파일이 함수의 정의를 찾을 수 없다고 작성한다.FA 보고서 작성 방법 예외 처리 규칙과 오탐 규칙 모두 FA 보고서에 작성해야 한다.예외 처리 규칙을 위배하지만 프로그램 수행 로직을 위해서, 유지보수 용이성을 위해서 위배를 수정할 수 없는 경우다.ex) C/C++에서 포인터 간 형변환오탐 처리 정적시험 도구가 규칙을 잘못 분석하여 위배로 판단하는 경우다. 슈어소프트에서는 발급한 고객지원 확인서를 발급 받아 이를 증빙자료로 첨부한다. QAC를 비롯한 다른 정적시험 도구 개발 회사에서는 별도의 고객지원 확인서를 발급하지 않는다.정적시험 추세 현황 22.07 기준으로 기존 C++ MFC 프로젝트를 생산성이 좋은 C# 프로젝트로 대체함에 따라, 정적시험 추세다.(모든 정적시험 수행 현황이 아님을 강조 드립니다.) 윈도우 GUI 프로젝트들은 과거 C++ MFC 프로젝트 대신 생산성이 좋은 C# 프로젝트로 대체하여 개발하는 사례가 많아지고 있다. C#은 코딩 규칙인 C# Coding conventions(StyleCop)의 경우 C/C++과 다르게 위배 수정이 쉽고, 취약점 규칙(CWE)이 없으므로 정적시험 수행 공수를 많이 절약 할 수 있다.1. 코딩 규칙 검증 소프트웨어 구현에 적용하는 소스 코드 작성 규칙을 점검한다. 적용 대상 언어는 C, C++, C#, JAVA 이며. 대상 언어별 적용되는 표준은 다음과 같다. C: MISRA C 2012 C++: MISRA C++: 2008, JSF++(Koint Strike Figher Air Vehicle C++) =&amp;gt; 일반적으로 MISRA C++: 2008 규칙으로 검증한다. Java: Code conventions for the Java Programming Language(Oracle) C#: C# Coding conventions(StyleCop) 또는 .NET Framework Design Guideline(Microsoft, FxCop) =&amp;gt; C# Coding conventions은 단순 코드 스타일을 수정하는 규칙으로 .NET Framework Design Guideline 보다 정적시험 수정이 쉽다. 전력형 무기 즉, 방위력 개선사업으로 개발되는 소프트웨어는 MISRA C 2012, MISRA C++: 2008 가이드라인을 를 통해 검증하며, 국산화 소프트웨어는 DAPA 가이드라인을 통해 검증한다.ex) KF-X에 탑재되는 소프트웨어는 국산화 소프트웨이므로 DAPA 규칙으로 검증한다. MISRA C 2012에 대한 자세한 내용은 다음 글에서 확인할 수 있다.참고: https://scribnote5.github.io/categories/#misra-c C언어 보안 취약점 방지를 위한 시큐어 코딩 표준에는 CWE, CERT C, IS/IOEC TS 17961:2013, C Secure, MISRA C가 존재한다. MISRA C/C++ 가이드라인은 다른 시큐어 코딩 표준과 겹치는 내용을 포함하고 있기에, MISRA C/C++ 가이드라인을 검증하면 보안 취약점을 준수할 수 있다.출처: https://m.blog.naver.com/PostView.nhn?blogId=mds_datasecurity&amp;amp;logNo=221422521951&amp;amp;proxyReferer=https%3A%2F%2Fwww.google.com%2F Java 정적 시험 규칙인 Oracle Code Convention의 경우 현재 상용 중인 정적 시험 도구에서 모든 규칙을 다 지원하지 않으므로 여러 도구를 같이 사용하여, 정적 시험 규칙을 최대한 준수한다. 어느 도구에서 어떤 규칙을 지원하는지 매핑 테이블을 통하여 관리해야 한다.(실사 대응)ex) STATIC, Sparrow, PMD, FindBugs를 사용2. 소스코드 메트릭 점검 소프트웨어의 복잡도 감소, 유지보수 용이성 증대 등 소프트웨어 품질향상을 위한 소스 코드의 품질 측정지표다. 소스코드 메트릭에 대한 자세한 내용은 ‘소스코드 메트릭(Code Metrics) 개요’ 게시글에서 확인할 수 있다.3. 취약점 점검 소프트웨어 소스 코드가 CWE(Common Weakness Enumeration) 목록에 정의된 취약점을 포함하고 있는지 점검한다. CWE는 언어에 따라 CWE-658: C, CWE-659: C++, CWE-660: Java로 분류된다. MISRA C/C++ 가이드라인을 준수 한다면, CWE에서 선정한 취약점도 보완할 수 있다. CWE에 대한 자세한 내용은 ‘CWE(Common Weakness Enumeration) 개요’ 게시글에서 확인할 수 있다. 22.07 기준 Java 취약점 점검 규칙인 CWE-660의 경우, 현재 상용 중인 정적시험 도구에서는 모든 규칙을 다 지원하지 않으므로 여러 도구를 같이 사용하여, 정적시험 규칙을 최대한 준수하는 방향으로 진행한다. 실사 대응을 위해 어느 도구에서 어떤 규칙을 지원하는지 매핑 테이블을 통하여 관리해야 한다.ex) STATIC, Sparrow, PMD, FindBugs를 사용대표적인 소프트웨어 실행시간 관련 오류 예시(C/C++)" }, { "title": "Project Lab 5. 게시판 개발(QueryDsl, 조회수 개발) - 2", "url": "/posts/Project-Lab5/", "categories": "Web, Project Lab", "tags": "", "date": "2020-07-30 00:00:00 +0900", "snippet": " QueryDsl를 사용한 게시판 조회수 개발 과정을 소개한다. github: https://github.com/scribnote5/lab github commit: https://github.com/scribnote5/lab/commit/f4397007c39e0844c2c05822a640561636b14631 최신 프로젝트 코드와 형상이 다를 수 있습니다. 게시글 코드는 참고만 하시되, 최신 코드는 github에서 확인 부탁드립니다.QueryDsl를 사용하는 이유 QueryDsl을 사용하는 가장 큰 이유는 JPA 에서 제공하지 않는 동적 쿼리를 수행할 수 있기 때문이다. 문자열이 아닌 자바 소스 코드로 쿼리를 작성하기에 컴파일 시점에 문법 오류를 발견할 수 있다. DB 종류와 관계없이 하나의 통일된 문법으로 쿼리를 작성할 수 있다. IDE에서 제공하는 소스 코드 자동 완성 기능을 활용 할 수 있다. 출처: https://ict-nroo.tistory.com/117QueryDsl 적용 QueryDsl을 적용하는 방법은 크게 두 가지가 있다.1. QueryDsl plugins 사용 ‘com.ewerk.gradle.plugins.querydsl’ 플러그인을 사용하는 방법으로, 여러 문제가 발생하기에 ‘2. Gradle annotationProcessor’ 방법을 사용해야 한다. Gradle 버전 4.6 이전과 이후일 때 적용 방법이 다르고, 2018년 이후 플러그인이 더이상 업데이트 되지 않고 있으며, Q Domain을 IntelliJ가 자동으로 인식하지 못하여 프로젝트에서 수동으로 Q Domain 경로를 지정해야 하는 번거로움이 있다. 해당 에러는 프로젝트 빌드할 때 중간에 멈추게 만들어 devtools를 통한 auto 빌드에 큰 불폄함을 초래한다. 하지만 에러 해결 방법을 찾지 못했다.출처: https://www.inflearn.com/questions/235302. Gradle annotationProcessor 사용 기존 QueryDsl plugins 사용으로 발생하는 불편함과 에러를 해결하기 위한 방법을 찾던 도중 Gradle annotationProcessor로 QueryDsl을 사용하는 방법을 적용하였다. 해당 방법은 Gradle build 에러도 발생하지 않고 Q Domain 경로를 자동으로 인식하므로, 해당 방법을 사용해야 한다.출처: http://honeymon.io/tech/2020/07/09/gradle-annotation-processor-with-querydsl.html의존성 관리 Querydsl 의존성과 Q Domain를 생성하는 annotationProcessor를 추가한다.&amp;lt;build.gradle&amp;gt;project(&quot;:module-domain-core&quot;) { dependencies { compile project(&quot;:module-system-common&quot;) implementation(&quot;com.querydsl:querydsl-core&quot;) implementation(&quot;com.querydsl:querydsl-jpa&quot;) }}...def queryDslProjects = [project(&quot;:module-domain-core&quot;)]configure(queryDslProjects) { dependencies { annotationProcessor(&quot;com.querydsl:querydsl-apt:${dependencyManagement.importedProperties[&quot;querydsl.version&quot;]}:jpa&quot;) // querydsl JPAAnnotationProcessor 사용 지정 annotationProcessor(&quot;jakarta.persistence:jakarta.persistence-api&quot;) // java.lang.NoClassDefFoundError(javax.annotation.Entity) 발생 대응 annotationProcessor(&quot;jakarta.annotation:jakarta.annotation-api&quot;) // java.lang.NoClassDefFoundError (javax.annotation.Generated) 발생 대응 } // clean 태스크 실행시 QClass 삭제 clean { delete file(&quot;src/main/generated&quot;) // intelliJ Annotation processor Q Domain 생성 위치 }} Gradle build를 수행하면 다음 이미지와 같이 프로젝트에서 Q Domain을 자동으로 생성하고, Q Domain 경로를 자동으로 인식한다. 다음은 Gradle build 할 때 Q Domain을 자동으로 생성한 코드다.출처: http://honeymon.io/tech/2020/07/09/gradle-annotation-processor-with-querydsl.htmlConfig QueryDsl을 프로젝트 내에서 사용할 수 있도록 필요한 부분을 설정한다.&amp;lt;module-domain-core/kr/ac/univ/common/config/QueryDslConfig&amp;gt;package kr.ac.univ.common.config;import com.querydsl.jpa.impl.JPAQueryFactory;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import javax.persistence.EntityManager;import javax.persistence.PersistenceContext;@Configurationpublic class QueryDslConfig { @PersistenceContext private EntityManager entityManager; @Bean public JPAQueryFactory jpaQueryFactory() { return new JPAQueryFactory(entityManager); }}Repository QueryDsl를 사용하여 다음과 같은 쿼리를 작성하였다. findByTitle: 제목으로 게시글을 검색한다.(테스트 용도로 구현) updateViewCountById: 게시글 조회수를 1 증가시킨다.&amp;lt;module-domain-core/kr/ac/univ/noticeBoard/repository/NoticeBoardRepositoryImpl&amp;gt;package kr.ac.univ.noticeBoard.repository;import com.querydsl.jpa.impl.JPAQueryFactory;import kr.ac.univ.noticeBoard.domain.NoticeBoard;import kr.ac.univ.noticeBoard.domain.QNoticeBoard;import org.springframework.data.jpa.repository.support.QuerydslRepositorySupport;import org.springframework.stereotype.Repository;import javax.transaction.Transactional;import java.util.List;import static kr.ac.univ.event.domain.QNoticeBoard.noticeBoard;@Repository@Transactionalpublic class NoticeBoardRepositoryImpl extends QuerydslRepositorySupport { private final JPAQueryFactory queryFactory; public NoticeBoardRepositoryImpl(JPAQueryFactory queryFactory ) { super(NoticeBoard.class); this.queryFactory = queryFactory; } public List&amp;lt;NoticeBoard&amp;gt; findByTitle(String title) { /* * SELECT * * FROM notice_board * WHERE title = &#39;title&#39; */ return queryFactory .selectFrom(noticeBoard) .where(noticeBoard.title.eq(title)) .fetch(); } public long updateViewCountById(Long idx) { /* * UPDATE notice_board * SET view_count = view_count + 1 * WHERE id = &#39;id&#39;; */ return queryFactory .update(noticeBoard) .set(noticeBoard.viewCount, noticeBoard.viewCount.add(1)) .where(noticeBoard.idx.eq(idx)) .execute(); }}JUnit Test 200개의 데이터를 등록한 다음, QueryDsl 작성한 findByTitle과 updateViewCountById 쿼리가 정상적으로 동작하는지 테스트 하였다.&amp;lt;module-app-web/src/test/java/kr/ac/univ/QueryDslTest&amp;gt;package kr.ac.univ;import kr.ac.univ.common.domain.enums.ActiveStatus;import kr.ac.univ.noticeBoard.domain.NoticeBoard;import kr.ac.univ.noticeBoard.repository.NoticeBoardRepository;import kr.ac.univ.noticeBoard.repository.NoticeBoardRepositoryImpl;import lombok.extern.slf4j.Slf4j;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.EnableAutoConfiguration;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit.jupiter.SpringExtension;import java.util.List;import java.util.Optional;import java.util.stream.IntStream;import static org.junit.jupiter.api.Assertions.assertEquals;@Slf4j@SpringBootTest@EnableAutoConfiguration@ExtendWith(SpringExtension.class)public class QueryDslTest { @Autowired NoticeBoardRepository noticeBoardRepository; @Autowired NoticeBoardRepositoryImpl noticeBoardRepositoryImpl; @BeforeEach public void init() { IntStream.rangeClosed(1, 200) .forEach(index -&amp;gt; noticeBoardRepository.save(NoticeBoard.builder() .title(&quot;게시글&quot; + index) .content(&quot;컨텐츠&quot;) .viewCount(0L) .activeStatus(ActiveStatus.ACTIVE) .build())); } @Test @DisplayName(&quot;QueryDsl로 구현한 findByTitle 테스트&quot;) public void Test() { List&amp;lt;NoticeBoard&amp;gt; list = noticeBoardRepositoryImpl.findByTitle(&quot;게시글10&quot;); for (NoticeBoard noticeboard : list) { assertEquals(noticeboard.getTitle(), &quot;게시글10&quot;); } } @Test @DisplayName(&quot;QueryDsl로 구현한 updateViewCountByIdx 테스트&quot;) public void Test2() { // update된 column 개수 반환 Long cnt = noticeBoardRepositoryImpl.updateViewCountById(1L); assertEquals(cnt, 1); } @Test @DisplayName(&quot;JPA findById를 사용한 viewCount 테스트&quot;) public void Test3() { Optional&amp;lt;NoticeBoard&amp;gt; optionalNoticeBoard = noticeBoardRepository.findById(1L); NoticeBoard noticeBoard = null; if (optionalNoticeBoard.isPresent()) { noticeBoard = optionalNoticeBoard.get(); } // idx 1인 column을 조회한다. assertEquals(noticeBoard.getIdx(), 1L); assertEquals(noticeBoard.getViewCount(), 1L); }}Service NoticeBoard의 비즈니스 로직이다. findNoticeBoardByIdx: 게시글을 조회할 때 NoticeBoardReposityImpl의 updateViewCountById 메소드를 호출하여 게시글 조회수를 1 증가시킨다.&amp;lt;module-domain-core/src/main/java/kr/ac/univ/noticeBoard/service/NoticeBoardService&amp;gt;@Servicepublic class NoticeBoardService { private final NoticeBoardRepository noticeBoardRepository; private final NoticeBoardRepositoryImpl noticeBoardRepositoryImpl; public NoticeBoardService(NoticeBoardRepository noticeBoardRepository, NoticeBoardRepositoryImpl noticeBoardRepositoryImpl) { this.noticeBoardRepository = noticeBoardRepository; this.noticeBoardRepositoryImpl = noticeBoardRepositoryImpl; } ... public NoticeBoardDto findNoticeBoardByIdx(Long idx) { noticeBoardRepositoryImpl.updateViewCountById(idx); return NoticeBoardMapper.INSTANCE.toDto(noticeBoardRepository.findById(idx).orElse(new NoticeBoard())); } ...프로젝트 실행 및 결과 다음 이미지와 같이 게시글을 조회하는 경우 조회수가 1 증가하는 것을 확인할 수 있다." }, { "title": "Project Lab 4. 게시판 개발 - 1", "url": "/posts/Project-Lab4/", "categories": "Web, Project Lab", "tags": "", "date": "2020-07-29 00:00:00 +0900", "snippet": " Spring Boot CRUD 게시판 개발 과정을 소개한다. github: https://github.com/scribnote5/lab github commit: https://github.com/scribnote5/lab/commit/f788602d24b6fd1791f3e8ca2d8f379852103f5b프로젝트 설계 및 리펙토링 내용 프로젝트의 기본 프레임(CRUD 게시판, 디자인 등)은 ‘처음 배우는 스프링 부트 2’ 도서를 참고하였다. CRUD 게시판은 프로젝트의 기본이 되는 기능으로 ‘이런 부분에서는 어떻게 하면 코드 가독성과 속도를 향상시킬 수 있을까?’라는 생각을 가지고 다음과 같이 소스 코드를 리펙토링 하였다. ‘처음 배우는 스프링 부트 2’ 도서 자세히 보기: http://www.hanbit.co.kr/store/books/look.php?p_code=B4458049183 프로젝트 구조 및 흐름: https://gmlwjd9405.github.io/2018/12/25/difference-dao-dto-entity.html REST 개념: https://gmlwjd9405.github.io/2018/09/21/rest-and-restful.html영문화 웹 페이지의 기본 언어는 한글 대신 영어를 사용한다.properties 파일을 yml 파일로 변경 yml 파일은 설정 및 기타 정적 값을 키 값 형식으로 관리하므로, properties 파일보다 가독성이 좋다. 따라서 기존 application.properties 파일을 application.yml 파일로 변경하였다.RESTful 도서에서는 RESTful 조건을 지키기 위해서 두 개의 서버로 분리하였다. View를 담당하는 서버와 REST API를 제공하는 서버 총 2개가 동시에 실행된다. 즉, module-app-web(@Controller, view를 담당) 서버와 module-app-api(@RestController, api를 담당) 서버 2개가 동시에 실행된다.JPA 영속성 컨텍스트 에러 도서를 참고 하다가 다음 에러가 발생하였다. 최신 버전의 Spring Boot를 사용하여 발생한 문제로 추측된다.Failed to lazily initialize a collection of role could not initialize proxy – no Session JPA는 매번 데이터베이스에 접근하는 비효율적인 계산을 방지하기 위해 영속성 컨텍스트에 엔티티를 관리한다. findOne은 엔티티의 데이터를 가져오지만, getOne은 엔티티의 참조를 가져온다. JPA는 Lazy Evaluation는 엔티티의 참조가 필요한 경우 해당 트렌젝션에서만 사용되며 프록시(중계 역할)를 반환한다. 기존 소스 코드는 getOne으로 레퍼런스를 가져왔지만, 서로 다른 트랜잭션에서 사용하였기에 위와 같은 에러가 발생한다. 따라서 getOne으로 반환된 레퍼런스가 같은 트랜잭션에서 사용되도록 @Transactional 애노테이션을 Service 계층에서 사용하는 메소드에 명시하였다.@Transactionalpublic Long updateNoticeBoard(Long idx, NoticeBoard noticeBoard) { NoticeBoard persistNoticeBoard = noticeBoardRepository.getOne(idx); persistNoticeBoard.update(noticeBoard); return noticeBoardRepository.save(noticeBoard).getIdx();}출처: https://bebong.tistory.com/entry/JPA-Lazy-Evaluation-LazyInitializationException-could-not-initialize-proxy-%E2%80%93-no-SessionjQuery 지양, Vanilla Javascript 지향 jQuery 사용을 지양하고 Vanilla Javascript 사용을 지향한다. 분명 jQuery는 훌륭하고 웹 개발에 빠질 수 없이 사용되는 라이브러리지만 현재 트렌드와 맞지 않는다. ajax와 Javascript를 대체할 수 없는 경우에만 jQuery를 사용할 것이다.출처: https://marshall-ku.com/web/%EC%99%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8%EC%97%90-vanilla-js%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%96%88%EB%82%98‘read.html’ 페이지 추가 게시글을 읽는 ‘read.html’ 페이지를 생성하였다.HTML id, name, class 속성 구분 HTML id, name, class 속성은 각 목적에 따라 사용이 다르다. 도서에서는 이를 구분하지 않고 id 속성만 사용한다. 서버로 데이터를 전송하는 태그는 id 대신 name 속성을 사용하였다. id 속성은 Element를 구분하는 고유한 식별자로서 태그를 변경하기 위해서 사용된다. name 속성은 form 이벤트 발생 시 서버로 데이터를 전송하기 위한 식별자로 사용된다. 다음 설명하는 serializeObject 함수를 사용하기 위해서는 input 태그의 식별자로 name 속성을 사용해야 한다.출처: https://hashcode.co.kr/questions/7049/id-name-class-%EC%86%8D%EC%84%B1%EC%97%90-%EB%8C%80%ED%95%9C-%EC%82%AC%EC%9A%A9%EB%B2%95%EC%9D%B4-%EA%B6%81%EA%B8%88%ED%95%A9%EB%8B%88%EB%8B%A4serializeObject 라이브러리 사용 ajax 통신을 위한 JSON 객체를 생성할 때 필요한 반복되는 변수 초기화 코드는 작성하기 번거롭고 비효율적이다. 이런 문제점을 해결하기 위해서 form 태그를 사용하는 경우 input tag의 value를 자동으로 JSON으로 변환하는 serializeObject 라이브러리를 사용하였다. form 태그를와 같이 serializeObject 라이브러리를 사용하면, 하단 예제와 같이 반복되는 변수 초기화 소스 코드를 제거할 수 있다. 기존 소스 코드: JSON 객체에 변수 직접 초기화var jsonData = JSON.stringify({ title: $(&#39;#title&#39;).val(), content: $(&#39;#content&#39;).val(), activeStatus: $(&#39;#activeStatus option:selected&#39;).val()}); 변경된 소스 코드: serializeObject를 사용하여 JSON 객체 생성var jsonData = $(&quot;#form&quot;).serializeObject();출처: https://www.leafcats.com/28https://kingbbode.tistory.com/28https://github.com/macek/jQuery-serialize-objectHTML id, name 명명규칙 변경 HTML id와 name의 명명 규칙은 각 회사마다 다르게 정의하였기에 정답이 없다. 네이버에서는 snake case를 사용하고 다음에서는 camel case를 사용하는 것으로 확인하였다. serializeObject 라이브러리를 사용하기 위해서는 자바 멤버 필드명과 자바스크립트 변수명이 같아야 하므로, HTML id와 name 속성 명명규칙으로 camel case을 적용하였다.‘list.html’ 게시글 생성일자로 내림차순 게시글 idx(PK) 순서대로 내림 차순으로 정렬되도록 변경하였다.pageable = PageRequest.of(pageable.getPageNumber() &amp;lt;= 0 ? 0 : pageable.getPageNumber() - 1, pageable.getPageSize(), Sort.Direction.DESC, &quot;idx&quot;);HTML 파일에서 script 및 link 태그 위치 script 및 css 파일은 html에 삽입되는 위치에 따라서 웹 페이지 로딩 속도가 차이가 발생한다. 하단 출처에서 권장하는 것처럼, css 파일은 head 태그 내에 그리고 script 파일은 body 태그 끝에 위치하도록 thymeleaf 레이아웃을 구성하였다.&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&amp;gt;&amp;lt;head&amp;gt; &amp;lt;!-- css --&amp;gt; &amp;lt;th:block th:replace=&quot;layout/css.html&quot;&amp;gt;&amp;lt;/th:block&amp;gt; &amp;lt;title&amp;gt;NoticeBoard Form&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;...&amp;lt;!-- script file --&amp;gt;&amp;lt;th:block th:replace=&quot;layout/script.html&quot;&amp;gt;&amp;lt;/th:block&amp;gt;...&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;출처: https://hahahoho5915.tistory.com/31Thymeleaf 레이아웃 적용 방법 출처: https://eblo.tistory.com/57WYSIWYG editor 적용 오픈 소스 WYSIWYG editor(웹 에디터)인 summernote를 게시판에 사용하였다. 프로젝트 게시판에서는 summernote 기본 기능만 제공하며, 이에 필요한 summernote font 파일, bootstrap.css, bootstrap.js를 추가하였다.&amp;lt;body&amp;gt; ... &amp;lt;td colspan=&quot;2&quot;&amp;gt;&amp;lt;textarea name=&quot;content&quot; id=&quot;summernote&quot; class=&quot;summernote&quot; th:text=&quot;*{content}&quot;&amp;gt;&amp;lt;/textarea&amp;gt;&amp;lt;/td&amp;gt; ...&amp;lt;/body&amp;gt;&amp;lt;!-- javascript --&amp;gt;&amp;lt;script&amp;gt; $(document).ready(function() { &amp;lt;!-- summernote setting --&amp;gt; $(&#39;#summernote&#39;).summernote({ height: 250, // 에디터 높이 minHeight: null, // 최소 높이 maxHeight: null, // 최대 높이 // focus: true, // 에디터 로딩후 포커스를 맞출지 여부 lang: &quot;ko-KR&quot;,// 한글 설정 placeholder: &quot;The editor&#39;s max input size of bytes is 16777215.&quot; //placeholder 설정 }); });&amp;lt;/script&amp;gt;summernote 사용법 및 적용 방법: https://summernote.org/getting-started/https://programmer93.tistory.com/27프로젝트 실행 및 결과 Run -&amp;gt; Edit Configureations… -&amp;gt; module-app-api과 module-app-web 모듈의 Profile을 ‘local’로 변경 후 두 모듈을 동시에 실행한다. 이후 ‘http://localhost:8080/notice-board/list‘에 접속하면 하단 그림과 같이 CRUD 게시판을 확인하였다." }, { "title": "무기체계 소프트웨어의 동적시험 개요", "url": "/posts/Reliability-Test2/", "categories": "SW Test", "tags": "", "date": "2020-07-25 00:00:00 +0900", "snippet": " 본 글은 무기체계 소프트웨어의 동적시험을 소개하는 글이며, ‘방위사업청 매뉴얼 제2020-8호’에 참고하여 작성하였다.동적시험 소프트웨어를 실제 하드웨어(Target)에 탑재한 상태에서 소프트웨어통합시험절차서에 기술된 시험절차에 따라 요구사항기반으로 소프트웨어 코드 실행률(Coverage)을 점검하는 것을 말한다. 동적 시험을 수행함으로서 소스코드의 구조적 결함뿐 아니라 통합된 소프트웨어의 기능적 결함을 함께 검출하고, 요구사항 기반으로 설계된 소프트웨어 통합시험 절차서의 시험 충분성을 검증한다. 소프트웨어를 실제 하드웨어(타겟)에 탑재한 상태에서 수행한다. 타겟에서 테스트를 수행하는 이유는 타겟 환경의 경우 하드웨어에 사양(레지스터리 등)에 의해서 호스트 환경과 다른 결과를 얻을 수 있기 때문이다. 동적시험 커버리지 종류(문장, 분기, MC/DC) 커버리지를 100% 목표로 채워야 하며, 예외사항(방어코드, 협의된 코드 등)은 커버리지에서 제외할 수 있다. 고신뢰 소프트웨어인 항공 시스템의 경우, DO-178과 감항 인증 관점에서 Control Coupling, Data Coupling 문서를 요구할 때 단위 시험만을 통하여 커버리지를 태운다. 동적 시험 끝난 뒤, 동적시험 결과서와 커버리지 미달성 사유서(존재하는 경우)를 작성해야 한다.무기체계 소프트웨어에서 Top-down(하향식) 테스팅 무기체계 소프트웨어에서 동적시험은 Top-down 테스팅으로 수행된다. 가장 상위 수준의 컴포넌트들의 기능 먼저 테스트하는 통합 시험 수행 후 단위 시험을 수행하는 방법이다. 테스트된 컴포넌트는 하위 수준의 컴포넌트를 테스트하는데 사용된다. 가장 하위 레벨의 컴포넌트를 테스트 할 때까지 해당 절차가 반복된다. 무기체계 소프트웨어에서는 요구사항 기반 시험(통합 테스팅)을 통하여 커버리지를 빠르게 확보하고, 부족한 커버리지는 단위시험을 하여 확보하거나 동적시험 미달성 보고서를 작성한다.동적시험 추세 현황 22.07 기준으로 동적시험 추세 현황이다. (모든 동적시험 수행 현황이 아님을 강조 드립니다.) 동적시험은 요구사항 기반 시험으로만 동적 시험을 진행하려고 하는 추세다. 윈도우 GUI 프로젝트들은 과거 C++ MFC 프로젝트 대신 생산성이 좋은 C# 프로젝트로 대체하여 개발하는 사례가 많아지고 있다. 윈도우 환경에서 수행되는 소프트웨어(Visual Studio MFC, C#) 프로젝트들은 윈도우 환경에서 요구사항 기반 시험만을 수행하고, 채우지 못한 커버리지는 동적시험 미달성 보고서를 작성한다. 타겟 환경에 탑재되어 수행되는 대규모 임베디드시스템 소프트웨어 프로젝트들은 타겟 환경에서 요구사항 기반 시험만을 수행하고, 채우지 못한 커버리지는 호스트(윈도우 또는 리눅스) 환경에서 동적시험을 수행한다. 타겟 환경에 탑재되어 수행되는 소규모 임베디드시스템 소프트웨어 프로젝트들은 타겟 환경에서 요구사항 기반 시험 후, 동적시험 미달성 보고서를 작성한다. 타겟에서 수행하는 단위시험은 호스트에서 수행하는 단위시험 보다 2배 많은 공수(타겟에 탐침코드가 삽입된 코드 수행 후 커버리지 불러오기에 많은 시간 소요)가 소요되고 구조기반 시험 환경 설정이 어려우므로(타겟 메모리 환경 고려 필요), 개발자에게 많은 부담이 간다. 단위 시험을 수행하면 동적시험 미달성 보고서를 적게 작성할 수 있지만, 단위 시험 수행에 공수가 많이 소요되므로 상황에 따라 선택해야 한다.동적시험 종류1. 요구사항 기반 시험 소프트웨어 요구사항 명세서에 정의된 요구사항들을 통합된 소프트웨어로 수행한다. 명세의 오류나 기능적 결함을 검출하고 수행하여 측정된 코드 실행률을 점검한다. 요구사항 기반으로 코드 실행률을 점검하는 grey box 테스팅이다. 요구사항 기반 시험만으로는 소스 코드상의 방어코드 및 소스 코드의 확장성 등의 부수적인 문제로 인하여 코드 실행률의 목표값 100%를 달성하기 어렵다. Top-Down(하향식) 방식을 적용하여 요구사항 기반 시험 후 목표값 미충족 부분에 한해 구조기반 시험을 수행 해야한다.출처: http://blog.naver.com/PostView.nhn?blogId=suresofttech&amp;amp;logNo=221250159366&amp;amp;parentCategoryNo=59&amp;amp;categoryNo=109&amp;amp;viewDate=&amp;amp;isShowPopularPosts=false&amp;amp;from=postList 요구사항기반 시험 절차는 다음과 같다. 요구사항 정의서와 같은 기술 문서를 분석하여, 소프트웨어 통합시험 절차서 작성 소프트웨어 통합시험절차서에 기술된 시험절차에 따라 통합 시험 수행(입력 값 생성) 타겟기반으로 테스팅을 수행하여 출력 값 확인 2. 단위 시험(구조 기반 시험) 소스 코드의 내부 구조를 분석하고 변수값을 제어하여 함수의 동작을 확인하는 White-Box 시험으로 소스 코드의 구조적 결함을 검출한다. 요구사항 기반 시험에서 채우지 못한 커버리지는 단위 시험을 통하여 채운다. 목표값 미달시 시험대상 소프트웨어 소스 코드를 수정하거나 또는 필요한 조치를 취한 후 재시험하여 목표값 달성 여부를 확인한다. 방어 코드(Defensive Code), 무한 반복문 등 소프트웨어 신뢰성 시험 도구의 한계로 인하여 목표값을 달성 할 수 없는 경우에는 동적시험 미달성 분석 보고서를 작성해야 한다.방사청 ‘무기체계 SW 메뉴얼 관점’에서의 단위 시험 방사청 무기체계 SW 메뉴얼에서는 요구사항 기반 시험 이후 커버리지가 타지 않는 부분에 대해서 단위 시험 수행을 명시하지 않는다. SW 신뢰성 향상을 위해서, 미달성 보고서 작성을 줄이기 위해서 회사에서는 단위 시험을 수행할 것을 권고한다. 구조기반(단위) 시험 여부는 협의에 따라 다르다. 개발자가 소프트웨어통합시험계획서(STP)를 작성할 때 단위 시험 방향성이 결정된다. 사업 관리 기관에 따라서 단위 시험을 요구하는 경우도 있다. 한화시스템 측에서는 요구사항 기반 시험으로만 동적 시험을 진행하려고 하는 상황이다.동적시험 대상 자동 생성 코드는 동적시험 대상이다. 무한 반복문은 분기문을 벗어날 수 없으므로 커버리지를 태울 수 없다. 신뢰성 시험에서는 디버그 모드에서 값을 변수의 값을 변경하여 커버리지를 태우면 안된다. 요구사항 기반 동적시험 커버리지가 높다는 것은, 예외 처리 및 방어 코드(if 구문만 있고 else 구문이 없음, switch case 문의 default 문 없음)가 없는 것을 의미한다. 이는 프로그램 안전성 소스 코드 형상이 변경된다면(수정이 발생된다면) 정적 시험 및 동적 시험을 다시 수행해야 한다. asm 코드는 동적시험 제외 대상으로 동적시험 미달성 사유서에 작성한다.동적시험 커버리지 종류 커버리지: 소프트웨어 테스트가 충분히 수행되어는가를 나타내는 지표 중 하나로서 말 그대로 테스트를 진행했을 때 코드 자체가 얼마나 실행되었나를 비율로 표현한 것이다.문장(Statement) 커버리지 코드 실행률의 가장 기본적인 수준에 해당되는 것으로 시험대상 소프트웨어 소스 코드내의 문장 중 동적시험간 적어도 한 번 이상 시험된 문장의 비율(%)을 의미한다.분기(Branch) 커버리지 시험대상 소프트웨어 소스 코드내의 분기문 중 동적시험간 참(True), 거짓(False)이 적어도 한 번 이상 시험된 비율(%)을 의미한다.MC/DC(Modified Condition/Decision Coverage) 커버리지 가장 높은 수준의 코드 실행률로써 시험대상 소프트웨어 소스 코드내 분기문에 있는 모든 조건식 중 개별 조건식의 독립적인 변화가 분기문의 참, 거짓에 영향을 미치는 모든 조합에 대해 동적시험간 적어도 한 번 이상 시험된 비율(%)을 의미한다.ex) OR 연산자 기준 설명조건 A가 T로 고정이고 조건 B가 T 또는 F로 변경 된다면, 이는 결과에 영향을 미치지 않는다. 조건 B가 T로 고정이고 조건 A가 T 또는 F로 변경 된다면, 이는 결과에 영향을 미친다. 조건 A가 F로 고정이고 조건 B가 T 또는 F로 변경 된다면, 이는 결과에 영향을 미친다. 조건 B가 F로 고정이고 조건 A가 T 또는 F로 변경 된다면, 이는 결과에 영향을 미치지 않는다. 따라서 조건 A와 조건 B가 T인 경우는 MC/DC 커버리지의 테스트케이스가 될 수 없다.ex) AND 연산자 기준 설명조건 A가 T로 고정이고 조건 B가 T 또는 F로 변경 된다면, 이는 결과에 영향을 미친다.조건 B가 T로 고정이고 조건 A가 T 또는 F로 변경 된다면, 이는 결과에 영향을 미친다. 조건 A가 F로 고정이고 조건 B가 T 또는 F로 변경 된다면, 이는 결과에 영향을 미치지 않는다. 조건 B가 F로 고정이고 조건 A가 T 또는 F로 변경 된다면, 이는 결과에 영향을 미치지 않는다. 따라서 조건 A와 조건 B가 F인 경우는 MC/DC 커버리지의 테스트케이스가 될 수 없다.출처: https://m.blog.naver.com/PostView.nhn?blogId=suresofttech&amp;amp;logNo=220636029506&amp;amp;proxyReferer=https%3A%2F%2Fwww.google.com%2F https://m.blog.naver.com/shiftspace/220561755364함수 호출 커버리지 호출 함수의 수를 전체 실행 가능한 함수의 수로 나누어 백분률로 표현한 것함수 커버리지 실행된 함수의 수를 전체 실행 가능한 함수의 수로 나누어 백분률로 표현한 것시험 기준 설정 방법 결함의 발생빈도, 영향성 및 제어가능성을 평가한 후 수준별로 코드실행률과 시험종류를 설정한다. 체계/사업 특성에 따라 관련 국제 표준(MIL-STD-882E, DO-178, IEC 61508, ISO 26262 등)을 적용하여 개발할 경우에는 해당 표준을 따를 수 있으며, 주체계 운영과 직접적인 관련이 없는 장비(예: 지원장비, CBT(Computer based training) 등)는 동적시험을 제외할 수 있다. 세부 설정 기준 S: 문장(Statement), B: 분기(Branch), M: MC/DC(Modified Condition/Decision Coverage)결함 영향도 (한등급간 차이 10배 수준)결함 발생빈도 (한등급간 차이 10배 수준)결함 제어 가능성 (한등급간 차이 10배 수준)" }, { "title": "Project Lab 3. Gradle Multi Module 프로젝트 구성", "url": "/posts/Project-Lab3/", "categories": "Web, Project Lab", "tags": "", "date": "2020-07-22 00:00:00 +0900", "snippet": " Gradle Multi Module 기반의 프로젝트 구조와 구성 절차를 소개한다.RESTful 시스템을 위한 Gradle Multi Module 프로젝트REST &amp;amp; RESTful REST란, ‘웹에 존재하는 모든 자원(이미지, 동영상, DB 자원)에 고유한 URI를 부여해 활용’하는 것으로, 자원을 정의하고 자원에 대한 주소를 지정하는 방법론을 의미한다. 이런 REST의 형식을 따른 시스템을 RESTful 이라고 부른다. 서버-클라이언트의 역할이 명확하게 분리되면서 하나의 큰 애플리케이션이 여러 개의 작은 애플리케이션으로 분리된다. 이러한 RESTful 시스템을 개발할 때 가장 큰 문제점은 소스 코드의 중복 처리 및 동일성을 보장하는 방법이다. 여러 개의 작은 애플리케이션이 공통으로 가지는 Domain 구조를 동일하게 보장하는 메커니즘이 없다면, 개발자는 공통 Domain을 애플리케이션 마다 소스 코드를 복붙하여 개발하게 된다. 만약 Domain 소스 코드가 계속 변경되는 경우 각 애플리케이션의 Domain 형상관리에 큰 문제점이 발생한다.출처: https://medium.com/@hckcksrl/rest%EB%9E%80-c602c3324196REST 개념: https://gmlwjd9405.github.io/2018/09/21/rest-and-restful.htmlURI와 URL 차이: https://velog.io/@pa324/%EA%B0%9C%EB%B0%9C%EC%83%81%EC%8B%9D-URI-URL-%EC%B0%A8%EC%9D%B4-%EC%A0%95%EB%A6%ACGradle Multi Module 멀티 모듈 프로젝트는 기존의 단일 프로젝트 내에 여러 모듈을 가질 수 있는 구조를 제공한다. 이로 인해서, 개발자는 하나의 프로젝트를 여러 모듈로 분리하여 RESTful 시스템 개발에서 발생하는 소스 코드 중복 처리 및 동일성 문제를 해결할 수 있다. 본 프로젝트는 하단의 우아한형제 기술 블로그를 참고하여 프로젝트의 모듈을 구성하였고, 각 모듈의 역할을 설계하여 그 역할을 따르고자 하였다. 우아한형제 기술 블로그에서 다루는 프로젝트와 다르게 비교적 작은 시스템을 개발하기에, 본 프로젝트 구조를 고려하여 필요한 모듈과 그에 따른 역할을 변경하였으며, 다음과 같이 프로젝트 내 모듈 구조를 가진다.lab: 루트 프로젝트└─ module-system-common 하나의 프로젝트에서 모든 모듈이 사용할 수 있으나, 특별한 경우가 아니면 해당 모듈을 사용하지 않는다. util 클래스(객체 empty 비교, file size 비교)와 같이 공통으로 사용하는 파일이 위치한다.└─ module-domain-core 시스템 핵심 Domian을 다루는 모듈이 위치한다. Domain 클래스, Service 클래스, Repository 클래스, DTO 클래스 파일들이 위치한다.└─ module-web-core Web 애플리케이션의 설정을 다루는 모듈이 위치한다. 해당 모듈은 프로젝트 진행 중 각 역할을 세분화하고 모듈간의 의존성을 낮추기 위해서 20.09.07에 추가하였으며, 이후 모듈의 역할을 구체적으로 정하고 세분화 작업을 수행할 예정이다. Error 클래스, Handler 클래스, Validation 클래스, module-web-core와 module-app-admin이 공통적으로 사용하는 Web Resources(html, css, javascript 등) 파일이 위치한다. Web Resource는 추후 리펙토링 때 분리할 예정이다.└─ module-app-api API 서버를 당담하는 모듈이 위치한다. RestControllr 클래스 파일이 위치한다.└─ module-app-admin 관리자 계층을 다루는 모듈이 위치한다. controller 클래스, Web Resources(html, css, javascript 등) 파일이 위치한다.└─ module-app-web 일반 사용자 계층을 다루는 모듈이 위치한다. Controller 클래스, Web Resources(html, css, javascript 등) 파일이 위치한다.출처: https://woowabros.github.io/study/2019/07/01/multi-module.html의존관계 설정 하단의 우아한형제 기술 블로그에서는 프로젝트 내 모듈들의 의존성을 관리하기 위해서 gradle의 api, implementation 키워드 사용을 권장한다. 프로젝트 내 모듈들은 gradle api, implementation 키워드를 사용하여 의존성을 설정할 예정이다.출처: https://woowabros.github.io/study/2019/07/01/multi-module.htmlGradle api, implementation 키워드 차이 Gradle 버전이 업데이트 되면서 compile 키워드는 deprecated(앞으로 사라지게 됨) 되었다. 대신 이를 대체할 수 있는 api와 implementation을 키워드가 새로 생겨났다. api 키워드는 기존 compile 키워드와 동일하며, 연관된 모든 의존성 라이브러리를 재빌드하고 모든 상위 의존성 라이브러리에 접근할 수 있다. implementation 키워드는 연관된 단일 의존성 라이브러리만 재빌드하고 해당 의존성 라이브러리만 접근할 수 있다. 프로젝트 내 구조를 고려하여, api 키워드 대신 implementation 키워드를 사용하면 프로젝트의 빌드 시간을 감소시킬 수 있다.ex) api: 의존성 라이브러리 수정시 해당 모듈을 의존하고 있는 모듈들 또한 재빌드A(api) &amp;lt;- B &amp;lt;- C 일 때, C에서 A 접근 가능A 수정시 B 와 C 모두 재빌드implementaion: 의존성 라이브러리 수정시 본 모듈까지만 재빌드A(implementation) &amp;lt;- B &amp;lt;- C 일 때, C에서 A 접근 불가A 수정시 B 까지 재빌드출처: https://jongmin92.github.io/2019/05/09/Gradle/gradle-api-vs-implementation/https://sikeeoh.github.io/2017/08/28/implementation-vs-api-android-gradle-plugin-3/IntelliJ에서 Gradle Multi Project 생성 방법IntelliJ Gradle Proejct 생성 먼저 Gradle Project를 생성해야 하며, 방법은 다음과 같다. File -&amp;gt; New -&amp;gt; Project… -&amp;gt; Gradle 선택 -&amp;gt; 프로젝트 정보 입력 후 생성 -&amp;gt; 앞으로 사용하지 않는 src 디렉터리를 삭제Gradle 버전 변경 프로젝트에서 사용하는 gradle의 버전을 최신 버전으로 변경한다.# 프로젝트 경로로 이동한 다음, gradle 버전을 변경$ ./gradlew.bat wrapper --gradle-version 6.5.1# 변경된 gradle 버전 확인$ ./gradlew.bat -v------------------------------------------------------------Gradle 6.5.1------------------------------------------------------------Build time: 2020-06-30 06:32:47 UTCRevision: 66bc713f7169626a7f0134bf452abde51550ea0aKotlin: 1.3.72Groovy: 2.5.11Ant: Apache Ant(TM) version 1.10.7 compiled on September 1 2019JVM: 11.0.7 (Oracle Corporation 11.0.7+8-LTS)OS: Windows 10 10.0 amd64Gradle Multi Module 생성 Project 우클릭 -&amp;gt; New -&amp;gt; Module… -&amp;gt; Gradle 선택 후 모듈 정보를 입력한 다음 모듈을 생성한다. 위와 같은 절차로 하나의 프로젝트 내에서 ‘module-system-common’, ‘module-domain-core’, ‘module-app-api’, ‘module-app-web’, ‘module-app-admin’ 모듈을 생성한다. 다음과 같이 모듈 간의 의존성을 설정한다.&amp;lt;lab/settings.gradle&amp;gt;rootProject.name = &#39;lab&#39;include &#39;module-system-common&#39;include &#39;module-domain-core&#39;include &#39;module-app-api&#39;include &#39;module-app-web&#39;include &#39;module-app-admin&#39; root 프로젝트에서 Spring Boot를 사용하기 위한 필수 의존성 라이브러리를 선언한다.&amp;lt;lab/build.gradle&amp;gt;// 외부 의존성 라이브러리를 클래스 패스에 추가한다.buildscript { ext { // 스프링 부트의 버전을 지정한다. springBootVersion = &#39;2.3.1.RELEASE&#39; } // 의존성 라이브러리를 다운받는 원격 저장소를 지정한다. repositories { mavenCentral() jcenter() } // 프로젝트 개발에 필요한 의존성을 선언한다. dependencies { classpath &quot;org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}&quot; classpath &quot;io.spring.gradle:dependency-management-plugin:1.0.9.RELEASE&quot; }}subprojects { // 자바 플러그인을 설정한다. apply plugin: &#39;java&#39; apply plugin: &#39;eclipse&#39; apply plugin: &#39;org.springframework.boot&#39; apply plugin: &#39;io.spring.dependency-management&#39; apply plugin: &#39;idea&#39; group = &#39;kr.ac.univ&#39; version = &#39;0.0.1-SNAPSHOT&#39; // 자바 버전을 지정한다. sourceCompatibility = 11 repositories { mavenCentral() jcenter() } // 프로젝트 개발에 필요한 공통 의존성 라이브러리를 선언한다. dependencies { }}// 모듈의 의존성 라이브러리를 선언한다.project(&#39;:module-system-common&#39;) { dependencies { }}project(&#39;:module-domain-core&#39;) { dependencies { compile project(&#39;:module-system-common&#39;) }}project(&#39;:module-app-web&#39;) { dependencies { compile project(&#39;:module-system-common&#39;) compile project(&#39;:module-domain-core&#39;) }}project(&#39;:module-app-admin&#39;) { dependencies { compile project(&#39;:module-system-common&#39;) compile project(&#39;:module-domain-core&#39;) }}project(&#39;module-app-api&#39;) { dependencies { compile project(&#39;:module-system-common&#39;) compile project(&#39;:module-domain-core&#39;) }} module-app-* 모듈은 실행 가능한 자바 파일(.jar) 파일이 필요하다. 하지만 실행 가능한 자바 파일(.jar)이 필요없는 모듈의 경우 build.gradle 파일 내용을 삭제한다.&amp;lt;module-domain-core/build.gradle, module-system-common/build.gradle, module-web-core/build.gradle&amp;gt;// 해당 모듈은 실제 실행되는 모듈에 종속되므로, 실행 가능한 자바 파일을 생성하지 않는다.bootJar { enabled = false }jar { enabled = true }출처: https://ahndy84.tistory.com/16https://jojoldu.tistory.com/123https://cheese10yun.github.io/gradle-multi-module/https://www.hanumoka.net/2019/10/04/springBoot-20191004-springboot-gradle-multimodule/http://lyasee.com/articles/2018-09/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%A9%80" }, { "title": "무기체계 소프트웨어의 신뢰성 시험 개요", "url": "/posts/Reliability-Test1/", "categories": "SW Test", "tags": "", "date": "2020-07-20 00:00:00 +0900", "snippet": " 무기체계 소프트웨어의 신뢰성 시험을 소개하는 글이며, ‘방위사업청 매뉴얼 제2020-8호’에 참고하여 작성하였다. 고 신뢰성이 요구되는 무기체계 소프트웨어는 ‘방위사업청 메뉴얼’을 준수하여 개발된다. ‘방위사업청 메뉴얼’은 요구 사항 분석에서의 오류 등에 대한 테스트를 포함한다는 내용을 체계화한 ‘V-모델’ 소프트웨어 개발 프로세스에 기반한다. ‘방위사업청 메뉴얼’은 ‘V-모델’ 소프트웨어 개발 프로세스에 기반하여 ‘신뢰성 시험’ 방법이 작성되어 있다.소프트웨어 신뢰성 시험 신뢰성 시험이란 소프트웨어 코드가 일으킬 수 있는 결함을 사전에 식별하여 제거하기 위한 시험이다. 소프트웨어 신뢰성 시험은 정적시험(코딩규칙 검증, 취약점 점검, 소스코드 메트릭 점검)과 동적시험(코드실행률 점검)으로 구분하여 수행한다.소프트웨어 보안성시험 해킹 등 사이버공격의 원인인 보안약점을 개발단계에서 사전에 제거하기 위해 행정안전부 「소프트웨어 개발보안 가이드」를 적용하여 개발하였는지 확인하는 시험을 말하며 전장관리정보체계를 대상으로 수행한다. 전장관리정보체계에 사용되는 공개SW에 대해서는 보안성 시험을 수행하는 것을 원칙으로 한다.소프트웨어 신뢰성/보안성 시험 확인 소프트웨어의 정적, 동적 시험과 전장관리정보체계 소프트웨어의 보안 취약점 제거를 위한 보안성 시험이 기술적인 정확성과 적절성을 가지고 정해진 요구사항을 충족하는 지를 결정하기 위해 검증을 통해 수집된 자료와 사실에 대해 검토하는 과정을 말한다.소프트웨어 신뢰성 및 보안성 확보 활동 사업관리부서장은 소프트웨어 신뢰성 및 보안성을 확보하기 위해 사업단계별로 다음 각 호와 같이 관리한다.제안요청 단계 사업관리부서장은 제안요청서 작성 시 소프트웨어 신뢰성 및 보안성 확보방안을 제시 하도록 요청한다.개발 준비단계 연구개발 주관기관은 체계개발실행계획서 및 소프트웨어 개발계획서 작성 시 소프트웨어 신뢰성 및 보안성 시험계획을 포함하여 작성한다.소프트웨어 요구사항분석 단계 연구개발 주관기관은 소프트웨어요구사항명세서의 소프트웨어 품질특성 요구사항에 소프트웨어 신뢰성, 보안성 요구사항을 작성한다.소프트웨어 구현단계 연구개발 주관기관은 소프트웨어요구사항명세서의 소프트웨어 품질특성 요구사항에 명시된 신뢰성 및 보안성 등 요구사항에 따라 소프트웨어를 개발하며, 전장관리정보체계는 행정안전부『소프트웨어 개발보안 가이드』에 따라 개발하여야 한다. 연구개발주관기관은 소프트웨어 신뢰성 및 유지보수성 등의 향상을 위하여 부록 7. 소프트웨어 신뢰성/보안성 시험 절차에 정의된 소스코드 메트릭(Code Metrics)를 준수하여 개발해야 한다. 연구개발 주관기관은 소프트웨어통합시험절차서에 소프트웨어의 신뢰성 및 보안성 시험절차를 포함하여 작성한다.소프트웨어 통합 및 시험단계 연구개발주관기관은 부록 7. 소프트웨어 신뢰성/보안성 시험 절차에 따라 소프트웨어 신뢰성 시험(정적, 동적) 및 보안성 시험을 실시하고, 시험결과를 소프트웨어통합시험결과서에 반영한다. 기술지원기관은 소프트웨어 신뢰성 및 보안성 시험을 지원 및 점검하고, 시험결과를 확인한다.개발시험평가 단계 연구개발주관기관, 사업관리부서장, 시험평가과장은 소프트웨어의 신뢰성 및 보안성 시험을 개발시험평가 항목으로 반영한다.운용시험평가 단계 연구개발주관기관은 개발시험평가 단계에서 수행한 신뢰성/보안성 시험 이후 변경된 소프트웨어 대해서는 신뢰성/보안성 시험을 자체적으로 수행하고 그 결과를 사업관리부서에 제출한다.규격화 단계 소스코드 제출시 최종 소스코드에 대한 신뢰성 및 보안성 시험 결과를 동시에 제출한다.양산 단계 형상통제 제안기관(업체 포함)은 수정되는 소프트웨어에 대해 무기체계 개발단계의 소프트웨어 신뢰성 및 보안성 확보 활동 기준에 따라 신뢰성 및 보안성 시험을 실시하고, 그 결과(기술지원기관 검토 필요)를 형상통제 제안자료(형상통제제안서, 제안기관 자체검토서, 수정 후 국방규격 기술자료, 제안내용을 입증할 수 있는 관련자료 등)에 반영하여 형상관리책임기관에 제출한다.소프트웨어 신뢰성시험 대상 소프트웨어 기개발, 상용 소프트웨어는 소프트웨어 상세설계 단계에서 수정없이 재사용이 확정된 경우 시험 대상에서 제외 할 수 있으나 수정을 한 경우는 소명 자료를 제출하고 해당 함수에 대하여 신뢰성시험을 수행해야 한다. 그러나 소명자료 작성이 더 어렵기에, 해당 함수가 아니라 파일 단위로 시함할 것을 권고한다. 범용적으로 사용하는 오픈소스 소프트웨어(ex, 소켓 관련 코드, 이더넷 관련 코드) 코드를 수정하는 경우 신뢰성 시험 대상에 포함된다. 신뢰성시험 대상이 아닌 코드를 신뢰성시험 대상 코드로 변환하면 해당 코드는 신뢰성시험 대상이 아니다. ex) MATLAB으로 작성된 코드를 C언어 코드로 변환하면, 해당 코드는 신뢰성시험 대상이 아님 보고서에 기재된 COTS 리스트와 프로젝트에서 사용하는 라이브러리 리스트를 비교한다. 만약 COTS에 등록되지 않은 라이브러리가 존재하는 경우 경로를 삭제해야 한다.실사 때 신뢰성시험 대상 항목 식별 유의사항 실사 때 보고서에 기재된 COTS 리스트와 프로젝트에서 사용하는 라이브러리 리스트를 비교하는 경우가 있다. 만약 COTS에 등록되지 않은 라이브러리가 존재하는 경우, 사전에 경로를 삭제해야 한다.기개발 코드(재사용 코드, 재활용 코드) 신뢰성 시험 적용 여부 재사용 코드: 기존 사업 코드를 수정하지 않고 사용 -&amp;gt; 신뢰성 시험 대상 X 재활용 코드: 기존 사업 코드를 수정하여 사용 -&amp;gt; 신뢰성 시험 O 재활용 코드 .c, .cpp 파일과 연관된 헤더 파일 수정 -&amp;gt; 신뢰성 시험 대상 X상용 SW 증빙 방법 상용 소프트웨어를 증빙 할 수 있는 방법은 다음과 같다 일반적인 방법: 구매 내역서(소프트웨어 리스트가 존재) 최초로 받은 소프트웨어의 checksum을 증명하는 방법 다운로드 링크를 통해서 소프트웨어를 다운받은 경우(visual studio 등): 다운로드 링크를 첨부하여 사용하고 있는 소프트웨어의 형상이 같은지 증명함 소프트웨어가 국방 상용 제품 등록되어 있는 경우 등록증을 첨부함공개 SW 신뢰성시험 적용 기준 원칙적으로 공개 SW는 신뢰성 시험 대상이지만, 현재 순수 공개 SW 프로젝트는 신뢰성시험을 안하는 추세다. 무기체계 연구개발 시 소스코드 공개 의무가 있는 공개SW를 사용해서는 안된다. 단, 라이선스 구매 및 저작권자와 협의 등을 통해 소스 코드를 공개하지 않아도 되는 것을 증명한 경우에는 사용 가능하다. 공개SW인 운영체제 사용 필요시 운영체제만을 공개대상으로 하는 경우에 한하여 사업관리회의를 통하여 사용 여부를 결정한다. 연구개발 주관기관은 공개SW 사용 시 특허권 등 권리관계의 포함 여부를 사전에 확인하여 지식재산권 분쟁이 발생되지 않도록 관리하여야 한다. SW에 관한 지식재산권과 공개SW 라이선스 의무사항을 준수한다. 상세설계 단계에서 공개SW의 사용 필요성과 신뢰성 확보 여부를 제시하고 사업관리회의에서 신뢰성이 확보된 공개SW로 판단된 경우 신뢰성 시험 대상에서 제외할 수 있다. 그러나 신뢰성이 확보된 공개 SW(ex, 소켓 관련 코드, 이더넷 관련 코드)의 코드를 수정하는 경우 신뢰성시험 대상에 포함된다.. 일부 방산회사에서는 공개 SW를 검사하는 툴을 사용하여 공개 SW 프로젝트임을 증명하고 신뢰성시험에서 제외하고 있다. 신뢰성이 확보되지 않은 공개 SW의 경우 시험 수행 범위를 결정한다. ‘⨂’에 대해서는 상세설계 단계에서 사용하고자 하는 공개SW 적용 사례, 커뮤니티 성숙도를 제시한 경우 이를 종합적으로 판단하여 사업관리회의를 통해 신뢰성 시험 대상에서 제외할 수 있다. ‘◯’는 정적시험 및 동적시험을 수행하고, 동적시험 수행 기준은 [부록 7]의 “제3장 소프트웨어 동적시험 절차”를 따른다. 수정 한 경우에는 해당 함수에 대하여 신뢰성 시험을 수행하여야 한다." }, { "title": "IntelliJ 유용한 설정", "url": "/posts/IntelliJ1/", "categories": "Tool", "tags": "", "date": "2020-07-18 00:00:00 +0900", "snippet": " IntelliJ 설치 할 때 처음 적용하는 설정을 소개한다. 주로 사용하는 설정은 다음과 같다.JDK 선택 File -&amp;gt; Project Structure for New Projects -&amp;gt; Project SDK: Add -&amp;gt; 다운 받은 jdk 선택Spelling 체크 해제 영문 스펠링 체크 기능은 전문용어, 축약어 등을 체크하는 노란색 밑줄 표시를 해제한다. Settings -&amp;gt; Editor -&amp;gt; Inspections -&amp;gt; Spelling 체크 해제대소문자 자동 완성 해제 대소문자를 구분하여 자동 완성하는 경우를 해제한다. Settings -&amp;gt; Editor -&amp;gt; General -&amp;gt; Code Completion -&amp;gt; Match case 체크 해제import 자동 최적화 Settings -&amp;gt; Editor -&amp;gt; General -&amp;gt; Auto Import -&amp;gt; Add unambiguous imports on the fly, Optimize imports on the fly 체크UTF-8 인코딩 설정 Settings -&amp;gt; Editor -&amp;gt; File Encodings -&amp;gt; Global Encoding, Project Encoding, Properties Files 설정을 UTF-8로 변경, Transparent native-toascii conversion 체크자동 정렬되는 문자 수 변경 HTML에서 자동 정렬 단축키를 사용할 때 정렬 기준이되는 문장의 문자 수를 변경한다. Settings -&amp;gt; Editor -&amp;gt; Code Style -&amp;gt; HTML -&amp;gt; Other -&amp;gt; Hard wrap at 240로 변경한다.작업 중인 파일에 따라서 Project 포커싱 현재 선택 한 파일이 프로젝트 explorer에서 대상 파일이 선택되어 navigate 된다.파일 클릭 한 번으로 파일 열기 더블 클릭이 아닌 한 번 클릭으로 파일이 열리도록 한다.module들을 병렬로 compile Settings -&amp;gt; Build, Execution, Deployment -&amp;gt; Compiler -&amp;gt; Compile independent modules in parallel 체크기본 Terminal 변경(cmd -&amp;gt; git bash) Settings -&amp;gt; Tools -&amp;gt; Terminal -&amp;gt; Shell path: “C:\\Program Files\\Git\\bin\\sh.exe” -login -i출처: https://www.jetbrains.com/help/webstorm/2017.1/working-with-embedded-local-terminal.htmlLombok annotation enable 체크 Settings -&amp;gt; Build, Execution, Deployment -&amp;gt; Compliler -&amp;gt; Annotation Processors -&amp;gt; Enable annotation processing 체크기본 Terminal 변경(cmd -&amp;gt; git bash) Settings -&amp;gt; Tools -&amp;gt; Terminal -&amp;gt; Shell path: “C:\\Program Files\\Git\\bin\\sh.exe” -login -iJUnit 으로 작성한 테스트가 gradle로 실행되지 않도록 하기 Settings -&amp;gt; Build, Excutino, Deployment -&amp;gt; Build Tools -&amp;gt; Gradle -&amp;gt; Build and run using, Run tests using를 Intellij IDEA로 변경출처: http://blog.naver.com/PostView.nhn?blogId=varkiry05&amp;amp;logNo=221806279836&amp;amp;categoryNo=107&amp;amp;parentCategoryNo=0&amp;amp;viewDate=&amp;amp;currentPage=1&amp;amp;postListTopCurrentPage=1&amp;amp;from=postViewAuto reload - spring-boot-devtools 적용(소스 코드 자동 반영) 소스 코드 변경시, 애플리케이션 이를 인식하여 자동으로 재시작해주는 기능이다. 개발자는 소스 코드 수정시 수동으로 애플리케이션을 재시작할 필요가 없다. STS에서는 ‘spring-boot-devtools’ 의존성만 추가하면 별도의 설정 필요 없이 애플리케이션이 재시작 되지만, IntellIj에서는 별도로 설정해야 한다.1. ‘spring-boot-devtools’ 의존성 추가 build.gradle에 ‘spring-boot-devtools’ 의존성을 추가해야 한다.&amp;lt;build.gradle&amp;gt;dependencies { ... runtimeOnly &quot;org.springframework.boot:spring-boot-devtools&quot; ...}2. application.yml 설정 추가 application.yml에 다음 설정을 추가한다.&amp;lt;applicatio.yml&amp;gt;spring: devtools: livereload: enabled: true thymeleaf: cache: false3. IntelliJ 설정 Settings -&amp;gt; Build, Execution, Deployment -&amp;gt; Compiler -&amp;gt; Build project automatically 체크 Ctrl + Shfit + A -&amp;gt; Registry 검색 후 클릭 -&amp;gt; compiler.automake.allow.when.app.running 체크 Run -&amp;gt; Edit Configurations -&amp;gt; Spring Boot 프로젝트 선택 -&amp;gt; On ‘Update’ action, On frame deactivation을 ‘Update classes and resources’ 선택4. 크롬 LiveReload 확장 프로그램 3번 까지 진행하면 소스 코드 변경시 5초 내외로, 애플리케이션이 자동으로 실행되어 수정한 소스 코드가 반영된다. 크롬 LiveReload 확장 프로그램은 프론트엔드 소스 코드가 변경될 때, 브라우저가 5초 이내로 이를 인식하고 자동으로 새로고침하는 기능이다. 하단 URI에서 크롬 LiveReload 확장 프로그램을 추가할 수 있다.(FireFox도 해당 확장 프로그램이 존재한다.)URL: https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei LiveReload 확장 프로그램 아이콘은 실행 될 때 뚜렷한 색 변화가 없으므로 유의해야 한다. 해당 아이콘은 LiveReload가 실행 중인 상태다.출처: https://mkyong.com/spring-boot/intellij-idea-spring-boot-template-reload-is-not-working/https://blog.jetbrains.com/idea/2018/04/spring-and-spring-boot-in-intellij-idea-2018-1/https://m.blog.naver.com/spring1a/221757269099PluginsGrep Console 콘솔 창 텍스트 컬러 지정, 필터, 로그 레벨 별 색 지정 등의 기능을 사용할 수 있다.Key Promoter X 인텔리제이의 모든 동작들의 단축키를 실시간으로 보여주며, 단축키를 빠르고 쉽게 배울 수 있다..ignore git이나 Docker등을 이용할때 커밋을 할때 파일을 제외할 수 있다.Request Mapper Spring MVC 기반 프로젝트에서 엔드포인트 URL 기반의 검색 및 바로가기 기능을 제공한다. Shift + Shift 단축키를 활용하면 프로젝트에서 사용하는 경로를 검색하여 이동할 수 있다.Rainbow Brackets 각 괄호 기호의 색을 다르게 주어 가독성을 높인다.SonarLint 자바 정적 시험 도구로 코드 퀄리티를 향상시킬 수 있다." }, { "title": "Project Lab 2. Windows Subsytem for Linux(WSL)에 mariaDB 설치", "url": "/posts/Project-Lab2/", "categories": "Web, Project Lab", "tags": "", "date": "2020-07-15 00:00:00 +0900", "snippet": " Windows Subsytem for Linux(WSL)에 mariaDB 설치 과정을 소개한다. 본 프로젝트에서는 추후 우분투 서버 환경에서 배포할 예정이다. 따라서 mariaDB의 명령어를 공부하고 익숙해지기 위해서, Windows Subsytem for Linux(WSL)에 mariaDB를 설치하였다. Windows Subsytem for Linux(WSL)란 리눅스에서 제공되는 프로그램들을 윈도우 환경에서 사용할 수 있도록 bash 쉘을 지원한다. 이를 통해서 별도의 가상머신 없이 리눅스를 사용할 수 있다. 만약 해당 과정이 번거로운 경우, mariaDB를 윈도우 설치해서 사용해도 상관 없다. 사용자 편의에 따라서 선택하여 설치하면 된다. 22.06.27 기준 WSL과 mariaDB는 서로 호환이 안되는지 mariaDB 서비스가 실행되지 않으며, 여러 해결 방법을 찾아보고 적용하였으나 해결하지 못하였다.Window 10에 우분투 bash 쉘 설치 하단 출처를 참고하여 Window에 우분투 bash 쉘을 설치한다.출처: https://harryp.tistory.com/730mariaDB 설치 ‘Ubuntu’ 앱을 실행한다.$ sudo apt update -y$ sudo apt upgrade -y$ sudo apt install mariadb-server mariadb-client -y# mysql 서비스 시작# 참고로 mysql 서비스를 자동 시작하지 않는 이상, WSL을 실행할 때 마다 수시로 서비스를 시작해야 한다.$ sudo service mysql startmariaDB 보안 설정# mysql 보안 설정$ sudo mysql_secure_installation 하단 그림과 같이 mysql 보안 설정에 필요한 내용에 그림과 같이 입력하면 보안 설정이 완료된다.$ Enter current password for root (enter or none)- OS의 root 계정의 비밀번호를 입력한다. root 권한으로 실행하였기 때문에 엔터키를 입력하여 넘어간다.$ Set root password? [Y/n]- Y: MariaDB의 root 계정의 비밀번호를 설정한다$ Remove anonymous users? [Y/n]- Y: 익명 사용자를 제거한다.$ Disallow root login remotely? [Y/n]- n: 원격 접속을 허용한다.$ Remove test database and access to it? [Y/n]- Y: 테스트 DB를 생성하지 않는다.$ Reload privilege tables now? [Y/n]- Y: 권한 테이블을 reload 하여 지금까지 입력한 내용을 반영한다.mariaDB 새로운 계정을 외부에서 접속하도록 허용하기 mariaDB를 DB 관리 도구인 DBeaver에서 접속 가능하도록 설정한다.# mariaDB root 계정 접속$ sudo mysql -u root -p# 새로운 계정 생성# CREATE USER &#39;&amp;lt;User&amp;gt;&#39;@&#39;%&#39; IDENTIFIED BY &#39;&amp;lt;Password&amp;gt;&#39;;$ CREATE USER &#39;scribnote5&#39;@&#39;%&#39; IDENTIFIED BY &#39;123123123&#39;;# 계정에 모든 권한 부여(모든 외부 IP에서 접근 가능하도록 설정)# GRANT ALL PRIVILEGES ON *.* TO &#39;&amp;lt;User&amp;gt;&#39;@&#39;%&#39; IDENTIFIED BY &#39;&amp;lt;Password&amp;gt;&#39;;$ GRANT ALL PRIVILEGES ON *.* TO &#39;scribnote5&#39;@&#39;%&#39; IDENTIFIED BY &#39;123123123&#39;;# 생성된 계정 조회 후 확인$ SELECT host, user, password FROM mysql.user;# lab DB 생성$ CREATE DATABASE lab;mariaDB 계정 삭제 계정 및 DB 삭제 명령어다.# 계정 삭제$ DROP USER &#39;scribnote5&#39;@&#39;%&#39;;# 생성된 계정 조회 후 확인$ SELECT host, user, password FROM mysql.user;# 테스트 DB 제거$ DROP DATABASE lab;출처: https://jimnong.tistory.com/744https://zetawiki.com/wiki/MySQL_%EC%9B%90%EA%B2%A9_%EC%A0%91%EC%86%8D_%ED%97%88%EC%9A%A9" }, { "title": "Project Lab 1-2. 개발 환경 구축(Eclipse)", "url": "/posts/Project-Lab1-2/", "categories": "Web, Project Lab", "tags": "", "date": "2020-07-15 00:00:00 +0900", "snippet": " 연구실 홈페이지 개발 프로젝트의 이클립스 개발 환경 구축 과정을 소개한다. 인텔리제이 사용하여 개발 환경을 구축 한다면 ‘Project Lab 1-1. 개발 환경 구축(IntelliJ)’’ 게시글을 참고하면 된다.개발 환경 Windows 10 64bit jdk11.0.7 Spring Tools 4 for Eclipse(sts-4.7.0.RELEASE)프로젝트 폴더 관리 Spring 폴더를 생성하여 프로젝트 개발에 필요한 모든 리소스를 한 개의 파일 내에서 관리하고자 한다. 바탕화면에 ‘Spring’ 폴더를 생성하여, 해당 폴더에 리소스를 다운 받는다. 하단 이미지는 프로젝트 개발에 필요한 리소스 집합이다.자바 버전ORACLE JDK 상업용이 아닌 비상업용 개인 사용자는 ORACLE JDK를 버전과 패치 이력에 상관없이 무료로 사용할 수 있다. 즉, 업데이트 지원 종료까지 지속적으로 업데이트를 받을 수 있다. 기존 Oracle JDK 8의 경우 2019년 1월 이후 업데이트부터 라이센스 비용이 요구된다. 하지만 ORACLE JDK를 상업용으로 사용한다면 라이선스 비용이 발생한다. ORACLE은 약 3년 주기로 LTS 서비스를 지원하는 JDK를 출시한다. JDK 11과 같은 LTS JDK는 오라클이 명시한 지원기간까지 지속적으로 지원된다. JDK 11의 경우 Extended Support Until 기간까지 포함하면, 2026년 9월까지 지원된다. 지원기간은 하단 출처에서 확인 가능하다. 하지만 LTS가 지원되지 않는 JDK는 6개월만 지원된다. 22.06.27 JDK LTS 버전은 17이다.출처: https://www.oracle.com/java/technologies/java-se-support-roadmap.html Open JDK 이에 따른, 대안은 Open JDK를 사용하는 것이다. Open JDK는 출시 후 6개월이 지난 경우 업데이트를 지원받기 위해서는 새로운 버전의 JDK로 업그레이드해야 한다는 단점이 있다. 이는 개발자에게는 큰 무리없는 정책이지만, 오랜 기간 안정적인 운영 및 유지보수가 요구되는 사용자 측면에서는 꽤 큰 위험 부담으로 다가올 수 밖에 없다.출처: https://mine-it-record.tistory.com/7 https://goddaehee.tistory.com/183 https://byline.network/2018/11/13-28/ eclipse 재단에서 관리하는 ADOPTIUM Open JDK를 추천하며 하단 출처에서 설치 할 수 있다.출처: https://adoptium.net/JDK 다운로드 본 프로젝트 개발에서는 Oracle JDK 11 버전을 사용할 것이다. 하단 URI에서 설치 파일을 다운로드 받는다.Link: https://www.oracle.com/java/technologies/javase-jdk11-downloads.html JDK 설치 파일을 실행한다. 이 후 ‘Change’ 버튼을 클릭하여 JDK 설치 경로를 변경한다. 필자의 JDK 설치 경로는 프로젝트 개발에 필요한 파일을 정리한 Spring 폴더다. JDK 설치 경로는 ‘C:\\Users&amp;lt;User&amp;gt;\\Desktop\\Spring\\jdk-11.0.7’ 다.자바 환경 변수 등록 자바 환경 변수를 등록해야 한다. 자바 환경 변수 등록 방법은 하단 출처를 참고한다. 하단 그림처럼(그림은 잘못 나와 있음) JAVA_HOME 경로는 ‘C:\\Users&amp;lt;User&amp;gt;\\Desktop\\Spring\\jdk-11.0.7’로 설정한다. 다음으로 시스템 변수 ‘Path’를 편집하여 ‘%JAVA_HOME%\\bin’을 새로 만든 다음, 가장 위로 이동시킨다.Spring Tools 다운로드 하단 URI에서 Spring Tools를 다운 받는다.Link: https://spring.io/toolsSpringToolSuite4.ini 파일 최적화 SpringToolSuite4.ini 파일은 STS의 jdk 경로, JVM 설정 등을 담당한다. 애플리케이션 종류에 따라 JVM 최적화 옵션을 다르게 적용할 수 있다. 여러 블로그를 분석한 결과, 블로그 마다 권장하는 최적화 옵션이 다르다. 애플리케이션이 응답 대기 시간이나 처리량에 민감하지 않다면 Heap 영역만 변경하고 JVM의 기본 설정을 따르는게 좋다. 애플리케이션의 응답 대기시간과 처리량은 서로 trade-off 관계다. 응답 대기시간을 감소시키면 처리량은 떨어지고 응답 대기시간이 길어지면 처리량은 증가한다. 다음과 같이 STS를 설정하였다.&amp;lt;SpringToolSuite4.ini&amp;gt;-startupplugins/org.eclipse.equinox.launcher_1.5.700.v20200207-2156.jar--launcher.libraryplugins/org.eclipse.equinox.launcher.win32.win32.x86_64_1.1.1200.v20200508-1552-productorg.springframework.boot.ide.branding.sts4--launcher.defaultActionopenFile-vmC:\\Users\\scribnote5\\Desktop\\Spring\\jdk-11.0.7\\bin\\javaw.exe-vmargs-Dosgi.requiredJavaVersion=11-Xms2g-Xmx2g-XX:ReservedCodeCacheSize=960m-XX:MetaspaceSize=1024M-XX:MaxMetaspaceSize=1024M-XX:NewSize=1024M-XX:MaxNewSize=1024M-XX:+UseG1GC-XX:MaxGCPauseMillis=200-Xverify:none-XX:+UseStringDeduplication--add-modules=ALL-SYSTEM Eclipse 실행시 적용되는 JDK 경로를 수정한다.-vmC:\\Users\\&amp;lt;User&amp;gt;\\Desktop\\Spring\\jdk-11.0.7\\bin\\javaw.exe Eclipse가 인식하는 JDK 버전을 수정한다. 만약 JDK 버전이 다르면 변경한다.-Dosgi.requiredJavaVersion=11 Heap(일반적인 실행) 영역, Metaspace(클래스, 메타 데이터를 관리) 영역 그리고 NewSize(새로운 객체 생성) 영역의 크기를 늘려 eclipse 실행 속도를 향상시킨다. 참고로 기존 PermGen 영역은 JDK 8부터 Metasapce 영역으로 변경되었다. 일부 블로그에서는 Heap 영역의 최소 크기인 Xms와 최대 크기인 Xmx가 다른 경우가 있는데, 이 두 영역의 크기가 다른 경우 heap 영역을 늘릴 때 지연시간이 발생한다고 한다. 따라서 모든 영역의 기존 크기와 최대 크기를 같게 설정하였다. 해당 영역들의 크기 설정은 RAM 사용량에 따라서 다르게 적용 해야한다. RAM 16GB를 사용하며, 다음과 같이 설정하였다. 만약 사용하는 RAM 크기가 다르거나 더 많은 영역들을 사용하고 싶다면, 크기를 임의로 변경하면 된다.-Xms2048m-Xmx2048m-XX:MetaspaceSize=256M-XX:MaxMetaspaceSize=256M-XX:NewSize=256M-XX:MaxNewSize=256M 클래스 및 플러그인의 유효성 검사를 건너뛴다. 별도의 플러그인 설치가 없는 경우 해당 옵션을 유지한다. 만약 새로운 플러그인을 설치하는 경우 해당 옵션을 설정하여 유효성을 검사하도록 한다.-Xverify:none JVM의 Gabage Collector는 G1(JDK 11 default)으로 설정하였다. G1 Garbage Collector는 전체 처리량 보다 대기 응답 시간을 우선시 한다. Gabage Collect로 인한 최대 대기 시간은 200ms다.-XX:+UseG1GC-XX:MaxGCPauseMillis=200 이외에도, 컴파일러의 소수점 최적화 기능을 담당하는 “XX:+AggressiveOpts” 옵션을 설정 할 수 있다. 해당 옵션을 벤치마크한 글에 따르면, 벤치마크 종류에 따라 성능 변화 폭이 다르게 나타났다. 따라서 해당 옵션은 애플리케이션의 성능을 떨어뜨릴 수 있으므로 설정하지 않는다.출처: https://unordinarydays.tistory.com/137https://dezang.github.io/configuration-of-the-eclipse/https://www.holaxprogramming.com/2017/10/09/java-jvm-performance/https://perfectacle.github.io/2019/05/11/jvm-gc-advanced/https://johngrib.github.io/wiki/jvm-memory/https://blog.voidmainvoid.net/184https://www.opsian.com/blog/aggressive-opts/STS 설치 이후… STS 설치 이후 이클립스 내에서 설정이 필요하다. ‘Eclipse 기본 설정’ 게시글은 필수적으로 사용하는 설정들을 정리 하였기에, 이를 따라서 설정하는 것을 추천한다. 해당 설정들은 여러 블로그를 참고하여 작성하였다. ‘Eclipse 선택 설정’ 게시글은 사용자 취향에 따라서 선택적으로 적용하는 것을 추천한다. ‘Eclipse 단축키’ 게시글은 eclipse에서 많이 사용하는 단축키를 정리하였다. 본격적인 개발 전 많이 사용하는 단축키를 익히면 개발 생산성을 향상할 수 있다." }, { "title": "Project Lab 1-1. 개발 환경 구축(IntelliJ)", "url": "/posts/Project-Lab1-1/", "categories": "Web, Project Lab", "tags": "", "date": "2020-07-15 00:00:00 +0900", "snippet": " 연구실 홈페이지 개발 프로젝트의 인텔리제이 개발 환경 구축 과정을 소개한다. 이클립스를 사용하여 개발 환경을 구축 한다면 ‘Project Lab 1-1. 개발 환경 구축(IntelliJ)’ 게시글을 참고하면 된다.개발 환경 Windows 10 64bit jdk11.0.7 IntelliJ Ultimate 2021.1프로젝트 폴더 관리 ‘Spring Boot’ 폴더를 생성하여 프로젝트 개발에 필요한 모든 리소스를 한 개의 파일 내에서 관리하고자 한다.자바 버전ORACLE JDK 상업용이 아닌 비상업용 개인 사용자는 ORACLE JDK를 버전과 패치 이력에 상관없이 무료로 사용할 수 있다. 즉, 업데이트 지원 종료까지 지속적으로 업데이트를 받을 수 있다. 기존 Oracle JDK 8의 경우 2019년 1월 이후 업데이트부터 라이센스 비용이 요구된다. 하지만 ORACLE JDK를 상업용으로 사용한다면 라이선스 비용이 발생한다. ORACLE은 약 3년 주기로 LTS 서비스를 지원하는 JDK를 출시한다. JDK 11과 같은 LTS JDK는 오라클이 명시한 지원기간까지 지속적으로 지원된다. JDK 11의 경우 Extended Support Until 기간까지 포함하면, 2026년 9월까지 지원된다. 지원기간은 하단 출처에서 확인 가능하다. 하지만 LTS가 지원되지 않는 JDK는 6개월만 지원된다.출처: https://www.oracle.com/java/technologies/java-se-support-roadmap.html Open JDK 이에 따른, 대안은 Open JDK를 사용하는 것이다. Open JDK는 출시 후 6개월이 지난 경우 업데이트를 지원받기 위해서는 새로운 버전의 JDK로 업그레이드해야 한다는 단점이 있다. 이는 개발자에게는 큰 무리없는 정책이지만, 오랜 기간 안정적인 운영 및 유지보수가 요구되는 사용자 측면에서는 꽤 큰 위험 부담으로 다가올 수 밖에 없다.출처: https://mine-it-record.tistory.com/7 https://goddaehee.tistory.com/183 https://byline.network/2018/11/13-28/ eclipse 재단에서 관리하는 ADOPTIUM Open JDK를 추천하며 하단 출처에서 설치 할 수 있다.출처: https://adoptium.net/JDK 다운로드 본 프로젝트 개발에서는 Oracle JDK 11 - Windows x64 Compressed Archive 버전을 사용할 것이다. 하단 URI에서 설치 파일을 다운로드 받는다. 이 후 ‘Spring boot’ 폴더에 압축을 해제한다.Link: https://www.oracle.com/java/technologies/javase-jdk11-downloads.html자바 환경 변수 등록 자바 환경 변수를 등록해야 한다. 자바 환경 변수 등록 방법은 하단 출처를 참고한다. 하단 그림처럼 JAVA_HOME 경로는 ‘C:\\Users&amp;lt;User&amp;gt;\\Desktop\\Spring Boot\\jdk-11.0.7’로 설정한다. 다음으로 시스템 변수 ‘Path’를 편집하여 ‘%JAVA_HOME%\\bin’을 새로 만든 다음, 가장 위로 이동시킨다.IntelliJ 다운로드 하단 URI에서 IntelliJ를 다운받은 후 설치한다.Link: https://www.jetbrains.com/ko-kr/idea/download/#section=windowsIntelliJ 최적화: Edit Custom VM Options IntelliJ 실행 -&amp;gt; Help -&amp;gt; Edit Custom VM Options 해당 옵션은 IntelliJ의 JVM 설정을 담당한다. 애플리케이션 종류에 따라 JVM 최적화 옵션을 다르게 적용할 수 있다. 여러 블로그를 분석한 결과, 블로그 마다 권장하는 최적화 옵션이 다르다. 애플리케이션이 응답 대기 시간이나 처리량에 민감하지 않다면 Heap 영역만 변경하고 JVM의 기본 설정을 따르는게 좋다. 애플리케이션의 응답 대기시간과 처리량은 서로 trade-off 관계다. 응답 대기시간을 감소시키면 처리량은 떨어지고 응답 대기시간이 길어지면 처리량은 증가한다. Heap(일반적인 실행) 영역, Metaspace(클래스, 메타 데이터를 관리) 영역 그리고 NewSize(새로운 객체 생성) 영역의 크기를 늘려 eclipse 실행 속도를 향상시킨다. 참고로 기존 PermGen 영역은 JDK 8부터 Metasapce 영역으로 변경되었다. 해당 영역들의 크기 설정은 RAM 사용량에 따라서 다르게 적용 해야한다. RAM 16GB를 사용하며, 다음과 같이 설정하였다. 만약 사용하는 RAM 크기가 다르거나 더 많은 영역들을 사용하고 싶다면, 크기를 임의로 변경하면 된다. JVM의 Gabage Collector는 G1(JDK 11 default)으로 설정하였다. G1 Garbage Collector는 전체 처리량 보다 대기 응답 시간을 우선시 한다. Gabage Collect로 인한 최대 대기 시간은 200ms다.-Xms2g-Xmx2g-XX:ReservedCodeCacheSize=960m-XX:MetaspaceSize=1024M-XX:MaxMetaspaceSize=1024M-XX:NewSize=1024M-XX:MaxNewSize=1024M-XX:+UseG1GC-XX:MaxGCPauseMillis=200-XX:SoftRefLRUPolicyMSPerMB=50-XX:CICompilerCount=2-XX:+HeapDumpOnOutOfMemoryError-XX:-OmitStackTraceInFastThrow-ea-Dsun.io.useCanonCaches=false-Djdk.http.auth.tunneling.disabledSchemes=&quot;&quot;-Djdk.attach.allowAttachSelf=true-Djdk.module.illegalAccess.silent=true-Dkotlinx.coroutines.debug=off-Dfile.encoding=UTF-8출처: https://johngrib.github.io/wiki/jvm-memory/#gc-%EC%84%A0%ED%83%9D-%EA%B0%80%EC%9D%B4%EB%93%9C%EB%9D%BC%EC%9D%B8-%EC%9A%94%EC%95%BDhttps://blog.ddoong2.com/2019/07/29/IntelliJ-IDEA-%EC%98%B5%EC%85%98/#오류 해결: Command line is too long. Shorten command line for… 실행 명령어가 길어지는 다음과 같은 오류가 발생하므로, 설정 파일에 옵션을 추가한다. 프로젝트 경로 -&amp;gt; .idea -&amp;gt; workspace.xml -&amp;gt; 속성 내부에 &#39;&#39;를 추가한다. Spring Boot Application(내장 톰켓) IPv6 대신 IPv4 사용하기 내장 톰켓은 IPv6 주소 체계를 사용하므로, 우리가 많이 사용하는 IPv4로 변경하려면 다음과 같이 설정하면 된다. Run/Debug Configurations 항목에서 ‘-Djava.net.preferIPv4Stack=true’ 옵션 추가IntelliJ 설치 이후… ‘IntelliJ 유용한 설정’은 IntelliJ를 유용하게 사용하는 설정들을 정리하였다. 해당 설정들은 여러 블로그를 참고하여 작성하였다. IntelliJ 기본 설정은 ‘IntelliJ 유용한 설정’ 게시글을 참고하면 된다." }, { "title": "소스코드 메트릭(Code Metrics) 개요", "url": "/posts/Code-Metrics1/", "categories": "Code Metrics, SW Test", "tags": "", "date": "2020-07-15 00:00:00 +0900", "snippet": " 소프트웨어 품질 향상을 위한 소스코드 메트릭(Code Metrics)를 소개한다. 소프트웨어의 복잡도 감소, 유지보수 용이성 증대 등 소프트웨어 품질향상을 위한 소스 코드의 품질 측정지표다. 다음 메트릭들은 방위사업청에서 배포한 ‘방위사업청 매뉴얼 제2020-8호 부록(무기체계 소프트웨어 개발 및 관리 매뉴얼)’에서 지정한 메트릭 기준표다. 소스코드 메트릭은 절차지향 언어(C)를 기준으로 설정되어 있으므로, 객체지향 언어(C#, Java 등)에 적용하기 어렵기에 이를 사전에 협의하여 완화하는 사례가 있다.Cyclomatic Complexity 의미: 함수 내 분기문의 개수 계산 방법: 함수 내 분기문의 개수 + 1 해결 방법: 복잡한 모듈 안의 속성, 함수들을 다른 모듈로 분리함으로서 복잡도를 하락시킨다.ex) 다음 예제 코드의 ‘Cyclomatic Complexity’는 3이 된다.‘switch 문’ 복잡도 1 + ‘case S_sleep 내의 if 문’ 복잡도 1 + ‘기본 복잡도’ 1 = 3이 된다.#include &amp;lt;stdint.h&amp;gt;void foo(state process_state) { static int sleep_count = 0; switch (process_state) { case S_init: case S_run: case S_sleep: sleep(100); if (sleep_count &amp;gt; 5) { sleep(10); sleep_count = 0; } else { sleep_count++; } default: process_state = S_init; }}Number of Call Levels 의미: 함수 내 조건문의 최대 중첩 깊이 계산 방법: 프로그램을 제어 흐름 그래프로 표현 후 그래프의 높이 해결 방법: 복잡한 분기문의 경우 새로운 함수를 생성하여 분리시킨다.ex) 다음 예제 코드의 ‘Number of Call Levels’는 4가 된다.처음 if문의 중첩 깊이가 4 그리고 다음 if문의 중첩 깊이가 2지만, if문의 최대 중첩 깊이가 4이기 때문이다. ‘Cyclomatic Complexity’는 ‘if문의 개수’ 복잡도 6 + 기본 복잡도 1 = 7이 된다.void foo(void) { if(1) { if(1) { if(1) { if(1) { } } } } if(1) { if(1) { } }}Number of Function Parameters 의미: 함수의 매개변수 개수 계산 방법: 함수 호출 시 사용되는 인자의 개수 해결 방법: 너무 많은 인자를 사용하는 경우 자료구조를 사용하고 사용하지 않는 인자는 삭제한다.ex) 다음 예제 코드의 ‘Number of Function Parameters’는 10이 된다. 사용하는 매개변수의 개수가 많아 지면 자료구조를 사용하여 매개변수 개수를 감소시켜야 한다.void foo(int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10) {}Number of Calling Functions 의미: 함수 외부에서 함수를 호출하는 횟수 계산 방법: 함수 외부에서 해당 함수를 호출한 횟수 해결 방법: 자주 호출되는 함수는 상위 모듈의 코드 일부로 합쳐야 한다.ex) 다음 예제 코드의 ‘Number of Calling Function’은 foo: 3, boo: 2, poo: 1이 된다.void foo(void) {}void boo(void) { foo();}void poo(void){ boo(); foo();}int main(void) { foo(); boo(); poo();}Number of Called Functions 의미: 함수에서 다른 함수를 호출하는 횟수 계산 방법: 함수 내 다른 함수를 호출한 횟수 (같은 함수를 호출하는 경우는 1로 계산) 하위 모듈에서만 사용되는 함수는 하위 모듈의 코드 일부로 합쳐야 한다.ex) 다음 예제 코드의 ‘Number of Called Function’은 main: 3, poo: 2, boo: 1, foo: 0이 된다.poo: 2가 되는 이유는 foo 함수는 여러번 호출하여도 1번 호출한 것으로 계산하기 때문이다.void foo(void) {}void boo(void) { foo();}void poo(void){ boo(); foo(); foo(); foo(); foo();}int main(void) { foo(); boo(); poo();}Number of Executable Code Lines 의미: 함수 내 실행 가능한 코드 라인 수 계산 방법: 중괄호([ ]), 빈 문장( ), 선언문(변수 선언 및 초기화), 레이블을 제외한 세미콜론(;) 또는 조건문(if, 단 else는 제외한다.)로 마치는 코드 라인 수 해결 방법: 함수 내 불필요한 코드를 삭제한다.ex) 다음 예제 코드의 ‘Number of Executable Code Lines’는 7이 된다. for 반복문은 세미콜론이 두 개이므로 실행되 코드 라인은 두 개로 계산된다.#include &amp;lt;stdint.h&amp;gt;#define COUNT 0void foo(int n) { int i = 0; int last = n / 2; if (n &amp;lt;= 1) { return 0; } for (i = 2; i &amp;lt;= last; i++) { if ((n % i) == 0) { return 0; } } return 1;} foo 함수 내에서 실행 가능한 라인 수는 다음과 같이 6이다.if (n &amp;lt;= 1)return 0;for (i = 2; i &amp;lt;= last; i++)if ((n % i) == 0)return 0;return 1;출처: https://m.blog.naver.com/PostView.nhn?blogId=suresofttech&amp;amp;logNo=221114801984&amp;amp;proxyReferer=https%3A%2F%2Fwww.google.com%2F방위사업청에서 배포한 ‘부록(무기체계 소프트웨어 개발 및 관리 매뉴얼)’" }, { "title": "CWE(Common Weakness Enumeration) 개요", "url": "/posts/CWE1/", "categories": "CWE, SW Test", "tags": "", "date": "2020-07-03 00:00:00 +0900", "snippet": " 소프트웨어 보안 취약점을 분류한 CWE(Common Weakness Enumeration) 개요를 소개한다. CWE는 다음 URI에서 확인할 수 있다.URI: https://cwe.mitre.org/CWE(Common Weakness Enumeration)란? CWE는 보안에 영향을 미치는 소프트웨어 및 하드웨어의 보안 약점(weaknesses) 유형을 정리한 목록이다. CWE 목록은 약점을 식별하고 이에 대한 설명이 기술되어 있으며, CWE 목록을 준수하면 보안 취약점을 방지할 수 있다. 참고로 하드웨어(산업 제어 시스템과 의료기기, 자동차 및 웨어러블 등) 보안 취약점에 대한 지원은 2020년 부터 시작되었다. 2020.12.10에 발표된 CWE 4.3 버전 기준, 총 916개의 취약점 리스트가 존재한다. (suresoft의 최신 static 버전은 3.2 버전을 지원한다.) 소프트웨어 관련 항목 중 대표적인 프로그래밍 언어인 C, C++, JAVA의 취약점을 다루는 view는 다음과 같다.CWE-658: 총 81개의 C 약점으로 구성된다.CWE-659: 총 85개의 C++ 약점으로 구성된다.CWE-660: 총 75개의 JAVA 약점으로 구성된다.약점(weaknesses)과 취약점(vulnerabilites) 구분 약점(weaknesses)과 취약점(vulnerabilites)은 엄밀히 다른 의미를 가진다. 약점(weaknesses) ‘공격에 활용될 여지가 있는 오류’를 의미한다. 소프트웨어 개발에서 발생하는 결함, 버그, 취약점 또는 기타 오류가 해결되지 않은 상태로 두면 시스템 및 네트워크가 공격으로부터 취약해질 수 있다. 취약점(vulnerabilites)은 ‘실제로 공격 구현이 가능한 구체적인 오류’를 의미한다. 이론상 존재하는 위험 요소는 약점(weaknesses)이며, 실제적으로 공격이 가능한 것을 취약점(vulnerabilites)이라고 한다. 소프트웨어 약점(weaknesses)은 취약점(vulnerabilites)으로 이어질 수 있다. 즉, 약점은 취약점 보다 더 넓은 의미를 가진다. 예를 들어, CWE-415: Double Free 등은 약점(weaknesses)에 해당 된다. 만약 동일한 메모리 주소를 Double Free 하는 경우 다음과 같은 취약점(vulnerabilites)이 발생할 수 있다. 일부 취약점을 살펴보면 특정 버전 이하의 애플리케이션(OpenSSH, gtk, internet exploer)에서 취약점(시그널 핸들러가 race condition에 빠질 수 있음, 공격자가 임의 코드를 실행할 수 있음)이 발생할 수 있다.출처: https://www.boannews.com/media/view.asp?idx=51129https://cwe.mitre.org/about/index.html" }, { "title": "MISRA C 2012_05_08, 09 외부 및 내부 연결을 가지는 변수와 함수 식별자는 유일해야 한다.", "url": "/posts/MISRA-C-05-08/", "categories": "MISRA C, SW Test", "tags": "", "date": "2020-06-30 00:00:00 +0900", "snippet": " 본 글에서는 MISRA C 2012_05_08, 09 규칙을 소개한다. 외부 및 내부 연결을 가지는 식별자들은 모든 translation unit들에서 유일해야 한다. 외부 연결이 없는 지역 변수는 혼동 위험이 적으므로 유일하지 않아도 된다. 내부 연결을 가지는 식별자들은 연결이 없는 지역 변수 식별자들과도 유일해야 한다.외부 연결: 모든 translation unit에서 식별자를 사용할 수 있다. 일반 전역 변수 일반 전역 상수(C 파일만 가능) 일반 함수내부 연결: 현재 translation unit 내에서만 식별자를 사용할 수 있다. 정적 전역 변수 정적 전역 상수 정적 함수 매크로 인라인 함수출처: http://blog.naver.com/netrance/110141116927 다음은 MISRA_C_2012_05_08 ‘외부 연결을 가지는 변수와 함수 식별자는 유일해야 한다.’ 규칙을 위배하는 예제 코드다.&amp;lt;file1.c&amp;gt;#include &amp;lt;stdint.h&amp;gt;const int32_t COUNT; /* 외부 연결 O */int32_t count; /* 외부 연결 O */void foo(void) /* 외부 연결 O */{ int16_t index; /* 외부 연결 X */}/* file2.c */#include &amp;lt;stdint.h&amp;gt;const int32_t COUNT; /* 외부 연결 O, 다른 파일 내 상수와 충돌함 */static void foo(void) /* 내부 연결 O, 다른 파일 내 함수와 충돌함 */{ int16_t count; /* 외부 연결 X, 다른 파일 내의 변수와 충돌함 */ int32_t index; /* 외부 연결 X */} 다음은 MISRA_C_2012_05_08 ‘외부 연결을 가지는 변수와 함수 식별자는 유일해야 한다.’ 규칙을 위배하지 않는 예제 코드다.&amp;lt;file1.c&amp;gt;#include &amp;lt;stdint.h&amp;gt;const int32_t COUNT; /* 외부 연결 O */int32_t count; /* 외부 연결 O */void foo(void) /* 외부 연결 O */{ int16_t index; /* 외부 연결 X */}/* file2.c */#include &amp;lt;stdint.h&amp;gt;const int32_t COUNT2;static void foo2(void){ int16_t count2; int32_t index;} 내부 연결을 가지는 inline 함수는 하나의 헤더 파일에서 정의해서 여러 translation unit에 include하여 사용하는 것은 허용된다. inline 함수는 외부 연결이 불가능하고 내부 연결 만을 허용한다. 다음은 MISRA_C_2012_05_09 ‘내부 연결을 가지는 변수와 함수 식별자는 유일해야 한다.’ 규칙의 예외사항 예제 코드다.&amp;lt;header.h&amp;gt;inline int add_inline(int a, int b){ return a + b;}/* File: file1.c */#include &amp;lt;stdio.h&amp;gt;#include &quot;header.h&quot;int main() { printf(&quot;add_inline: %d\\n&quot;, add_inline(100, 100)); return 0;} 다음은 MISRA_C_2012_05_09 ‘내부 연결을 가지는 변수와 함수 식별자는 유일해야 한다.’ 규칙을 위배하는 예제 코드다.&amp;lt;file1.c&amp;gt;#include &amp;lt;stdint.h&amp;gt;#define NUM 0 /* 내부 연결 O */static const int32_t COUNT; /* 내부 연결 O */static int32_t count; /* 내부 연결 O */static void foo(void) /* 내부 연결 O */{ int16_t count; /* 내부 연결 X, 파일 내 변수와 충돌함 */ int16_t index; /* 내부 연결 X */}void bar1(void){ static int16_t count; /* 내부 연결 O, 파일 내 변수와 충돌함 */ int16_t index; /* 유일하지 않지만, 연결이 없음 */ foo();}inline void var1(void) /* 내부 연결 O */{ int16_t index; int32_t num;}/* file2.c */#include &amp;lt;stdint.h&amp;gt;#define NUM 0 /* 내부 연결 O, 다른 파일의 변수와 충돌 */static const int32_t COUNT; /* 내부 연결 O, 다른 파일의 상수와 충돌함 */static int8_t count; /* 내부 연결 O, 다른 파일의 변수와 충돌함 */static void foo(void) /* 내부 연결 O, 다른 파일의 함수와 충돌함 */{ int32_t index; /* index와 nbytes 변수들은 유일하지 않지만 연결되지 않음 */ int16_t nbytes;}void bar2(void){ static uint8_t nbytes; /* 유일하지 않지만 같은 파일 내에 연결이 없음 */}inline void var1(void) /* 내부 연결 O, 다른 파일의 변수와 충돌 */{ int16_t index; int32_t num;} 다음은 MISRA_C_2012_05_09 ‘내부 연결을 가지는 변수와 함수 식별자는 유일해야 한다.’ 규칙을 위배하지 않는 예제 코드다.&amp;lt;file1.c&amp;gt;#include &amp;lt;stdint.h&amp;gt;#define NUM 0 /* 내부 연결 O */static const int32_t COUNT; /* 내부 연결 O */static int32_t count; /* 내부 연결 O */static void foo(void) /* 내부 연결 O */{ int16_t count2; /* 내부 연결 X */ int16_t index; /* 내부 연결 X */}void bar1(void){ static int16_t count3; /* 내부 연결 O */ int16_t index; /* 유일하지 않지만, 연결이 없음 */ foo();}inline void var1(void) /* 내부 연결 O */{ int16_t index; int32_t num;}/* file2.c */#include &amp;lt;stdint.h&amp;gt;#define NUM2 0 /* 내부 연결 O */static const int32_t COUNT2; /* 내부 연결 O */static int8_t count4; /* 내부 연결 O */static void foo2(void) /* 내부 연결 O */{ int32_t index; /* index와 nbytes 변수들은 유일하지 않지만 연결되지 않음 */ int16_t nbytes;}void bar2(void){ static uint8_t nbytes; /* 유일하지 않지만 같은 파일 내에 연결이 없음 */}inline void var2(void) /* 내부 연결 O */{ int16_t index; int32_t num;}" }, { "title": "선언(declartion)과 정의(definition)의 차이", "url": "/posts/SW-Test2/", "categories": "SW Test", "tags": "", "date": "2020-06-02 00:00:00 +0900", "snippet": " 본 글에서는 선언과 정의의 차이를 소개한다. 해당 용어들은 코딩 규칙에서 가이드라인에서 자주 언급된다.선언 컴파일러에게 변수의 정보만을 제공하며, 실제 메모리를 사용하지 않는다.// extern 변수 선언extern int a;// 함수 선언int a();// typedef typedef unsigned int UINT;// 매크로 선언#define SUM(a, b) (a + b)// 구조체 선언struct st s ;// 열거형 선언enum DayOfWeek week;정의 컴파일러에게 실제 변수를 생성하도록 하며, 실제 메모리를 사용한다.// 변수 정의int a;// 함수 정의int a(){ return 0;}// 구조체 정의struct st { int x; int y;};// 열거형 정의enum DayOfWeek { Sunday = 0, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday};선언과 정의 한 문장에서 선언과 정의가 가능하다.// static 변수 선언과 정의static int a = 5; // 변수 선언과 정의int a = 5;출처: https://zetawiki.com/wiki/C%EC%96%B8%EC%96%B4_%EC%84%A0%EC%96%B8%EA%B3%BC_%EC%A0%95%EC%9D%98_%EC%B0%A8%EC%9D%B4%EC%A0%90 http://www.goldsborough.me/c/c++/linker/2016/03/30/19-34-25-internal_and_external_linkage_in_c++/" }, { "title": "표준에서 정의되지 않은 행동", "url": "/posts/SW-Test1/", "categories": "SW Test", "tags": "", "date": "2020-05-29 00:00:00 +0900", "snippet": " 본 글에서는 표준에서 정의되지 않은 행동인 implementation-defined behavior, unspecified behavior, undefined behavior를 소개한다. 해당 용어들은 코딩 규칙에서 자주 언급된다.표준 문서에서 정의하는 behavior 종류 기본적으로 C언어 컴파일러는 코드에서의observable behavior(예상되는 행동에 따른 결과)를 명확하게 정의한다. ill-formed, ill-formed no diagnostic required 그러나 몇몇 경우에선 표준이 observable behavior를 정의하지 않고 즉, 표준에서 정의되지 않고 컴파일러에 의해 구현된다. Implementation-defined behavior, Unspecified behavior, Undefined behavior 이 중 개발자가 주의해야 하는 behavior는 하단의 ‘표준에서 정의되지 않음’ 항목이다. MISRA C 2012에서는 프로그램 실행 중 발생하는 implementation-defined behavior(Dir 1.1)는 문서화 되어 개발자가 이를 이해하고 있어야 하며, unspecified or undefined behavior(Rule 1.3)가 발생하면 안된다고 명시되어 있다.출처: https://en.cppreference.com/w/cpp/language/ub https://www.secmem.org/blog/2020/01/17/c-c++-and-ub/ ISO/IEC 9899:201x Committee DraftMISRA C 2012 가이드라인과 CWE(Common Weakness Enumeration) C언어에서 발생하는 undefined behavior는 개발자가 프로그램 결과를 예측 할 수 없으며, 이는 CVE(Common Vulnerabilities and Exposures) 취약점을 발생시킨다. CVE 취약점은 undefined behavior 이외에도 컴파일러 최적화 옵션을 통해서도 발생할 수 있다. MISRA C 2012 가이드라인과 CWE(Common Weakness Enumeration) 가이드라인을 모두 준수하면 CVE 취약점을 보완할 수 있다. CWE 가이드라인은 CVE 가이드라인을 모두 포함하고, MISRA C 2012 가이드라인은 CWE 가이드라인을 일부 포함한다.ill-formed 프로그램이 syntax error(문법 오류)나 semantic error(개발자 의도와 다르게 실행되는 오류) 등이 있어 컴파일러가 이에 대한 에러/경고 메시지를 출력하는 경우다. ex) 배열 길이에서 변수 대입int size = 5;int arr[size];ill-formed no diagnostic required ill-formed나 컴파일러가 감지할 수 없는 경우다. 링크 과정에서 에러를 감지할 수 있으며, 실행 시의 행동은 정의되지 않는다. ex) One Definition Rule (ODR) 위배 ODR이란 translation unit에서 함수, 객체, 변수 등의 식별자가 유일해야 하는 규칙이다.출처: http://egloos.zum.com/parkpd/v/3488517Implementation-defined behavior Unspecified behavior where each implementation documents how the choice is made 동작에 대한 결과가 문서화 되어있다. 해당 기능이 컴파일러의 구현 방법에 따라 정의된 행동으로, 컴파일러 마다 다른 동작을 할 수 있다.ex) 우측 쉬프트 연산의 상위 비트 확장 방법, int 자료형의 크기Unspecified behavior use of an unspecified value, or other behavior where this International Standard provides two or more possibilities and imposes no further requirements on which is chosen in any instance 동작에 대한 구현은 제공하지만 문서화 되어있지 않다. 해당 기능이 컴파일러의 구현 방법에 따라 정의된 행동으로, 컴파일러 마다 다른 동작을 할 수는 있지만 일반적으로 예상 가능한 유효 범위 내에서 동작한다.ex) malloc 함수 인자로 0을 주고, 실행할 때 메모리가 얼마나 할당되는가에 대한 명시가 되어 있지 않음. ex) function_call(foo(), bar()); 구현체에 따라 foo() 함수가 먼저 호출 될 수도 bar() 함수가 먼저 호출 될 수 도 있음.Undefined behavior behavior, upon use of a non-portable or erroneous program construct or of erroneous data, for which this International Standard imposes no requirements 표준에서 정의되지 않은 모든 행동이다. 어떤 결과가 나올지 정의되어 있지 않으며, 예상치 못한 행동이 발생할 수 있다. 운이 좋으면 프로그래머가 의도한 방향으로 컴파일 될 수도 있지만, 실행 중 에러를 발생시킬 수 있다. Undefined behavior의 결과는 누구도 예측할 수 없기 때문에 반드시 피해야 한다. ex) 초기화가 안 된 변수의 사용 부호 있는 정수형의 overflow 부호 있는 정수 자료형의 왼쪽/오른쪽 시프트 범위를 벗어난 배열 접근 유효하지 않은 포인터의 역참조Undefined behavior 예제 32비트 int 형의 최대 값인 2,147,483,64을 초과하면 오버플로우가 발생하여, value는 음수가 되고 bar() 함수가 호출된다. 하지만 이는 개발자의 예상이며, 컴파일러는 이를 다르게 해석 할 수 있다.int foo(unsigned char x){ int value = 2147483600; /* assuming 32 bit int */ value += x; if (value &amp;lt; 2147483600) bar(); return value;} 오버플로우가 발생하는 경우, 컴파일러는 코드에 최적화를 다음과 같이 진행할 수 있다. Undefined behavior는 컴파일러가 어떻게 컴파일하는가에 따라서 다르게 행동할 수 있다.int foo(unsigned char x){ int value = 2147483600; /* assuming 32 bit int */ value += x; return value;}출처: https://codeup.tistory.com/25" }, { "title": "MISRA C 2012 가이드라인 표기 방식", "url": "/posts/MISRA-C2/", "categories": "MISRA C, SW Test", "tags": "", "date": "2020-05-22 00:00:00 +0900", "snippet": " MISRA C 2012 가이드라인 표기 방식을 소개한다.가이드라인 표기방식 가이드라인의 표기 방식은 다음과 같다. Ident: 가이드라인의 식별자로서, 처음오는 숫자는 큰 주제마다 변경된다. Requirement text: 가이드라인의 내용 Source ref: 가이드라인이 참고하는 다른 표준 문서 Category: 가이드라인의 중요성 Decidability: 가이드라인의 결정성 Scope: 가이드라인의 범위 Cxx: C언어 표준 버전(C90, C99)       Ident                   Requirement text                       [Source ref]         Category         Category           Analysis         Decidability, Scope           Applies to         Cxx       Guideline Classification 가이드라인에 대한 설명의 수준에 따라, ‘rule(규칙)’과 ‘directive(지침)’으로 분류된다. ‘설명의 수준’이란 해당 가이드라인에 대하여 얼마나 상세하고 자세하게 설명되어 있는가를 의미한다.Directive(지침) 코드가 directive 가이드라인을 준수하는지 검증할 때, 검증에 필요한 설명이 충분히 제공되지 않는다. 해당 검증 과정에서는 설계 문서 또는 요구사항 명세서와 같은 부가적인 정보가 필요하기 때문이다. 정적 분석 도구마다 directive 가이드라인을 다르게 해석할 수 있으므로 주의해야 한다.Rule(규칙) 코드가 rule 가이드라인을 준수하는지 검증할 때, 검증에 필요한 설명을 상세하고 자세하게 제공한다. 해당 검증 과정에서는 코드 이외의 부가적인 정보(문서)가 필요 없다.Guideline Category 가이드라인이 준수해야하는 중요성에 따라 ‘mandatory’, ‘required’, ‘advisory’의 category로 분류된다.Mandatory guidelines Mandatory category는 필수적으로 준수해야 규칙으로, 예외를 허용하지 않는다.Required guidelines Required category는 필수적으로 준수해야 하는 규칙, 정당한 사유가 있으면 예외를 허용한다.Advisory guidelines Advisory guidelines는 준수하는 것을 권고하는 규칙으로, 선택적으로 적용한다.Deviation(예외) 특정 경우에 따라서 예외적으로 MISRAC C 2012 가이드라인을 위배할 수 있다. 이러한 deviation은 코드나 파일로 문서화하여 기록해야 한다. 가이드라인을 위배하는 경우 소프트웨어의 안전성에 부정적인 영향을 주지 않는다는 근거와 이에 대한 자세한 설명이 문서에 명시되어야 한다. Deviation에 대한 자세한 설명 및 작성방법은 ‘MISRA Compliance:2016’에 기술되어 있다. ex) Deviation 예제 - 입출력 메모리에 매핑된 I/O 포트에 접근하기 위한 일반적인 방법은 고정된 메모리 주소에 접근하는 것이다. 하지만 이는 정수형 자료형을 포인터로 변환하는 작업을 수행하므로, MISRA C 2012 가이드라인을 위배하게 된다.#define PORT (*(volatile unsigned char *)0x0002)PORT = 0x10u;Decidability of rule 어떠한 경우에도 ‘가이드라인 점검 결과를 보장할 수 있는가?’, ‘가이드라인 결과를 항상 보장 할 수 있는가?’ 즉, 가이드라인 결과를 항상 신뢰할 수 있는가를 의미한다. Directive(지침)을 제외한 rule(규칙) 가이드라인은 ‘decidability’ , ‘undecidablility’ 로 분류된다.Decidability(결정성) 가이드라인 결과를 항상 보장할 수 있다. 즉, 가이드라인 결과가 항상 ‘예’ 또는’아니오’ 로 나오는 경우다. ex) 매번 실행할 때 마다 가이드라인이 영향을 받지 않는 경우 Rule 11.3: depends on the source pointer and destination pointer types;Undecidability(비결정성) 가이드라인 결과를 항상 보장할 수 없다. 즉, 가이드라인 결과를 ‘예‘ 또는 ‘아니오＇로 보장할 수 없다. 매번 실행할 때마다 시스템 속성이 변경되기 때문에, 가이드라인 결과가 시스템에 의존적으로 변경된다. 이로 인해서, 정적 분석 도구 마다 해당 가이드라인을 검증하는 방식이 다르기에 결과 또한 다를 수 있다. 비결정성 가이드라인의 경우 실제 위배이 아니라 가능성을 보고하는 방식으로 불확실성을 보고할 수 있다.ex) 매번 실행할 때 마다 시스템 속성이 변경되어 가이드라인이 영향을 받는 경우Rule 12.2: depends on the value of the right-hand operand of a shift operator;Scope of Analysis 가이드라인 결과가 영향을 미치는 범위에 따라서 분류된다.Single Translation Unit 위배한 가이드라인이 translation unit 범위 내 즉 전처리된 하나의 C언어 파일에서만 영향을 미치는 경우다.System 위배한 가이드라인이 모든 코드 즉, 시스템 전체 범위에 영향을 미치는 경우다. 해당 가이드라인을 위배하였는가를 검사할 때에는 전체 코드 검증이 필요하다. 따라서 검증에 상당한 시간이 소요된다. ex) extern 함수 f는 다른 translation unit에 의해서 영향을 받게 된다.extern void f ( uint16_t *p );uint16_t y;void g ( void ){ uint16_t x; /* x is not given a value */ f ( &amp;amp;x ); /* f might modify the object pointed to by its parameter */ y = x; /* x may or may not be unset */}" }, { "title": "MISRA C 2012 가이드라인 개요", "url": "/posts/MISRA-C1/", "categories": "MISRA C, SW Test", "tags": "", "date": "2020-05-15 00:00:00 +0900", "snippet": " 안전성과 신뢰성이 요구되는 임베디드시스템에서 사용되는 MISRA C 가이드라인을 소개한다.C언어의 특징 C언어는 가장 많이 사용하고 있는 언어 중 하나로서, C언어 컴파일러는 거의 대부분의 프로세서를 지원하고 있다. C언어 컴파일러는 작은 크기를 가지는 효율적인 기계어로 변환시킨다. 이는 제한된 메모리를 사용하는 임베디드시스템 소프트웨어 개발에 적합하다. 포인터를 통하여 직접 하드웨어 주소에 접근하고 이를 제어할 수 있다. C언어 표준은 언어를 명확하게 정의하지 않았다. C언어 컴파일러 마다 언어 정의를 다르게 정의할 수 있고 같은 소스 코드라도 다른 결과를 출력할 수 있기에, 이를 확인해야 한다. 따라서 개발자의 예상과 다른 의도치 않은 결과를 초래할 수 있으며 이는 결함으로 이어질 수 있다. C언어는 실행 시간을 점검하는 기능이 부족하기에, 예기치 못한 실행 시간 에러가 발생할 수 있다. 일반적으로 산술 예외(0으로 나누기), 오버플로, 포인터 주소의 유효성 또는 잘못된 배열 참조 에러는 개발자가 직접 확인해야 한다.MISRA C란? MISRA(Motor Industry Software Reliability Association) 자동차 산업에서 개발된 C언어 개발 가이드라인이다. 안전성, 보안성, 이식성, 신뢰성이 요구되는 안전 필수 시스템(safety-critical- systems, 자동차, 우주, 항공, 국방, 철도 등) 소프트웨어 개발에서 대표적인 표준 가이드라인으로 사용되고 있다. MISRA C 2012 가이드라인과 MISRA C 2012 - Addendum 1 가이드라인을 통하여 C언어 보안 표준을 모두 검증 할 수 있다. 이는 시큐어 코딩 표준인 C Secure와 CERT C를 MISRA C 2012 가이드라인에 매핑한 MISRA C 2012 Addendum 2, 3에서 확인할 수 있다. MISRA C 2012: 159개 규칙, MISRA C 2012 - Addendum 1: 14개 규칙, MISRA C 2012 - Addendum 2: 2개 규칙 총 175개 규칙을 준수해야 한다.개정 이력 MISRA C 1998 127 rules / 93 required / 34 advisory MISRA C 2004 142 rules / 122 required / 20 advisory MISRA C 2012: 159개 규칙 제공 143 rules/ 16 directives, decidable/undecidable, 10 mandatory /110 required / 39 advisory, single translation unit / system MISRA C 2012 - Addendum 1: 14개 규칙 추가 제공 14 security guidelines, 13 rules / 1 directives, 6 mandatory / 8 required MISRA C 2012 - Addendum 2: 2개 규칙 추가 제공 Coverage of MISRA C 2012 against ISO/IEC TS 17961:2013 ‘C Secure’ MISRA C 2012 - Addendum 3 Coverage of MISRA C 2012 against ‘CERT C’ MISRA Compliance:2016 Define what is meant by MISRA Compliance , Provide clearer guidance on the use of deviations " }, { "title": "Github Page minimal-mistakes 테마 설정", "url": "/posts/Github-Page1/", "categories": "Github Page", "tags": "", "date": "2020-05-05 00:00:00 +0900", "snippet": " Github page jekyll 사용 중 뷰에서 마음에 들지 않은 레이아웃을 변경하고 커스터마이징 한 코드를 설명한다. 본 블로그는 github page의 jekyll 템플릿을 사용하여 개발되었으며, jekyll 템플릿의 minimal-mistakes 테마를 사용하였다. 블로그 생성 및 설정은 https://devinlife.com/howto 페이지를 참고하였다. 해당 페이지는 github page 배포, 댓글 달기, 구글 애널리스틱(통계 및 검색)까지 처음 github page 생성에 필요한 기초 내용을 친절하게 설명하고 있다. 해당 페이지를 따라한다면 1시간 안에 무난하고 웬만한 기본 기능이 들어간 gitub page를 생성할 수 있다.Sidebar Category 리스트 출력하기 처음 github page을 생성하면서 가장 먼저 고려하였던 레이아웃은 그림처럼 sidebar에 category 리스트가 나오는 것이었다. 하지만 기본 설정을 변경하는 것으로 category 리스트가 나오는 기능을 추가할 수 없었다. 기존 category 리스트를 출력하는 파일인 _layouts/categories.html의 코드를 바탕으로 해당 기능을 구현하였다. Category 리스트 링크는 하단의 jekyll 문법 페이지를 참고하였다. 만약 Category가 ‘Sabre Lite’처럼 공백이 포함되어 있다면 URL에서는 이를 ‘Sabre%Lite’로 인식하여, 원하는 category 리스트로 이동이 불가능하다. 이러한 문제를 인식 후 구현하였다.출처: https://jekyllrb.com/docs/liquid/filters/&amp;lt;_includes/sidebar.html&amp;gt; github page는 해당 소스 코드의 jekyll 문법을 인식하여, 일부 소스 코드가 제대로 출력되지 않는다. 따라서 gitgub URI와 이미지 파일로 대체한다. 코드는 하단 댓글로 첨부한다.github page Link: https://github.com/scribnote5/scribnote5.github.io/blob/master/_includes/sidebar.html _includes/sidebar.html 파일에 코드를 추가하면 카테고리 리스트가 성공적으로 나온다. 만약 카테고리 리스트의 개수가 많아진다면 scroll bar가 생겨 sidebar 일부를 가릴 수 있다. 이는 전체적인 뷰의 아름다움?을 해친다고 생각하여, 카테고리 리스트에 scroll bar가 생기지 않도록 코드를 추가하였다.&amp;lt;_includes/sidebar.html&amp;gt;&amp;lt;!-- 새로운 클래스 및 style 태그 추가 --&amp;gt;&amp;lt;div class=&quot;sidebar sticky scrollbar__hide&quot; style=&quot;-ms-overflow-style: none;&quot;&amp;gt;&amp;lt;_sass/minimal-mistakes/_page.scss&amp;gt;&amp;lt;!-- 파일 제일 하단에 추가 --&amp;gt;.scrollbar__hide::-webkit-scrollbar { display:none;}body와 sidebar간의 padding 조절 및 게시 글 공간 늘리기 sidebar와 body(본문 내용)의 여백이 부족하여서, 전체적인 여백의 미?를 해치고 화면에 나오는 게시글의 폭이 너무 적어 scroll bar가 너무 길어지게 되었다. 다음 그림처럼 여백의 미? 느끼기 위해서 sidebar과 body의 좌측 padding 키웠다. minimal-mistakes 테마의 경우 body 공간이 너무 작게 설정되어, 게시글들의 문자열이 길어지는 경우 1줄로 나오는 문자열들이 2줄로 나왔다. 다음 그림처럼 body 공간을 키우기 위해서 body의 우측 padding을 줄였다.&amp;lt;_layouts/single.html&amp;gt;&amp;lt;!-- style 태그 추가하여 padding 조절(좌우 25px 여백 추가) --&amp;gt;&amp;lt;article class=&quot;page&quot; itemscope itemtype=&quot;https://schema.org/CreativeWork&quot; style=&quot;padding: 0px 35px 0px 35px;&quot;&amp;gt;&amp;lt;_layouts/taxonomy.html&amp;gt;&amp;lt;!-- style 태그 추가하여 padding 조절(좌우 25px 여백 추가) --&amp;gt;&amp;lt;div class=&quot;archive&quot; style=&quot;padding: 0px 35px 0px 35px;&quot;&amp;gt;&amp;lt;_layouts/archive.html&amp;gt;&amp;lt;!-- style 태그 추가하여 padding 조절(좌우 25px 여백 추가) --&amp;gt;&amp;lt;div class=&quot;archive&quot; style=&quot;padding: 0px 35px 0px 35px;&quot;&amp;gt;&amp;lt;_layouts/search.html&amp;gt;&amp;lt;!-- style 태그 추가하여 padding 조절(좌우 25px 여백 추가) --&amp;gt;&amp;lt;div class=&quot;archive&quot; style=&quot;padding: 0px 35px 0px 35px;&quot;&amp;gt;&amp;lt;_sass/minimal-mistakes/_page.scss&amp;gt;#main { @include clearfix; margin-left: auto; margin-right: auto; &amp;lt;!-- 주석 처리--&amp;gt; // padding-left: 1em; // padding-right: 1em; -webkit-animation: $intro-transition; animation: $intro-transition; max-width: 100%; -webkit-animation-delay: 0.15s; animation-delay: 0.15s; @include breakpoint($x-large) { max-width: $max-width; }}모바일 모드에서 sidebar의 padding 조절 다음 그림처럼 모바일 모드에서 화면 width와 sidebar의 여백이 부족하여서, 전체적인 여백의 미?를 해치고 있다. 여백의 미? 느끼기 위해서 sidebar에 우측과 좌측 padding 키웠다.&amp;lt;_sass\\minimal-mistakes\\_sidebar.scss&amp;gt;.sidebar { @include clearfix(); @include breakpoint(max-width $large) { /* fix z-index order of follow links */ position: relative; z-index: 10; padding: 0px 15px 0px 15px; -webkit-transform: translate3d(0, 0, 0); transform: translate3d(0, 0, 0); }" }, { "title": "VMWare 사용시 발생하는 오류 해결 방법을 소개", "url": "/posts/VMWare2/", "categories": "Tool", "tags": "", "date": "2020-04-30 00:00:00 +0900", "snippet": " VMWare 사용시 발생하는 오류 해결 방법을 소개한다.설치 환경 Windows 10 64bit VMWare 14 ProWindows 10 가상머신 설치 때 ‘efi network unsuccessful’ 오류 처음 ‘Press any key to boot from CD or DVD’ 메시지 출력할 때 ‘Ctrl + G’ 단축키를 입력한다.출처: https://manishatechnoworld.blogspot.com/2019/01/bypass-unsuccessful-efi-network-start.html네트워크 문제: ‘케이블 분리됨’ 오류 기본 네트워크 셋팅으로 변경한다. 상단 메뉴바 -&amp;gt; Edit -&amp;gt; Virtual Network Editor -&amp;gt; Choose to change settings -&amp;gt; Restore Defaults USB 3.0 인식 오류 좌단 가상 머신 우클릭 -&amp;gt; Settings -&amp;gt; USB Controller -&amp;gt; Connections -&amp;gt; USB compatibillity 변경 -&amp;gt; USB 3.0 인 경우 하단의 추가적인 드라이버 설치 필요 -&amp;gt; 설치 파일을 가상 운영체제로 이동This virtual machine appears to be in use 오류 가상 머신을 강제로 종료할 때 발생하는 오류다. 가상 머신이 설치되어 있는 폴더에 위치하는 *.lck 파일 삭제한다.출처: http://gomcine.tistory.com/entry/VMware-%EC%97%90%EB%9F%AC-%ED%95%B4%EA%B2%B0-This-virtual-machine-appears-to-be-in-useCannot open the configuration file 오류 가상 머신을 이동시 기존 VMWare 버전과 이동 VMWare 버전이 다른 경우 발생하는 오류다. 가상 머신이 설치되어 있는 폴더 -&amp;gt; ~.vmx 파일 열기 -&amp;gt; virtualHW.version을 config.version와 동일하게 변경출처: http://egloos.zum.com/paar13kr/v/5876462" }, { "title": "VMWare 사용시 유용한 설정 소개", "url": "/posts/VMWare1/", "categories": "Tool", "tags": "", "date": "2020-04-26 00:00:00 +0900", "snippet": " VMWare 사용시 사용성 및 편의성을 개선하는 설정을 소개한다.설치 환경 Windows 10 64bit VMWare 14 ProVMware Service 수동시작 윈도우를 부팅하면 VMware 네트워크 서비스가 자동으로 시작된다. 이를 수동으로 변경하고 VMWare 네트워크 서비스 시작 cmd 파일을 수동으로 실행하면 윈도우 부팅 시간을 단축시킬 수 있다. 윈도우 + S(검색) -&amp;gt; 서비스 -&amp;gt; VMware 서비스 검색 후 우클릭 속성 -&amp;gt; 시작 유형 수동으로 변경&amp;lt;VMWare.sh&amp;gt;@echo off:mainclsecho.echo [ VMware 서비스 ON/OFF ]echo.echo 1. VMware 서비스 켜기 [ON]echo.echo 2. VMware 서비스 끄기 [OFF]echo.echo 원하는 작업 번호를 입력한 다음, 엔터(Enter) 키를 눌러주세요.echo 적용이 완료되면 아무 키나 눌러 종료할 수 있습니다.echo.set menu=set /p menu=번호를 입력 후 엔터를 눌러주세요:if &quot;%menu%&quot; == &quot;1&quot; goto makeif &quot;%menu%&quot; == &quot;2&quot; goto deletegoto main:makenet start VMAuthdServicenet start VMnetDHCPnet start &quot;VMware NAT Service&quot;net start VMUSBArbServicepausegoto exit:deletenet stop VMAuthdServicenet stop VMnetDHCPnet stop &quot;VMware NAT Service&quot;net stop VMUSBArbServicepausegoto exit:exitexit출처: https://m.blog.naver.com/PostView.nhn?blogId=uuu181&amp;amp;logNo=220770686559&amp;amp;proxyReferer=https%3A%2F%2Fwww.google.co.kr%2FVMWare Tool 설치 VMWare를 편리하게 사용하고 싶다면 필수적으로 설치 해야한다. 양방향 클립보드, 드래그앤 드랍, 최적화된 화면 해상도 기능들을 제공한다.Ubuntu$ sudo apt-get install open-vm-tools-desktop출처: http://kkn1220.tistory.com/109Windows 10 상단 메뉴바 -&amp;gt; VM -&amp;gt; Install VMware Tools -&amp;gt; VMware 가상 머신(윈도우)에서 인식되며, 이후 설치 진행화면 해상도 설정 VMWare Tool 설치 이후, 최적의 화면 해상도로 변경되지 않는다. 다음 설정을 통하여, 최적의 화면 해상도로 설정할 수 있다. 상단 메뉴바 -&amp;gt; Edit -&amp;gt; Preference -&amp;gt; Display -&amp;gt; Autofit guest -&amp;gt; Stretch guest 상단 메뉴바 -&amp;gt; View -&amp;gt; Autosize -&amp;gt; Autofit Guest게스트에 할당된 디스크 용량 최적화 자세한 내용은 해당 출처를 참고하면 된다.출처: http://lastcard.tistory.com/60Ubuntu, Window 공통사항 상단 메뉴바 -&amp;gt; VM -&amp;gt; Settings -&amp;gt; Hard Disk -&amp;gt; Defragment, Compact 실행Ubuntu$ sudo vmware-toolbox-cmd disk shrink /VMWare 네트워크 구성과 연결 이해출처: https://shinb.tistory.com/20" }, { "title": "Eclipse 단축키", "url": "/posts/Eclipse4/", "categories": "Tool", "tags": "", "date": "2020-04-22 00:00:00 +0900", "snippet": " Eclipse(STS)를 사용할 때 자주 사용하는 단축키를 소개한다.개발 환경 Windows 10 64bit jdk1.8.0_241 Spring Tools 4 for Eclipse주석 현재 줄 주석 : Ctrl + /, Ctrl + Shift +C 블럭 주석 : Ctrl + Shift + / 블럭 주석 해제 : Ctrl + Shift + \\소스 네비게이션 자동 추천 : Ctrl + Space 클래스, 메소드 상세 검색 : Ctrl + 마우스 커서 에러 상세보기 : F2 마지막 편집 위치 이동 : Ctrl + Q 줄 번호 이동 : Ctrl + L 파일 검색 후 열기 : Ctrl + Shift + R 이전/이후 소스 네비게이터 이동: Alt + ←/→ 소스 네비게이터 이동: Ctrl + E 마지막 줄로 이동: Ctrl + Q 변수 및 메소드 선언 이동: Ctl + Shift +G소스 편집 고급 편집 기능(세로 편집 기능) : Alt + Shift + A 현재 줄을 위아래로 복사 : Ctrl + Alt + 위아래 방향키 한 줄 삭제 : Ctrl + D 줄 상하 이동 : Alt + 상하 방향키 자동 줄맞춤 : Ctrl + Shift + F 창 닫기 : Ctrl + W 열린 창 모두 닫기 : Ctrl + Shift + W 대문자 변경 : Ctrl + Shift + X 소문자 변경 : Ctrl + Shift + Y javadoc 생성: Alt + Shift + J소스 검색 문자열 블럭 지정 후 검색 : Ctrl + K 문자열 블럭 지정 후 역검색 : Ctrl + Shift + K 탭에서 검색 및 변경: Ctrl + F 전체 검색: Ctrl + H 클래스 검색: Ctrl + Shift + T 파일 검색 : Ctrl + Shift + R 변수 및 메소드 선언 위치로 이동: F3 Quick Search(입력한 텍스트가 포함되는 파일을 빠르게 검색): Ctrl + Alt + Shift + L에디터 변환 작업한 에디터 앞, 뒤로 이동 : Alt + 좌우 방향키 에디터 앞으로 이동 : Ctrl + Shift + F6 에디터 뒤로 이동 : Ctrl + F6 뷰간 이동 : Ctrl + F7 퍼스펙티브간 이동 : Ctrl + F8 에디터 이동 : F12 새로운 뷰 생성: Alt + Shift + W자바 자동 import 선언 : Ctrl + Shift + O JavaBeans 규격 자동 생성 및 서브 클래스 오버라이딩 메소드 자동 생성 : Alt + Shift + S 프로젝트 실행 : Ctrl + F11문장 자동 기능 사용 키워드 sysout + Ctrl + space : System.out.println() try + Ctrl + space : try ~ catch for + Ctrl + space : for while + Ctrl + space : while디버깅 F5 : 다음 라인이 함수 안이면 함수 안으로 진행 F6 : 함수 호출을 지나치고 현재 위치에서 다음 단계로 진행 F7 : 현재 메소드 끝까지 가서 리턴 후 메소드 호출부로 되돌아 감 F8 : 다음 브레이크 포인트까지 진행기타 컴파일 후 프로젝트 실행: Ctrl + F11 단축키 설명 모두 보기 : Ctrl + Shift + L 프로젝트 Properties : Alt + Enter 새 창 만들기 : 상단 메뉴바 -&amp;gt; Window -&amp;gt; New Window 에디터 분리 : 상단 메뉴바 -&amp;gt; Window -&amp;gt; Editor -&amp;gt; 3가지 메뉴 중 선택출처: http://mainia.tistory.com/2259 https://dzone.com/articles/top-30-eclipse-keyboard-shortcuts-for-java-program-1" }, { "title": "Eclipse 기타 사용 팁", "url": "/posts/Eclipse3/", "categories": "Tool", "tags": "", "date": "2020-04-22 00:00:00 +0900", "snippet": " Eclipse(STS)를 사용할 때 가끔씩 필요한 기타 사용 팁을 소개한다.git clone으로 다운받은 프로젝트 import 방법 Gradle 프로젝트 생성한다. 만약 git clone으로 다운받은 프로젝트명과 현재 프로젝트명이 다르다면 부가적인 작업이 필요하다. 생성하는 Gradle 프로젝트명은 ‘Test’다.-&amp;gt; Project -&amp;gt; Alt + Enter -&amp;gt; Import -&amp;gt; File System -&amp;gt; git clone한 프로젝트 폴더 선택 -&amp;gt; ‘Yes TO All’-&amp;gt; 하지만 ‘프로젝트명’과 ‘gradle이 인식하는 프로젝트명’이 다르므로 settings.gradle 파일 수정이 필요하다.&amp;lt;settings.gradle&amp;gt;// 현재 프로젝트 명은 &#39;Test&#39; 이므로 &#39;Test&#39;로 변경해야 한다.rootProject.name = &#39;Test&#39;-&amp;gt; Project -&amp;gt; Gradle -&amp;gt; Refresh Gradle Project를 한다면 프로젝트의 오류가 사라지는 것을 확인할 수 있다.출처: http://bong8nim.com/post/programming/etc/project-%ED%8C%8C%EC%9D%BC-%EC%97%86%EB%8A%94-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EB%A5%BC-import-%ED%95%B4%EC%98%A4%EB%8A%94-%EB%B0%A9%EB%B2%95/프로젝트 실제 파일 경로 컴파일 후 생성되는 .class 파일 및 기타 파일들(이미지, properties 등)의 경로다. Project -&amp;gt; Alt + Enter -&amp;gt; Java Build Path -&amp;gt; Source -&amp;gt; Default output folder하단 메뉴바 새창으로 생성된 경우 복구 방법 드래그하여서 외부 창으로 만든 후 하단 이미지의 빨간색 박스 위치로 드래그한다." }, { "title": "Eclipse 선택 설정", "url": "/posts/Eclipse2/", "categories": "Tool", "tags": "", "date": "2020-04-22 00:00:00 +0900", "snippet": " Eclipse(STS)를 사용할 때 선택적으로 사용하는 설정을 소개한다.개발 환경 Windows 10 64bit jdk1.8.0_241 Spring Tools 4 for EclipseJavascript 및 JQuery 자동 완성 플러그인 설치 Javascript 및 JQuery 자동 완성 플로그인이다. 2016년 11월 이후로 업데이트가 되고 있지 않기에 추천하지 않지만 플러그인은정상적으로 작동한다.출처: https://github.com/thymeleaf/thymeleaf-extras-eclipse-plugin프로젝트 생성 메뉴 변경 Window -&amp;gt; Perspective -&amp;gt; Customize Perspective -&amp;gt; ShortcutsJava, JavaScript 주석 내의 코드 자동 정렬 해제 Windows -&amp;gt; Preference -&amp;gt; Java, JavaScript -&amp;gt; Code Style -&amp;gt; Formatter -&amp;gt; New -&amp;gt; 새로운 사용자 등록 -&amp;gt; Edit -&amp;gt; Comments -&amp;gt; Enable ~ Comment formatting 해제(사용자 설정에 따라서 변경)HTML 자동 정렬되는 코드 폭 기준 설정 Window -&amp;gt; Preperences -&amp;gt; Web -&amp;gt; HTML Files -&amp;gt; Editor -&amp;gt; Line Width : 999 수정, Align final bracket… 체크CSS 자동 정렬되는 코드 폭 기준 설정 Window -&amp;gt; Preperences -&amp;gt; Web -&amp;gt; HTML Files -&amp;gt; Editor -&amp;gt; Line Width : 999 수정XML 자동 정렬되는 코드 폭 기준 설정 Window -&amp;gt; Preference -&amp;gt; XML -&amp;gt; Editor -&amp;gt; Line Width : 999 수정, Align final bracket… 체크‘import ‘패키지’.*’ 로 변경 import 되는 패키지를 상위 패키지로 대신하여 코드 라인을 줄일 수 있다. Window -&amp;gt; Preference -&amp;gt; Java -&amp;gt; Code Style -&amp;gt; Organize imports -&amp;gt; Number of imports needed for., Number of static imports needed for. 99 -&amp;gt; 1로 변경같은 변수, 메소드 선택시 색 반전 상단 메뉴바 -&amp;gt; Window -&amp;gt; Preferences -&amp;gt; General -&amp;gt; Editors -&amp;gt; Text Editors -&amp;gt; Annotations 또는 Annotation types -&amp;gt; Occurrences, JavaScript Occurrences 선택 -&amp;gt; Show in -&amp;gt; Text as 체크 -&amp;gt; Highlighted -&amp;gt; Color 선택" }, { "title": "Eclipse 기본 설정", "url": "/posts/Eclipse1/", "categories": "Tool", "tags": "", "date": "2020-04-22 00:00:00 +0900", "snippet": " Eclipse(STS)를 사용할 때 기본적으로 사용하는 설정을 소개한다.개발 환경 Windows 10 64bit jdk1.8.0_241 Spring Tools 4 for EclipseFont 크기 변경 Eclipse 코드 편집기의 font 크기를 11로 변경한다. Windows -&amp;gt; Preference -&amp;gt; General -&amp;gt; Appearance -&amp;gt; Colors and Fonts -&amp;gt; Basic -&amp;gt; Text Font -&amp;gt; 크기 11로 변경Undo history 변경 Ctrl + Z (복구 단축키)가 저장하는 삭제된 코드 크기를 증가시킨다. 대용량의 코드를 삭제할 때 이를 복구하지 못하는 경우를 방지한다. Windows -&amp;gt; Preference -&amp;gt; General -&amp;gt; Editors -&amp;gt; Text Editors -&amp;gt; Undo history size : 20000자동 새로고침 파일을 프로젝트에 업로드 하였지만 eclipse가 자동 새로고침 하지 않아서 파일을 인식하지 못하는 경우를 방지한다. Windows -&amp;gt; Preference -&amp;gt; General -&amp;gt; Workspace -&amp;gt; Refresh using native hooks or pollingWeb Browser 변경 Windows -&amp;gt; Preference -&amp;gt; General -&amp;gt; Web browser -&amp;gt; Use external web browser -&amp;gt; ChormeEncoding 타입 변경 Windows -&amp;gt; Preference -&amp;gt; General -&amp;gt; Workspace -&amp;gt; Text file encoding -&amp;gt; Other -&amp;gt; UTF-8 Window -&amp;gt; Preferences -&amp;gt; General -&amp;gt; Content Types - Java Class File -&amp;gt; Default encoding 에 UTF-8 입력 Window -&amp;gt; Preferences -&amp;gt; General -&amp;gt;Editors -&amp;gt; Text Editors -&amp;gt; Spelling -&amp;gt; Encoding -&amp;gt; UTF-8 Windows -&amp;gt; Preference -&amp;gt; Web -&amp;gt; 각 CSS Files, HTML Files, JSP Files -&amp;gt; Encoding -&amp;gt; UTF8 Windows -&amp;gt; Preference -&amp;gt; XML -&amp;gt; XML Files -&amp;gt; Encoding -&amp;gt; UTF8Console 출력 버퍼 크기 설정 Console이 저장하는 코드 크기를 증가시킨다. 대용량의 코드가 출력될 때 이를 저장하지 못하는 경우를 방지한다. Window -&amp;gt; Preperences -&amp;gt; Run/Debug -&amp;gt; Console -&amp;gt; Limit Console output 의 체크해제 또는 Console buffer size (characters) 늘리기Console 출력 tab width 변경 Windows -&amp;gt; Preference -&amp;gt; Run/Debug -&amp;gt; Console -&amp;gt; Displayed tab width : 4오류, 경고 메시지를 현재 프로젝트 것만 보도록 변경 Problem 탭 -&amp;gt; 이미지의 빨간색 아이콘 클릭 -&amp;gt; Configurations: Errors/Warings on Project, Scope : On elements in selected projects 체크패키지 구조를 계층적으로 보기 Package Exploer -&amp;gt; 이미지의 빨간색 아이콘 클릭 -&amp;gt; Package Presentation -&amp;gt; HierarchicalSearch Page 최적화 Ctrl + H -&amp;gt; Customize… -&amp;gt; 필요없는 Search Page(Git Search, Plug-in Search) 제거Spelling 검사 끄기 Window -&amp;gt; Preferences -&amp;gt; General -&amp;gt; Editors -&amp;gt; Text Editors -&amp;gt; Spelling -&amp;gt; Enable spell checking출처: https://mainia.tistory.com/3755Yaml Editor 플러그인 설치 yml 파일(스프링 부트 설정 파일) 편집에 유용하다. Help -&amp;gt; Eclipse Marketplace -&amp;gt; Yaml Editor 검색 후 설치IndentGuide 플러그인 설치 Eclipse는 기본적으로 가독성을 위해 들여쓰기(indent)를 위한 가이드라인을 제공하지 않는다. IndentGuide 플러그인은 들여쓰기를 위한 실선 가이드라인을 제공하므로 가독성과 개발에 유용하다. Help -&amp;gt; Install New Software -&amp;gt; Work with에 ‘http://www.certiv.net/updates’ 입력 후 설치출처: https://www.certiv.net/updates/Thymeleaf 자동 완성 플러그인 설치 Thymeleaf 자동 완성 플러그인이다. Help -&amp;gt; Install New Software -&amp;gt; Work with에 ‘http://www.thymeleaf.org/eclipse-plugin-update-site/’ 입력 후 설치출처: https://yeahajeong.tistory.com/61기타 플러그인 설치출처: https://snyk.io/blog/10-eclipse-plugins-you-shouldnt-code-without/" }, { "title": "Xenomai 애플리케이션 테스트 - ARM Sabre Lite(NXP)", "url": "/posts/Xenomai2/", "categories": "RTOS, Sabre Lite", "tags": "", "date": "2020-04-21 00:00:00 +0900", "snippet": " Xenomai Cobalt 패치가 반영된 ARM Sabre Lite 리눅스 커널에서 애플리케이션을 테스트한다.설치 환경 ‘리눅스 커널 빌드 - ARM Sabre Lite(Kernel.org)’ 또는 ‘리눅스 커널 빌드 - ARM Sabre Lite(NXP)’ 글을 참고하여 Sabre Lite에 리눅스가 올라가야 한다. 타겟: Sabre Lite에 Linux kernel 4.14.85 Xenomai-3.0.8 ipipe(Cobalt)타겟에 Xenomai 라이브러리 설치 Xenomai 라이브러리는 Cobalt 커널과 Mecury 커널 모두 사용 가능하다. Mecury 커널의 경우는 Xenomai 라이브러리를 사용하여 태스크를 생성하는 경우, 리눅스 커널에서 실행디고 실시간성은 리눅스 커널에 의존한다.$ wget https://xenomai.org/downloads/xenomai/stable/xenomai-3.0.8.tar.bz2$ tar xfvj xenomai-3.0.8.tar.bz2$ cd xenomai-3.0.8$ make distclean# 기본적인 Xenomai 라이브러리 설정 명령어, 자세한 설정은 하단 출처를 참고$ ./configure CFLAGS=&quot;-march=armv7-a -mfpu=vfp3&quot; --with-pic --with-core=cobalt --enable-smp출처: https://gitlab.denx.de/Xenomai/xenomai/wikis/Installing_Xenomai_3# Xenomai 라이브러리 빌드$ sudo make -j4# Xenomai 라이브러리 설치$ sudo make install# root 계정으로 로그인$ su# Xenomai 관련 환경 변수 등록$ echo &#39;### Xenomaiexport XENOMAI_PATH=/usr/xenomaiexport PATH=PATH:XENOMAI_PATH/bin:XENOMAI_PATH/sbinexport LD_LIBRARY_PATH=LD_LIBRARY_PATH:XENOMAI_PATH/lib&#39; &amp;gt;&amp;gt; ~/.xenomai_rcecho &#39;source ~/.xenomai_rc&#39; &amp;gt;&amp;gt; ~/.bashrcsource ~/.bashrc# Xenomai 설치 확인(Xenomai latency 확인)$ sudo /usr/xenomai/bin/latencyXenomai 애플리케이션 테스트 Tab 문자 적용할 때 시스템 내에서 설정된 공란(space) 크기 확인이 필요하다. 해당 애플리케이션은 Xenomai에서 제공하는 자체 RTOS API인 Alchemy다.&amp;lt;Makefile&amp;gt;XENO_CONFIG := /usr/xenomai/bin/xeno-configCFLAGS := (shell (XENO_CONFIG) --alchemy --cflags)LDFLAGS := (shell (XENO_CONFIG) --alchemy --ldflags)CC := (shell (XENO_CONFIG) --cc)EXECUTABLE := startall: (EXECUTABLE)start: start.c (CC) -o @ &amp;lt; (CFLAGS) (LDFLAGS)&amp;lt;start.c&amp;gt;#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;string.h&amp;gt;#include &amp;lt;unistd.h&amp;gt;#include &amp;lt;sys/syscall.h&amp;gt;#include &amp;lt;math.h&amp;gt;#include &amp;lt;sys/mman.h&amp;gt;#include &amp;lt;alchemy/task.h&amp;gt;#include &amp;lt;alchemy/timer.h&amp;gt;#define CLOCK_RES 1e-9 //Clock resolution is 1 ns by default#define LOOP_PERIOD 1e7 //Expressed in ticks//RTIME period = 1000000000;void print_hello(void);void loop_task_proc(void *arg) { RT_TASK *curtask; RT_TASK_INFO curtaskinfo; RTIME tstart, now; int cnt = 0; // Retrieve information from current task curtask = rt_task_self(); rt_task_inquire(curtask, &amp;amp;curtaskinfo); //Print the info printf(&quot;task info \\n&quot;); printf(&quot;curtaskinfo.name: %s\\n&quot;, curtaskinfo.name); printf(&quot;curtaskinfo.pid: %d\\n&quot;, curtaskinfo.pid); printf(&quot;curtaskinfo.prio: %d\\n&quot;, curtaskinfo.prio); //Make the task periodic // current task, release date(current system date), period rt_task_set_periodic(NULL, TM_NOW, LOOP_PERIOD); tstart = rt_timer_read(); //Start the task loop while (1) { printf(&quot;Loop count: %d, Loop time: %.5f ms\\n&quot;, cnt, (rt_timer_read() - tstart) / 1000000.0); cnt++; rt_task_wait_period(NULL); }}int main(int argc, char **argv) { RT_TASK loop_task; //Lock the memory to avoid memory swapping for this program mlockall(MCL_CURRENT | MCL_FUTURE); printf(&quot;Starting cyclic task...\\n&quot;); //Create the real time task rt_task_create(&amp;amp;loop_task, &quot;basicmath_small&quot;, 0, 50, 0); //Since task starts in suspended mode, start task rt_task_start(&amp;amp;loop_task, &amp;amp;loop_task_proc, 0); //Wait for Ctrl-C pause(); return 0;}# 빌드, 쿼드코어 사용$ make -j4# Xenomai 애플리케이션 실행$ sudo ./start" }, { "title": "Xenomai 패치 적용 - ARM Sabre Lite(NXP)", "url": "/posts/Xenomai1/", "categories": "RTOS, Sabre Lite", "tags": "", "date": "2020-04-14 00:00:00 +0900", "snippet": " 리눅스 커널에 Xenmoai 패치를 적용한 다음 빌드하여 ARM Sabre Lite의 리눅스 커널을 변경한다. 본 글은 Xenomai 공식 홈페이지를 참고하여 작성하였다.출처: https://gitlab.denx.de/Xenomai/xenomai/wikis/Start_Here설치 환경 ‘리눅스 커널 빌드 환경 구축’ 글을 참고하여 리눅스 커널 빌드 환경을 사전에 구축해야 한다. ‘리눅스 커널 빌드 - ARM Sabre Lite(Kernel.org)’ 또는 ‘리눅스 커널 빌드 - ARM Sabre Lite(NXP)’ 글을 참고하여 Sabre Lite에 리눅스가 올라가야 한다. 호스트: Ubuntu 18.04 타겟: Sabre Lite에 Linux kernel 4.14.85 Xenomai-3.0.8 ipipe(Cobalt)Xenomai란? Xenomai는 리눅스에 실시간성을 지원하기 위한 개발 프레임워크로서, 리눅스 커널을 패치하여 실시간성을 지원한다. Xenomai는 VxWorks, pSOS 그리고 Alchemy라는 자체 RTOS API를 지원하며, 이를 사용하여 실시간 태스크를 생성할 수 있다. 에뮬레이터를 사용하여 다른 RTOS의 API를 적은 오버헤드로 모방할 수 있다.Xenomai 형태 Xenomai는 Mercury 형태와 Cobalt 형태의 두 개의 커널 옵션을 제공한다.Mercury(Single kernel) 기존 리눅스 커널의 실시간성에 의존하는 형태로 Xenomai 라이브러리를 사용하는 형태다. 커널이 실시간성을 가지기 위해서는 PREEMPT-RT 패치를 적용해야한 다. 즉 실시간성은 PREEMPT-RT 패치에 의존적이다. Xenomai가 제공하는 RTOS API를 사용할 수 있다.Cobalt(Dual kernel) 리눅스와 병행 실행되는 실시간 co-kernel를 사용하여 실시간성을 보완하는 형태다. Cobalt라는 작은 확장 기능이 리눅스 커널 내에 빌드되어 인터럽트, 실시간 태스크 스케줄링과 같은 시간이 매우 중요한 작업을 실행한다. Cobalt 코어는 기존 커널보다 우선순위가 높으며, 실시간 작업을 처리할 때 기존 리눅스 커널의 lock을 공유하지 않기에 mecury 커널 보다 더 좋은 실시간성을 제공한다. Xenomai가 제공하는 RTOS API를 사용해야 실시간 태스크가 생성된다.리눅스 커널 다운로드# 커널 다운로드, .xz 확장자: 뛰어난 압축률$ wget https://kernel.org/pub/linux/kernel/v4.x/linux-4.14.85.tar.xz# 압축 해제$ tar -xvJf linux-4.14.85.tar.xzXenomai 다운로드 Xenomai ipipe(Cobalt) 패치가 지원하는 리눅스 버전하고 일치하는 경우만 ipipe 패치 적용 가능하며, 버전이 일치하지 않는 경우 패치 오류 발생한다. 지원하는 ARM 리눅스 커널 4.* 버전은 하단 출처에서 확인 가능하다.출처: https://xenomai.org/downloads/ipipe/v4.x/arm/# Xenomai 다운로드$ wget https://xenomai.org/downloads/xenomai/stable/xenomai-3.0.8.tar.bz2# 압축 해제$ tar xfvj xenomai-3.0.8.tar.bz2# Xenomai ipipe 패치 파일 다운로드$ wget https://xenomai.org/downloads/ipipe/v4.x/arm/ipipe-core-4.14.85-arm-6.patchXenomai ipipe 패치 적용# --linux=[리눅스 코드 경로], --ipipe=[ipipe 패치 경로]$ ./xenomai-3.0.8/scripts/prepare-kernel.sh --arch=arm --linux=/home/sdy/linux-4.14.85 --ipipe=ipipe-core-4.14.85-arm-6.patch 성공적으로 xenomai 패치가 적용된 경우리눅스 커널 빌드$ cd linux-4.14.85# 컴파일 의존성 삭제(mrproper + remove editor backup and patch files)$ sudo make distclean# 환경 변수 선언$ export KERNEL_SRC=PWD$ export ARCH=arm$ export CROSS_COMPILE=arm-linux-gnueabihf-$ export INSTALL_MOD_PATH=KERNEL_SRC/modules# Sabre Lite 컴파일 옵션 적용$ make imx_v6_v7_defconfig# 커널 컴파일 설정으로 특별히 설정할 항목은 없으며 사용자 필요에 따라 수정$ make menuconfig# 해당 디렉토리에 커널 모듈 설치$ mkdir modules# 커널 컴파일$ make zImage modules dtbs -j4# 커널 모듈 설치$ make modules_install리눅스 커널 부팅에 필요한 파일 정리$ cd modules$ mkdir boot# imx6 관련 rdts, dtb 복사$ cp ../arch/arm/boot/dts/imx6* ./boot# zImage 파일 이동# zImage는 vmlinuz과 같은 파일$ cp ../arch/arm/boot/zImage ./boot/vmlinuz-4.14.85# 링크 파일 생성$ ln -s boot/initrd.img-4.14.85 initrd.img$ ln -sfv boot/vmlinuz-4.14.85 vmlinuz# scp 전송을 위한 파일 압축$ tar -zcvf linux-4.14.85.tar.gz ./*# 생성된 파일 목록 확인$ ls -al# scp으로 타겟에 파일 전송# ex) sudo scp -r /home/sdy/linux-4.14.87-rt49/modules/linux-4.14.87-rt49.tar.gz ubuntu@168.188.127.63:/home$ sudo scp -r /home/&amp;lt;username&amp;gt;/linux-4.14.87-rt49/modules/linux-4.14.87-rt49.tar.gz ubuntu@&amp;lt;ip&amp;gt;:/home타겟에 리눅스 커널 설치# 처음 리눅스 커널 변경할 때 한 번만 실행$ sudo apt-get purge -y linux-boundary-* linux-header-* linux-image-* qcacld-module$ sudo tar --numeric-owner -xf /home/linux-4.14.85.tar.gz -C /$ sudo update-initramfs -c -k4.14.85$ rm /home/linux-4.14.85.tar.gz$ sudo sync &amp;amp;&amp;amp; sudo reboot# 재부팅 후 Xenomai 적용 커널 메시지 확인$ dmesg | grep Xenomai" }, { "title": "Project Lab 0. 연구실 홈페이지 개발 프로젝트 소개", "url": "/posts/Project-Lab0/", "categories": "Web, Project Lab", "tags": "", "date": "2020-04-14 00:00:00 +0900", "snippet": " 연구실 홈페이지 개발 프로젝트를 소개한다.계기 대학원 재학 중일 때 노후화된 연구실 홈페이지 유지보수를 담당하였다. 연구실 홈페이지는 난잡하게 개발되어 있었고 관련 문서가 하나도 없었기에 유지보수에 큰 어려움을 겪었다. 과거 회사 재직 중일 때 Spring을 사용하여 업무 시스템을 개발한 경험이 있다. 당시 초급 개발자로서 요구사항과 기간에 쫓겨 해당 프로젝트를 진행하였다. 프로젝트는 요구사항에 맞게 정상적으로 동작하였으나 비효율적인 구조와 난잡하게 개발됨에 따라, 코드 퀄리티와 유지보수성이 떨어졌다. 이러한 계기들로 Spring을 사용하여 체계적으로 개발하고 싶다는 생각을 가지게 되었으며, 이번 연구실 홈페이지 개발에 도전하게 되었다.기존 홈페이지 기존 PHP로 개발된 홈페이지 화면이다.목표 노후화된 연구실 홈페이지를 Spring boot를 사용하여 새로 개발한다. 가장 최적화되고 효율적인 방법을 찾아서 개발하며, 새로운 기술 스택을 사용한다.(Maven 대신 Gradle 등) 체계적인 프로젝트 구조를 가진 상태에서 개발한다.(패키지 구조, 폴더 구조, 사용하는 의존 라이브러리 등) 기존 연구실 홈페이지의 데이터 마이그레이션을 수행한다. 단, 일부 불가능한 데이터의 경우 마이그레이션에서 제외한다. 새로 개발한 연구실 홈페이지의 서버 운영 및 배포를 수행한다. 현재 명확환 요구사항이 정의되지 않았으며, 기존 홈페이지를 바탕으로 개발하되 연구실 홈페이지 관리자와 지속적으로 소통하면서 이를 반영할 계획이다. 프로젝트 개발 과정을 블로그에 게시한다. 기존과 동일하게 연구실 홈페이지에서 사용하는 언어는 한글이 아닌 영어로 개발한다.프로젝트 기간 예상 기간: 2020.04.14 ~ 2020.12.31 실제 기간: 2020.04.14 ~ 2021.04.01 참고로 해당 프로젝트는 언제 완료될지 보장하지 못한다. 왜냐하면 개인 시간을 투자하여 개발하는 프로젝트이기에, 회사 업무가 바빠지면 시간 투자가 어렵기 때문이다. 2021.04.01 프로젝트 개발과 배포과 완료되었다. 시간이 많이 지연된 이유는 회사 업무, 생각하지 못한 요구사항 구현 그리고 버닝 아웃으로 많은 시간이 소요되었기 때문이다.블로그에 게시되는 글은? 웹페이지를 개발하면서 해결한 문제와 코드를 순차적으로 공유하려고 하였다. 구현된 코드는 버그 및 결함이 발생할 수 있기에, 프로젝트 개발에 따라 코드가 지속적으로 변경 되었다. 따라서 지속적으로 변경되는 코드를 소개하기 어렵다고 느꼈기에, Project Lab 카테고리 게시글에서는 프로젝트 진행 과정을 소개한다. 프로젝트를 개발하면서 얻는 지식, 기능을 구현하고 어려움을 해결하는 과정을 간략하게 소개할 예정이다. 이 중 조금더 깊숙히 다루고자 하는 주제는 별도의 게시글로 작성할 예정이다. 우선 벡엔드를 우선하여 개발한다. 프론트엔드와 디자인 쪽 지식이 많이 부족하기에 해당 부분은 추후 개발할 예정이다.프로젝트의 완성도 1년 남짓 스프링을 사용한 지식만으로 필자의 프로젝트가 높은 완성도를 보장할 수 없다. 또한 현재 업무와 전혀 다른 분야 도전하고 있기에 전문성을 보장할 수 없다. 물론 개인적으로 끊임없이 고민하고 공부하여 부족한 부분을 채울 것이며 이외에도 완성도를 높이기 위해서 다음과 같은 노력을 할 것이다.1. 도서 참고 ‘처음 배우는 스프링 부트 2’ 도서를 참고하여 개발할 것이다. 스프링 부트 게시판 코드를 참고한 도서로서, 프로젝트 개발에 큰 도움이 되었다. 앞으로 다른 도서를 참고한다면 추가하도록 하겠다.자세히 보기: http://www.hanbit.co.kr/store/books/look.php?p_code=B44580491832. 개발자 친구 리뷰 주변에 Spring을 사용하는 개발자 친구들이 몇 명있다. 개발한 코드는 친구들과 리뷰를 진행할 예정이다. 실무자의 의견을 듣고 이를 반영하여 효율적인 방향으로 개발하도록 노력하겠다.마음가짐 필자는 프로젝트 실무자로 투입될 때 프로젝트와 관련된 지식을 모두 깊숙하고 자세히 알아야 하며, 이에 따른 부가적인 지식을 모두 공부해야 한다고 생각하였다. 이러한 생각은 언젠가 부터 공부 습관이 되었다. 회사에서 수석 개발자분의 이야기를 듣고 이러한 습관은 버려야 한다고 생각하였다. 수석 개발자분은 전임 개발자분에게 “해당 기능을 구현하는데 모든 내용을 알아야 할 필요가 있을까? 너가 개발하고 싶은 것은 ㅇㅇ인데, ㅁㅁ만 알아도 된다. 더 깊숙히 공부하기 위해서는 대학원에 진학해야 한다” 라고 말하였다. 완벽히 이해하지 말아라 실무자는 어떻게 사용하는지를 이해하면 된다. 나는 이 조언을 듣고 큰 깨달음을 얻었다. 지식에 호기심을 가지고 깊숙하게 공부하는 습관은 하나의 분야를 철저하게 파고드는 연구 분야에서는 좋은 습관이다. 하지만 시간에 쫓기는 실무자에게는 좋은 습관이 아닌 것 같다. 물론 시간에 여유가 있다면, 이를 공부하는 것은 실무자의 역량을 개발하는데 도움이 되겠지만… 앞으로 지식을 공부할 때 많은 시간을 투자하지 않겠다. 궁금한 지식만을 완벽하게 습득할 수 있도록 공부하겠다. 또한 해당 지식을 빠르게 찾을 수 있도록 책갈피 역할을 하는 키워드까지 공부하겠다. 기능 개발이 완료되면 JUnit으로 단위 테스팅 수행한다. 이후 기능이 정상적으로 수행되는지 검증한 다음, 프로젝트에 적용할 것이다. 코드의 가독성을 위해서 위해서 적절한 위치에 주석을 추가하여 개발할 것이다.개발 환경 및 주요 사용 기술 스택 개발 환경 및 주요 사용 기술 스택은 다음과 같다. 상황에 따라서 추후 변경될 수 있다. Java를 처음 접하였을 때 부터 전자정부프레임워크를 지나 20.06까지 eclipse를 Java IDE로 사용하였다. 하지만 eclipse의 부족한 안정성, 성능 그리고 편의성으로 인하여 Spring boot 개발에 Visual Studio Code를 사용하기로 결심하였다. 현재 IDE로 eclipse를 사용하여 개발하고 이를 기반으로 블로그 게시글을 작성하였지만, 앞으로 eclipse 대신 IntelliJ를 사용할 예정이다. eclipse의 자잘한 버그, 성능 그리고 불편한 편의성에 한계를 느꼈기 때문이다.개발 환경 OS: Windwos 10 Java: Oracle JDK 11.0.8 DB: 10.1.44 MariaDB WAS: 내장 Tomcat IDE: IntelliJ 2020.1.4 또는 Spring Tools 4 for Eclipse(sts-4.7.0.RELEASE)벡엔드 백엔드 프레임워크: Spring boot 2.3.2 ORM: Spring Data JPA 동적 쿼리: QueryDSL 의존성 관리: Gradle 6.5.1프론트엔드 Bootstrap 4.5.1 jquery 3.5.1 템플릿 엔진: Thymeleaf 3.0.11 WYSIWYG editor: Summerntoe -&amp;gt; CKeditor 5로 변경참고한 템플릿 Vesperr: https://bootstrapmade.com/vesperr-free-bootstrap-template/ Simple Sidebar: https://startbootstrap.com/template/simple-sidebar Login Form: https://www.bootstrapdash.com/product/free-bootstrap-login/#product-demo-section" }, { "title": "Web Server &amp; Web Application Server", "url": "/posts/Web-Server1/", "categories": "Web", "tags": "", "date": "2020-03-28 00:00:00 +0900", "snippet": " Web Server와 Web Application Server(WAS)의 차이점을 소개한다.Web Server 클라이언트의 요청을 받은 정적인 데이터(웹 페이지, 이미지)를 HTTP 프로토콜을 통해 전송한다. 클라이언트의 요청 중 자체적으로 처리할 수 없는 동적인 데이터 처리에 대해서는 WAS에 요청한다. Web Server에서는 정적인 데이터를 처리하고 WAS에서는 동적인 데이터를 처리하는 방식으로 양분하여 처리하는 방식을 사용한다. 이를 통하여, 각 서버에서 처리하는 부하를 줄여줄 수 있다.ex) Apach, IIS, NginxWAS(Web Application Server) 클라이언트 요청을 받은 동적인 데이터(Web Server가 처리할 수 없는 데이터)를 처리하여 Web Server에 정적인 정보를 제공한다. 일반적으로 WAS는 Web Server 기능을 내제하고 있기에, Web Server 없이 서비스가 가능하다.ex) Web Logic, Jeus, Tomcat, JBossWeb Containner Servlet, JSP를 실행할 수 있는 소프트웨어다. Web Server에서 동적 데이터인 처리 요청이 들어오면 JSP 파일은 Servlet으로 변환한다. 이후 Servlet을 컴파일하여 실행한 결과를 Web Server에 전달한다.WAS의 데이터 처리 방식 Web Server로 부터 동적 데이터 처리 요청이 들어오면 Web Container가 이를 수신한다. Web Container는 web.xml를 참조하여 해당 Servlet를 처리하기 위한 스레드를 생성하고 요청(httpServletRequest) 및 응답(httpServeletResponse) 객체를 생성하여 스레드에 전달한다. Web Container는 Servlet을 호출한다. 호출된 Servlet의 작업을 담당하는 스레드(미리 생성되어 있는 상태)는 HTTP 프로토콜 타입에 따라 doPost() 또는 doGet() 메소드를 호출한다. 호출된 doPost() 또는 doGet() 메소드는 동적 페이지를 생성한 다음 Response객체에 담아서 web container에 전달한다. Web Container는 전달받은 Response객체를 HTTPResponse 형태로 전환하여 Web Server에 전달하고 생성된 스레드와 요청 및 응답 객체를 제거한다.출처: https://galid1.tistory.com/486" }, { "title": "Putty 사용시 유용한 설정 소개", "url": "/posts/Putty1/", "categories": "Tool", "tags": "", "date": "2020-03-07 00:00:00 +0900", "snippet": " Putty 사용시 사용성 및 편의성을 개선하는 설정을 소개한다.Putty 출력 화면 설정 변경 Putty 기존 설정 화면은 눈이 쉽게 피로해지고 가독성이 좋지 않다. 폰트 크기를 키우고 putty에서 출력하는 빨간색과 파란색을 가독성이 좋아지도록 변경한다. 중간 ‘Saved Session’ 메뉴의 ‘Default Settings’ 클릭 후 ‘Load’ 클릭-&amp;gt; 좌측 Category:-&amp;gt; WIndow-&amp;gt; Apperance-&amp;gt; Change..-&amp;gt; Font Size: 12-&amp;gt; Gap between text and window edge: 3-&amp;gt; Window Colours-&amp;gt; Select a colour to adjust-&amp;gt; Default Background: 45, 45, 45-&amp;gt; ANSI RED: 255, 80, 80-&amp;gt; ANSI BLUE: 85, 85, 255-&amp;gt; 좌측 Category:-&amp;gt; Session-&amp;gt; SaveScrollback Buffer 증가 Putty 화면에서 출력이 많아지면, 이를 다 저장하지 못한다. 버퍼 크기를 키워서 더 많은 출력을 putty에서 확인할 수 있도록 변경한다. 좌측 Category: -&amp;gt; Window -&amp;gt; ‘Lines of scrollback’ 크기 늘리기Backspace(삭제) 버튼이 작동되지 않는 경우 좌측 Category: -&amp;gt; Terminal -&amp;gt; Keyboard -&amp;gt; The Backspace key -&amp;gt; ‘Control -H’ 변경숫자 키패드가 적용되지 않는 경우 좌측 Category: -&amp;gt; Terminal -&amp;gt; Features -&amp;gt; ‘Disable application Keypad mode’ 클릭출처: https://itisfun.tistory.com/301Putty 재시작 단축키 설정 좌측 Category: -&amp;gt; Window -&amp;gt; Behaviour -&amp;gt; ‘Syetem menu appears on ALT alone’ 클릭 Putty에서 ‘Alt + R’ 단축키를 입력하면 현재 세션을 재시작할 수 있다.출처: http://rtomaszewski.blogspot.com/2013/05/putty-shortcut-and-tricks.htmlPutty 자동 로그인 설정 원격 서버에 SSH로 접속 하는 경우, id와 pw를 입력해야한다. 매번 입력하는 사용자 정보를 미리 등록하여, 별도의 정보 입력없이 자동으로 로그인하도록 설정한다.# 모두 다 엔터를 눌러 기본 설정으로 키 생성$ ssh-keygen -t rsa# &#39;id_rsa.pub&#39; 파일 복사$ cp .ssh/id_rsa.pub .ssh/authorized_keys ‘id_rsa’ 파일을 윈도우 환경으로 다운로드 PuttyGen 실행 후 ‘Load’ 버튼 클릭하여 ‘id_rsa’ 파일 업로드 ‘Save private key’ 버튼 클릭 putty -&amp;gt; Connection -&amp;gt; Data 클릭 Auto-login username 작성 Connection -&amp;gt; SSH -&amp;gt; Auth 클릭 생성한 key 파일 선택 후 session에서 저장출처: https://m.blog.naver.com/yexx/220655313158" }, { "title": "JMeter 간단 사용기", "url": "/posts/JMeter1/", "categories": "Tool, Web", "tags": "", "date": "2020-03-01 00:00:00 +0900", "snippet": " JMeter를 통하여 웹 애플리케이션의 부하 및 성능 테스트를 수행하는 기본적인 사용 방법을 소개한다.JMeter란? 웹을 비롯한 다양한 통신 프로토콜을 사용하는 애플리케이션에 부하를 주고, 이에 따른 성능을 측정하고 분석하기 위한 테스트 도구다. 가장 중요한 건 오픈소스 프로젝트로 무료로 사용할 수 있다.설치 환경 Windows 10 64bit apache-jmeter-5.1.1다운로드: http://jmeter.apache.org/download_jmeter.cgiJMeter 실행 방법 ‘\\apache-jmeter-5.1.1\\bin\\jmeterw.cmd’를 실행한다.Thread Group 생성 좌단 메뉴바 -&amp;gt; TestPlan 우클릭 -&amp;gt; Add -&amp;gt; Trhead(Users) -&amp;gt; Thrad Group Number of Threads (users): 동시 접속자수 Ramp-Up Period (in seconds): 사용자 패턴을 고려하여 사용자가 몇 초에 한번 서비스를 제공 받는 시간ex) Ramp-Up Period (in seconds) 1: 1초에 한 번 사용자가 페이지를 클릭하는 경우 Loop Count: 위 2가지 설정을 기반으로 몇 번 반복해서 서버측으로 요청을 전송할 것 인지 결정ex) 각 항목이 1,1,1: JMeter가 1명의 user를 1초에 한 번씩 1번 반복해서 호출하는 경우HTTP Request 생성 좌단 메뉴바 -&amp;gt; TestPlan 우클릭 -&amp;gt; Add -&amp;gt; Sampler -&amp;gt; HTTP Request Server Name or IP: 테스트를 수행하는 서버의 도메인 또는 IP Port Number: 포트 Protocol[http]: 기본적으로 http protocol을 사용하며 https, ws, ftp 등 protocol 변경이 필요하는 경우 입력 Method: 전송 방식을 선택 Path: URL 호출 정보 입력 ‘Send Parameters With the Request’ 항목에 전송하고 싶은 paramter의 Name과 Value 값을 입력하여 HTTP request를 생성하여, 테스트를 진행한다.Cookie를 이용한 로그인(session 자동 생성하기) 좌단 메뉴바 -&amp;gt; Thread Group 우클릭 -&amp;gt; Add -&amp;gt; Config Element -&amp;gt; HTTP Cookie Manager Chrome -&amp;gt; F12 -&amp;gt; Application -&amp;gt; Cookies -&amp;gt; 쿠기 저장된 항목을 그대로 복사한다.출처: http://soul0.tistory.com/279https://www.slideshare.net/xenonix/apache-jmeter-41356991" }, { "title": "Sabre Lite Power 고장 해결", "url": "/posts/Sabre-Lite2/", "categories": "Sabre Lite", "tags": "", "date": "2020-02-28 00:00:00 +0900", "snippet": " Sabre Lite에 잘못된 전압을 준 경우 고장 날 때 이를 원래 상태로 복구하는 방법을 설명한다. 본 글은 NXP 공식 메일로 해당 문제를 문의하여, 답변 받은 내용을 참고하여 작성하였다. 보드에 전원이 들어온 상태에서 입력을 주어도 아무런 화면 출력이 안되는 경우를 벽돌(brick) 상태라고 한다. 실수로 잘못된 전원 케이블을 사용하여 높은 전압을 보드에 주는 경우 이를 원래 상태로 복구하는 방법을 설명한다. 보드 전원 부분이 망가져 전력을 주어도 부팅되지 않는다.(다른 보드 제품의 전원 케이블을 착각하여 사용하였으며, 순간 전원 케이블에서 연기가 나며 망가짐)보드 부품 제거 하단 그림 하드웨어에 힘을 주어 제거하면 보드가 정상적으로 부팅된다." }, { "title": "Sabre Lite Unbricking", "url": "/posts/Sabre-Lite1/", "categories": "Sabre Lite", "tags": "", "date": "2020-02-27 00:00:00 +0900", "snippet": " Sabre Lite가 벽돌 상태가 되었을 때 이를 원래 상태로 복구하는 방법을 설명한다. 본 글은 NXP 공식 홈페이지를 참고하여 작성하였다. 보드에 전원이 들어온 상태에서 입력을 주어도 아무런 화면 출력이 안되는 경우를 벽돌(brick) 상태라고 한다. Sabre Lite가 벽돌 상태가 되었을 때 이를 기존의 원래 상태로 복구하는 방법을 설명한다.출처: https://boundarydevices.com/unbricking-nitrogen6x-sabre-lite-i-mx6-board/https://boundarydevices.com/u-boot-v2017-07/https://boundarydevices.com/wiki/u-boot/DIP Switch 변경 노란색 비닐 코팅을 제거한 후 펜과 같은 삐족한 물건을 사용하여, 다음과 같이 스위치를 변경한다.1 switch: ON2 switch: OFFU-Boot 파일 다운로드 ‘https://boundarydevices.com/u-boot-v2017-07/’ 다운로드 페이지에서 2017.07에 업로드된 ‘u-boot.nitrogen6q’ 파일과 ‘upgrade.scr’ 파일을 다운로드한다. 다운로드 한 파일을 sd 카드로 이동한 다음 보드에 삽입한다.DIP Switch 변경 Micro 5pin 케이블을 사용하여 데스크탑과 Sabre Lite 연결 후 다음과 같이 스위치를 변경한다. 1 switch: OFF 2 switch: ONSabre Lite Boot 다운로드 ‘https://boundarydevices.com/windows-users-and-unbricking-an-i-mx-device/’ 다운로드 페이지에서 ‘sb_loader.zip’ 파일과 ‘u-boot.nitrogen6q’ 파일을 다운로드한다. ‘sb_loader.zip’ 파일 압축을 해제한다. cmd 창에서 압축을 해제한 ‘sb_loaderv1.2’ 경로로 이동한 다음 하단의 명령어를 입력한다.$ cd &amp;lt;Path&amp;gt;\\sb_loader.v1.2$ sb_loader.exe -f u-boot.nitrogen6q 성공적으로 실행된 화면DIP Switch 변경 다음과 같이 스위치를 변경한다. 1 switch: ON 2 switch: OFFU-Boot 출력 확인 전원을 연결한 다음 시리얼 포트를 통하여 출력을 확인할 수 있다. run upgrade 명령어 인식 문제로 인하여, 하단 명령어를 입력하여 U-Boot 환경 변수를 삭제해야한다.$ env default -a$ savee$ setenv uboot_defconfig nitrogen6q$ run upgradeu 명령어를 입력하면 다음과 같이 실행 결과가 나온다. 이후 재부팅하라는 메시지가 출력하며 재부팅을 수행하면 다음 그림과 같이 2017.07 버전의 U-Boot가 정상적으로 부팅된다." }, { "title": "SQLite 빌드 - ARM", "url": "/posts/DB1/", "categories": "DB, Sabre Lite", "tags": "", "date": "2020-02-23 00:00:00 +0900", "snippet": " SQLite를 ARM 리눅스에서 사용할 수 있도록 빌드한다.설치 환경 타겟: Sabre Lite에 Ubuntu 18.04 SQLite-autoconf_3280000SQLite 빌드# 소스 코드 다운로드$ wget https://www.sqlite.org/2019/sqlite-autoconf-3280000.tar.gz$ tar xvzf sqlite-autoconf-3280000.tar.gz$ cd sqlite-autoconf-3280000$ mkdir dev# --prefix=설치 경로 입력# 만약 Windows 환경에서 빌드한다면 Cross Compiler를 지정해야함: CC=arm-linux-gnueabihf-gcc$ ./configure --host=arm-linux --prefix=/home/ubuntu/sqlite-autoconf-3280000/dev# 약 10분 정도의 시간이 소요됨$ make -j4# 약 5분 정도의 시간이 소요됨$ sudo make install출처: https://vicente-hernando.appspot.com/sqlite3-cross-compile-arm-howto" }, { "title": "리눅스 커널에 시스템 호출 구현 - ARM Sabre Lite(Kernel.org)", "url": "/posts/Linux6/", "categories": "Linux, Sabre Lite", "tags": "", "date": "2020-02-22 00:00:00 +0900", "snippet": " Kernel.org에서 다운받은 리눅스 커널에 시스템 호출 구현한 다음 수정한 리눅스 커널을 반영한다.설치 환경 ‘리눅스 커널 빌드 환경 구축’ 글을 참고하여 리눅스 커널 빌드 환경을 사전에 구축해야 한다. 호스트: Ubuntu 18.04 타겟: Sabre Lite에 Linux Kernel 4.14.87(PREEMPT_RT 패치 적용)시스템 호출 파일이 위치하는 디렉터리 생성# 다운받은 리눅스 커널 경로로 이동$ cd ~/&amp;lt;linux kernel path&amp;gt;# 시스템 호출 디렉터리 생성$ mkdir syscall_dev사용자 정의 시스템 콜 구현&amp;lt;syscall_dev/test.c&amp;gt;#include &amp;lt;linux/kernel.h&amp;gt;asmlinkage void sys_call(void){ printk(&quot;Hello World!\\n&quot;);}syscall_dev 디렉터리의 Makefile 작성 make할 때 syscall_dev 디렉터리 내부의 파일이 컴파일 되도록 한다.&amp;lt;syscall_dev/Makefile&amp;gt;obj-y := test.o커널 Makefile에 syscall_dev 파일 추가 make할 때 syscall_dev 디렉터리가 컴파일 되도록 된다.&amp;lt;Makefile&amp;gt;/* 약 969 라인에 위치 */기존 : core-y += kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/변경 : core-y += kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/ syscall_dev/시스템 콜 처리 함수 등록 커널에 등록된 마지막 시스템 호출에 사용자가 구현한 시스템 콜을 추가한다.&amp;lt;arch/arm/tools/syscall.tbl&amp;gt;397 common statx sys_statx# 시스템 콜 추가398 common sys_call sys_call애플리케이션 시스템 콜 호출 애플리케이션에서 등록한 398번 시스템 콜을 호출한다.&amp;lt;test.c&amp;gt;#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;linux/kernel.h&amp;gt;#include &amp;lt;sys/syscall.h&amp;gt;#include &amp;lt;unistd.h&amp;gt;int main(){ syscall(398); return 0;} 커널 메시지 출력 명령어를 통하여, 398번 시스템 호출 메시지인 “Hello World!”을 확인 할 수 있다.$ dmesg | tail출처: https://webnautes.tistory.com/554" }, { "title": "리눅스 커널 빌드 - ARM Sabre Lite(Kernel.org)", "url": "/posts/Linux5/", "categories": "Linux, Sabre Lite", "tags": "", "date": "2020-02-21 00:00:00 +0900", "snippet": " Kernel.org에서 다운받은 리눅스 커널 빌드 후 ARM Sabre Lite의 리눅스 커널 버전을 변경한다. 본 글은 여러 블로그를 참고하여 작성하였다. 만약 리눅스 커널에 PREEMPT_RT 패치를 적용하고 싶다면, PREEMPT_RT 패치가 해당 리눅스 커널 버전을 지원해야한다. 리눅스 커널 버전은 https://kernel.org/pub/linux/kernel에서 확인 가능하고, PREEMPT_RT 패치 가능한 리눅스 커널 버전은 http://cdn.kernel.org/pub/linux/kernel/projects/rt에서 확인 가능하다.설치 환경 ‘리눅스 커널 빌드 환경 구축’ 글을 참고하여 리눅스 커널 빌드 환경을 사전에 구축해야 한다. ‘리눅스 커널 포팅 - ARM Sabre Lite’ 글을 참고하여 Sabre Lite에 리눅스를 설치해야 한다. 호스트: Ubuntu 18.04(x86-64) 타겟: Sabre Lite에 커널 버전을 Linux Kernel 4.14.87(해당 리눅스 버전의 PREEMPT_RT 패치 적용)로 변경리눅스 커널 다운로드# 커널 다운로드, .xz 확장자 : 뛰어난 압축률$ wget https://kernel.org/pub/linux/kernel/v4.x/linux-4.14.87.tar.xz# 압축 해제$ tar -xvJf linux-4.14.87.tar.xzPREEMPT_RT 패치 다운로드 및 적용 PREEMPT_RT 패치는 리눅스의 실시간성을 개선하는 패치로서, 패치 적용 여부는 선택사항이다.$ wget http://cdn.kernel.org/pub/linux/kernel/projects/rt/4.14/patch-4.14.87-rt49.patch.xz# PREEMPT_RT 패치 진행$ cd linux-4.14.87$ xzcat ../patch-4.14.87-rt49.patch.xz | patch -p1$ cd ..PREEMPT_RT 패치가 적용된 리눅스 커널 빌드# 디렉토리명 변경$ mv linux-4.14.87 linux-4.14.87-rt49$ cd linux-4.14.87-rt49# 컴파일 의존성 삭제(mrproper + remove editor backup and patch files)$ sudo make distclean# 환경 변수 선언$ export KERNEL_SRC=PWD$ export ARCH=arm$ export CROSS_COMPILE=arm-linux-gnueabihf-$ export INSTALL_MOD_PATH=KERNEL_SRC/modules# Sabre Lite 컴파일 옵션 적용$ make imx_v6_v7_defconfig# 커널 컴파일 설정으로 하단과 같이 수정한다. 미리 적용된 설정이 존재한다.$ make menuconfig# 커널 dmesg 저장 버퍼 크기 변경$ CONFIG_LOG_BUF_SHIFT = 19# PREEMPT_RT 적용$ CONFIG_PREEMPT_RT_FULL = y# 고상도의 타이머 적용$ CONFIG_HIGH_RES_TIMERS = y# PREEMPT_RT의 실시간성을 떨어뜨리는 Preempt, Object 디버그 옵션 해제$ CONFIG_DEBUG_PREEMPT = n$ CONFIG_DEBUG_OBJECTS = n# PREEMPT-RT의 실시간성을 떨어뜨리는 Lock Debugging(spinlocks, mutexes, etc. . . ) 디버그 옵션 해제$ CONFIG_PROVE_LOCKING = n$ CONFIG_DEBUG_LOCK_ALLOC = n$ CONFIG_DEBUG_SPINLOCK = n$ CONFIG_DEBUG_MUTEXES = n$ CONFIG_DEBUG_RT_MUTEXES = n출처: https://wiki.linuxfoundation.org/realtime/documentation/howto/applications/preemptrt_setup# 모듈 삽입시 insmod: can&#39;t insert &#39;.ko&#39;: invalid module 발생하는 오류는 커널 버전과 모듈 버전이 일치하지 않는 경우# 해당 문제를 해결하기 위해 해당 옵션을 해제$ CONFIG_LOCALVERSION_AUTO = n출처: https://zinlee.tistory.com/entry/kernel-insmod-cant-insert-ko-invalid-module-format-%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95%EC%9B%90%EC%9D%B8-%EC%9D%B4%EC%9C%A0# 커널 설정을 종료한 다음 모듈 디렉토리 생성$ mkdir modules# 커널 모듈 빌드$ make zImage modules dtbs -j4# 커널 모듈 설치$ make modules_install출처: https://www.linuxquestions.org/questions/linux-general-1/vmlinuz-and-initrd-img-symbolic-links-4175609938/https://m.blog.naver.com/PostView.nhn?blogId=lovespreads&amp;amp;logNo=221205221338&amp;amp;proxyReferer=https%3A%2F%2Fwww.google.com%2Fhttps://boundarydevices.com/customizing-ubuntudebian-kernels/https://kldp.org/node/95521https://wiki.linuxfoundation.org/realtime/documentation/howto/applications/preemptrt_setup리눅스 커널 부팅에 필요한 파일 정리$ cd modules$ mkdir boot# imx6 관련 rdts, dtb 파일 복사$ cp ../arch/arm/boot/dts/imx6* ./boot# zImage 파일 이동# zImage는 vmlinuz과 같은 파일$ cp ../arch/arm/boot/zImage ./boot/vmlinuz-4.14.87-rt49# 링크 파일 생성$ ln -s boot/initrd.img-4.14.87-rt49 initrd.img$ ln -sfv boot/vmlinuz-4.14.87-rt49 vmlinuz# scp 전송을 위한 파일 압축$ tar -zcvf linux-4.14.87-rt49.tar.gz ./*# 생성된 파일 목록 확인$ ls -al# scp를 사용하여 타겟으로 파일 전송# ex) sudo scp -r /home/sdy/linux-4.14.87-rt49/modules/linux-4.14.87-rt49.tar.gz ubuntu@168.188.127.63:/home$ sudo scp -r /home/&amp;lt;username&amp;gt;/linux-4.14.87-rt49/modules/linux-4.14.87-rt49.tar.gz ubuntu@&amp;lt;ip&amp;gt;:/home타겟에 리눅스 커널 설치# 처음 리눅스 커널 변경할 때 한 번만 실행$ sudo apt-get purge -y linux-boundary-* linux-header-* linux-image-* qcacld-module$ sudo tar --numeric-owner -xf /home/linux-4.14.87-rt49.tar.gz -C /$ sudo update-initramfs -c -k4.14.87-rt49$ rm /home/linux-4.14.87-rt49.tar.gz$ sudo sync &amp;amp;&amp;amp; sudo reboot# 변경된 커널 버전 확인$ uname -art-tests(real-time task latency 측정) 리눅스의 실시간성을 측정하는 테스트다. PREEMPT_RT 패치를 적용하지 않은 경우보다 최대 latency와 평균 latency가 개선된 것을 확인할 수 있다.$ git clone git://git.kernel.org/pub/scm/utils/rt-tests/rt-tests.git$ cd rt-tests$ git checkout stable/devel/v1.0.1$ make -j4$ sudo make install$ sudo ./cyclictest -l100000 -m -n -a0 -t1 -p99 -i400 -h400출처: https://m.blog.naver.com/PostView.nhn?blogId=alice_k106&amp;amp;logNo=221170259817&amp;amp;proxyReferer=https%3A%2F%2Fwww.google.com%2Fhttps://git.kernel.org/pub/scm/utils/rt-tests/rt-tests.git" }, { "title": "리눅스 커널 빌드 - ARM Sabre Lite(NXP)", "url": "/posts/Linux4/", "categories": "Linux, Sabre Lite", "tags": "", "date": "2020-02-20 00:00:00 +0900", "snippet": " NXP에서 다운받은 리눅스 커널 빌드 후 ARM Sabre Lite의 리눅스 커널 버전을 변경한다. 본 글은 NXP 공식 홈페이지를 참고하여 작성하였다. 만약 리눅스 커널을 수정하거나 NXP에서 공식 지원하는 커널 이외의 버전을 사용하고 싶다면, ‘리눅스 커널 빌드 ARM Sabre Lite(Kernel.org)’ 글을 참고 해야한다.출처: https://boundarydevices.com/customizing-ubuntudebian-kernels/설치 환경 ‘리눅스 커널 빌드 환경 구축’ 글을 참고하여 리눅스 커널 빌드 환경을 사전에 구축해야 한다. 호스트: Ubuntu 18.04 타겟: Sabre Lite에 Linux Kernel 4.9.88리눅스 커널 다운로드$ git clone https://github.com/boundarydevices/linux-imx6.git$ cd linux-imx6리눅스 커널 빌드# 컴파일 의존성 삭제# mrproper + remove editor backup and patch files$ sudo make distclean# 환경 변수 선언$ export KERNEL_SRC=$PWD$ export INSTALL_MOD_PATH=$KERNEL_SRC/ubuntunize/linux-staging$ export ARCH=arm$ export CROSS_COMPILE=arm-linux-gnueabihf-# 처음 커널 빌드시 해당 명령어 실행$ git checkout boundary-imx_4.9.x_2.0.0_ga# 해당 명령어 실행 시 다음과 같은 에러 발생하는 경우가 있지만, 무시하고 진행 가능# make: Entering directory ‘/home/sdy/linux-imx6/ubuntunize’# Makefile:14: *** unknown DISTRO=bionic. Stop.# make: Leaving directory ‘/home/sdy/linux-imx6/ubuntunize’$ make -C ubuntunize prerequisites# 커스텀 설정 파일 존재시 해당 설정으로 이름 변경$ make boundary_defconfig# 커널 빌드$ make zImage modules dtbs -j4$ make -C ubuntunize tarball 만약 커널 코드를 수정한 다면, 다음 이미지와 같이 파일명 뒤에 dirty라는 네이밍이 추가된다.$ cd ..galcore 다운로드 &amp;amp; 빌드 GPU를 가속하는 커널 모듈로서, 커널 버전이 4.1.15 이상인 경우 galcore 패키지를 무조건 빌드해야한다. 따라서 해당 리눅스 커널 버전은 galcore 패키지를 빌드 후 설치해야한다.$ cd ~$ git clone https://github.com/Freescale/kernel-module-imx-gpu-viv.git$ cd kernel-module-imx-gpu-viv$ git checkout upstream/5.0.11.p7.4$ sed &#39;s,-Werror,-Werror -Wno-error=misleading-indentation,g&#39; -i ./ kernel-module-imx-gpu-viv-src/Kbuild# 빌드, 쿼드코어 사용$ make -j4# 커널 모듈 설치$ make modules_install$ cd ..타겟보드로 리눅스 커널 모듈 전송 후 설치# scp를 사용하여 타겟으로 파일 전송# ex) sudo scp -r /home/sdy/linux-imx6/ubuntunize/linux-4.9.88-g141b36cf3e0b-dirty.tar.gz ubuntu@168.188.127.40:/home$ sudo scp -r /home/&amp;lt;username&amp;gt;/linux-imx6/ubuntunize/linux-&amp;lt;version&amp;gt; ubuntu@&amp;lt;ip&amp;gt;:/home# Target에서 merging 진행$ sudo apt-get purge linux-boundary-* linux-header-* linux-image-* qcacld-module# ex) sudo tar --numeric-owner -xf /home/linux-4.9.88-g141b36cf3e0b-dirty.tar.gz -C /$ sudo tar --numeric-owner -xf /home/linux-&amp;lt;version&amp;gt;.tar.gz -C /# ex) sudo update-initramfs -c -k4.9.88-g141b36cf3e0b-dirty$ sudo update-initramfs -c -k&amp;lt;version&amp;gt;# 동기화 후 재시작$ sync &amp;amp;&amp;amp; sudo reboot# 변경된 커널 버전 확인$ uname -a" }, { "title": "리눅스 커널 포팅 - ARM Sabre Lite", "url": "/posts/Linux3/", "categories": "Linux, Sabre Lite", "tags": "", "date": "2020-02-20 00:00:00 +0900", "snippet": " ARM Sabre Lite에 리눅스 커널을 포팅한다. 본 글은 NXP 공식 홈페이지를 참고하여 작성하였다.출처: https://boundarydevices.com/ubuntu-bionic-18-04-lts-for-i-mx6-7-boards-june-2018-kernel-4-9-x/설치 환경 호스트: Ubuntu 18.04(x86-64) 타겟: Sabre Lite에 NXP에서 제공하는 Ubuntu Bionic 18.04 LTS for i.MX6/7 boards - June 2018 (kernel 4.9.x) 리눅스 커널 포팅Sabre Lite 커널 이미지 다운로드 https://boundarydevices.com/ubuntu-bionic-18-04-lts-for-i-mx6-7-boards-june-2018-kernel-4-9-x/에서 ‘20180729-nitrogen-4.9.x_1.0.0_ga-bionic-en_US-console_armhf.img.gz’ 파일을 다운로드 한다.(해당 버전은 GUI가 아닌 CLI 버전) 글 작성 당시 최근 업로드된 게시글은 ‘Ubuntu Bionic 18.04.2 LTS for Nitrogen8M_Mini board – June 2019 (kernel 4.14.x)’으로 4.14 리눅스 커널 버전을 지원한다.출처: https://boundarydevices.com/blog/ubuntu/Sabre Lite 커널 이미지 쓰기$ sudo apt-get install -y gddrescue xz-utils util-linux# 압축 해제$ gunzip 20180729-nitrogen-4.9.x_1.0.0_ga-bionic-en_US-xfce_armhf.img.gz# 인식한 micro SD 카드의 문자열 확인$ lsblk# 인식한 문자열로 micro SD 카드에 이미지 파일 write# 해당 작업 진행을 종료하면 micro SD 카드에 우분투가 설치되어 있으며, 해당 micro SD 카드를 타겟으로 부팅하면 우분투가 시작됨$ sudo ddrescue -D --force 20180729-nitrogen-4.9.x_1.0.0_ga-bionic-en_US-console_armhf.img /dev/sdb설정된 타겟 아이디/비밀번호 해당 로그인 정보를 입력하여 리눅스에 로그인한다. 아이디/비밀번호: root/Boundary 아이디/비밀번호: ubuntu/Boundary고정 IP 할당 vi 에디터가 설치되어 있지 않으므로 nano 에디터를 사용하여 IP 정보를 변경해야 한다.&amp;lt;/etc/network/interfaces&amp;gt;# 기존 ip 정보# auto eth0# allow-hotplug eth0# iface eth0 inet dhcp# 자신의 ip 정보 입력allow-hotplug eth0iface eth0 inet staticaddress 168.188.127.63netmask 255.255.255.0gateway 168.188.127.1dns-nameservers 168.126.1.1 Ctrl + x -&amp;gt; y -&amp;gt; Enter: nano 종료 단축키출처: https://www.lesstif.com/pages/viewpage.action?pageId=24445571#id-%EC%9A%B0%EB%B6%84%ED%88%AC%EC%84%9C%EB%B2%84%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EC%84%A4%EC%A0%95(ubuntuservernetworkconfig)-statichttps://lwk24.tistory.com/403Timeserver 동기화 해당 설정을 진행하지 않으면 ‘Temporary failure in name resolution’ 에러가 발생한다. 이를 해결하기 위해 ,리눅스 timeserver와 동기화 작업이 필요하다.&amp;lt;/etc/resolv.conf&amp;gt;# 기존 nameserver 정보# Generated by pump for interface eth0# nameserver 168.188.1.1# nameserver 168.126.63.1# nameserver를 다음과 같이 변경nameserver 58.277.183.227nameserver 221.143.20.131 Ctrl + x -&amp;gt; y -&amp;gt; Enter: nano 종료 단축키$ sudo reboot출처: https://lwk24.tistory.com/403https://gracefulprograming.tistory.com/91타겟에 필요한 기본 패키지 설치 타겟에는 기본적인 패키지가 설치되어 있지 않다. 개발 및 연구 환경에 필요한 기본 패키지를 설치하며, 해당 부분은 선택사항이다.# update$ sudo apt-get update# git$ sudo apt-get install -y git# vim$ sudo apt-get install -y vim# 압축 패키지$ sudo apt-get install -y zip unzip# 블럭 디바이스 마운트를 위한 패키지$ sudo apt-get install -y nfs-common cifs-utils cloud-guest-utils# ssh 접속 편의성을 위한 패키지$ sudo apt-get install -y sshpass# wget$ sudo apt-get install -y wget# htop$ sudo apt-get install -y htop# valgrind$ sudo apt-get install -y valgrindvim 설정 리눅스 환경에서 사용하는 vim 설정은 다음과 같다.~/.vimrc&quot;=== Indent ===set autoindentset smartindentset cindentset tabstop=4set shiftwidth=4&quot;=== View ===set numberset titleset wrapset showmatchset rulerset cursorlineset linebreakset autoindent&quot;=== Search ===set hlsearchset ignorecaseset incsearch&quot;=== Edit ===syntax onsyntax enableset history=1000set fileencoding=utf-8set nobackup&quot;=== VIM-AIRLINE ===set laststatus=2 &quot;선택&quot;=== 마지막 수정된 곳에 커서 위치 ===au BufReadPost *\\ if line(&quot;&#39;\\&quot;&quot;) &amp;gt; 0 &amp;amp;&amp;amp; line(&quot;&#39;\\&quot;&quot;) &amp;lt;= line(&quot;&quot;) |\\ exe &quot;norm g`\\&quot;&quot; |\\ endif&quot;=== Theme ===&quot;colo pabloMicro sd 카드의 메모리 용량 늘리기 리눅스 커널을 micro sd 카드에 포팅할 때, micro sd 카드의 최소한의 용량만 사용하도록 설정한다. micro sd 카드에서 인식하는 메모리 용량이 매우 적으며, 패키지 몇 개만 설치하면 용량이 부족하다. 따라서 micro sd 카드의 기존 용량에 맞게 파티션 변경 필요하다.타겟(Sabre Lite)에서 수행# 블럭 디바이스의 상태를 확인$ lsblk![image](/assets/img/2020-02-20-Linux3/image1.png)# micro sd 카드 메모리의 파티션 확장$ sudo growpart /dev/mmcblk1 1$ lsblk![image](/assets/img/2020-02-20-Linux3/image2.png)호스트에서 수행 Micro sd 카드를 호스트에 삽입한다. Sabre Lite에서는 이미 sd 카드를 사용 중이므로 파티션 크기 조절 불가하기에, 호스트에서 파티션 크기를 재조정 해야한다.# 운영체제가 micro sd 카드 메모리를 인식하는 크기는 3.4G(sdb1)$ df -h# micro sd 카드의 크기 변경# 운영체제가 인식하는 micro sd 카드의 블럭 디바이스 문자를 사용해야 함$ sudo resize2fs /dev/sdb1# 운영체제가 기존 micro sd 카드를 인식하는 메모리 크기가 3.4G(sdb1) 였지만, 메모리 크기를 재조정함으로써 인식하는 메모리 크기가 59G(sdb1)로 늘어남# Micro sd 카드를 타겟에 삽입하면, 사용가능한 메모리 용량이 증가한 것을 확인할 수 있음$ df -h출처: https://blog.lael.be/post/7735" }, { "title": "리눅스 커널 빌드 - x86-64", "url": "/posts/Linux2/", "categories": "Linux", "tags": "", "date": "2020-02-19 00:00:00 +0900", "snippet": " 다운 받은 리눅스 커널을 빌드 후 리눅스 커널 버전을 변경한다.설치 환경 Ubuntu 18.04(x86-64) 커널 버전을 Linux Kernel 4.19.27로 변경 ‘리눅스 커널 빌드 환경 구축’ 글을 참고하여 리눅스 커널 빌드 환경을 사전에 구축해야 한다.리눅스 커널 다운로드$ mkdir kernel$ cd kernel# 커널 다운로드, .xz 확장자: 뛰어난 압축률$ wget https://kernel.org/pub/linux/kernel/v4.x/linux-4.19.27.tar.xz# 압축 해제$ tar -xvJf linux-4.19.27.tar.xz리눅스 커널 빌드$ cd linux-4.19.27# 컴파일 의존성 삭제# mrproper + remove editor backup and patch files$ sudo make distclean# 커널 설정$ sudo make menuconfig# 커널 컴파일, 쿼드코어 사용$ sudo make -j4리눅스 커널 모듈 설치# 커널 환경설정에서 모듈로 설정한 기능들을 컴파일# 컴파일된 모듈은 /lib/modules 아래 설치# depmod: 모듈 사이의 의존성을 검사 후 /lib/modules 디렉토리 아래 modules.dep 파일 생성 후 설치$ sudo make modules_install install# 재부팅$ sudo reboot now# 변경된 커널 버전 확인$ uname -r출처: http://whoyas2.tistory.com/31https://wiki.kldp.org/KoreanDoc/html/Kernel-KLDP/compile.html#COMPILECOMMANDhttp://egloos.zum.com/smilk/v/128207" }, { "title": "리눅스 커널 빌드 - 환경 구축", "url": "/posts/Linux1/", "categories": "Linux", "tags": "", "date": "2020-02-18 00:00:00 +0900", "snippet": " 리눅스 커널 빌드 환경을 우분투에서 구축한다.설치 환경 Ubuntu 18.04(x86-64)리눅스 커널 빌드 환경 구축 해당 라이브러리를 설치를 진행하면, 리눅스 커널 빌드 환경이 구축된다.# 커널 빌드시 필요한 기본 라이브러리(dpkg-dev, g++, gcc, libc6-dev, make)$ sudo apt-get install -y build-essential# 리눅스 계산기 라이브러리$ sudo apt-get install -y bc# ncurses(TUI, Text User Interface) 라이브러리$ sudo apt-get install -y libncurses5-dev# ssh 라이브러리$ sudo apt-get install -y libssl-dev# 컴파일러 관련 라이브러리(파서, 어휘분석기)$ sudo apt-get install -y bison flex# ELF 파일을 고수준에서 읽어오는 기능을 제공하는 라이브러리$ sudo apt-get install -y libelf-dev" }, { "title": "Workbench Simulator 테스트", "url": "/posts/VxWorks4/", "categories": "VxWorks", "tags": "", "date": "2020-02-17 00:00:00 +0900", "snippet": " 태스크 생성하여 결과를 출력 예제를 Workbench Simulator에서 수행한다.설치 환경 Windows 10 64bit Wind River Workbench 3.3 Wind River General Purpose Platform VxWorks Edition 6.9Booting: SImulator Targets1. Target Console 설정 상단 메뉴바 -&amp;gt; Window -&amp;gt; Preference -&amp;gt; Wind River -&amp;gt; Target Management -&amp;gt; Target Console -&amp;gt; 하단 이미지의 두 개 항목 체크 해제한다. 만약, Target Console을 설정하지 않는다면 다음과 같은 에러가 발생한다.2. Project 생성 New -&amp;gt; VxWorks Downloadable Kernel Module Project -&amp;gt; Finish3. test.c 파일 생성 후 build New -&amp;gt; File -&amp;gt; 하단의 예제 파일 생성 -&amp;gt; Build&amp;lt;test.c&amp;gt;#include &amp;lt;taskLib.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;kernelLib.h&amp;gt;long int task_run[]={100, 450, 200};int task_stop[]={18, 25, 30};void task(int n){ long int x; printf(&quot;Task %i has been started\\n&quot;, n); while (1) { printf(&quot;task %d: running\\n&quot;, n); x = 1000000 * task_run[n]; while (x &amp;gt; 0) x--; printf(&quot;task %d: stopped\\n&quot;, n); taskDelay(task_stop[n]); }}void CreateTasks(void){ int id1, id2, id3; /* kernelTimeSlice(1); */ id1=taskSpawn(&quot;Task0&quot;, 210, 0, 4096, (FUNCPTR) task, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); id2=taskSpawn(&quot;Task1&quot;, 210, 0, 4096, (FUNCPTR) task, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0); id3=taskSpawn(&quot;Task2&quot;, 210, 0, 4096, (FUNCPTR) task, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0);}4. 빌드 된 파일을 Task에 추가한 다음 실행 Remote Systems -&amp;gt; vxsim0 -&amp;gt; Wind River Launches -&amp;gt; VxWorsk Kernel Task 오른쪽 버튼 클릭 -&amp;gt; Create a new launch configuration Entry Point -&amp;gt; Browse -&amp;gt; CreateTasks 등록 -&amp;gt; Run 시뮬레이터를 실행하면 테스크가 생성된 다음, 주기적으로 태스크 정보를 출력하는 예제를 터미널에서 확인할 수 있다.출처: https://support.dce.felk.cvut.cz/psr/cviceni/intro/" }, { "title": "Sabre Lite에 VxWorks Booting", "url": "/posts/VxWorks3/", "categories": "VxWorks, Sabre Lite", "tags": "", "date": "2020-02-16 00:00:00 +0900", "snippet": " Sabre Lite에 VxWorks 6.9 Booting 명령어 및 자동 부팅 환경 변수 등록한다.설치 환경 타겟 환경: Freescale i.mx6 Sabre Lite에 U-Boot 포팅 Sabre Lite BSP로 빌드한 vxWorks.bin 파일을 micro sd 카드에 이동 후 보드에 삽입한다.부팅 명령어$ fatload mmc 1 0x10100000 vxWorks.bin$ go 10100000U-Boot vxWorks.bin 파일 자동 부팅 명령어 설정# 환경 변수 정의$ setenv go &#39;fatload mmc 1 0x10100000 vxWorks.bin;go 10100000&#39;# 자동 부팅 명령어 정의$ setenv bootcmd &#39;run go&#39;# 부팅 인터럽트 대기시간 0초로 변경$ setenv bootdelay 0# 변경된 환경 설정 저장$ saveenv# bootcmd 명령어 수행$ run distro_bootcmd" }, { "title": "Wind River Workbench에 BSP 설치 및 설정", "url": "/posts/VxWorks2/", "categories": "VxWorks, Sabre Lite", "tags": "", "date": "2020-02-15 00:00:00 +0900", "snippet": " Wind River Workbench에 Sabre Lite BSP 설치 및 설정한다.설치 환경 Windows 10 64bit Wind River General Purpose Platform VxWorks Edition 6.9 타겟 환경: Freescale i.mx6 Sabre Lite Wind River Workbench 내에서 기본적으로 BSP를 제공하지 않는 보드를 사용하기 위해서는 BSP를 다운받고 이에 따른 설치 및 설정이 필요하다. 필자는 Sabre Lite 보드를 사용하였다. 따라서 해당 보드 기준으로 설치 및 설정을 설명한다.VxWorks 6.9.2.3 서피스 팩 업데이트 다운로드 URL에서 “DVD-R147826.1-14-00_part2of1.zip, DVD-R147826.1-14-00_part2of2.zip” 파일을 같은 폴더에 압축을 푼다. 압축을 푸면 DVD-R147826.1-14-00 폴더에 설치 파일 생성된다. 모든 설정을 기본 값으로 설정한 다음 업데이트를 한다.다운로드 URL: https://knowledge.windriver.com/en-us/000_Products/000/020/010/000/000_Update_Pack_3_for_VxWorks_6.9_and_VxWorks_Edition_6.9_PlatformsBSP 설치 절차1. ‘https://marketplace.Wind River.com/index.php?bsp’ 접속2. ‘Freescale i.mx6 Sabre Lite’ 검색 후, VxWorks 6.9에 해당하는 보드의 BSP 다운로드3. 다운로드 받은 파일의 압축을 해제한 다음 폴더 이동 ‘C\\Wind River\\updates’(Wind River Workbench가 설치된 경로)로 이동한다.4. ‘Product Maintenace’ 실행5. ‘Patch’ 클릭6. ‘BSP_fsl_imx6_sabrelite’ patch 설치7. Wind River Workbench 재시작 후 프로젝트 생성할 때 ‘Board support pacakge’에서 설치한 ‘imx6_sabrelite’ 클릭 가능 BSP 클릭 후 프로젝트를 생성하면 Sabre Lite 타겟에서 실행되는 애플리케이션을 빌드할 수 있다." }, { "title": "Wind River University Program 라이선스 발급받기", "url": "/posts/VxWorks1/", "categories": "VxWorks", "tags": "", "date": "2020-02-14 00:00:00 +0900", "snippet": " Wind River Product’s University Program 라이선스 발급받아, VxWorks 6.9에 라이선스 등록한다.설치 환경 Windows 10 64bit Wind River General Purpose Platform VxWorks Edition 6.9WinRiver University Program 해당 프로그램은 교육 및 연구 라이선스로 발급받으면 VxWorks, Wind River Linux 등 다양한 Wind River 제품을 사용할 수 있다. 하지만 이에 따른 제약사항이 존재한다. Knowledge Forum(Q&amp;amp;A), VxWorks 업데이트 페이지 등 정식 라이선스를 요구하는 페이지에 접근이 불가능하다. 따라서, VxWorks 관련 업데이트, 기술 문의 등의 서비스를 받을 수 없다.WinRiver University Program 라이선스 발급받기1. https://www.windriver.com/products/vxworks/ 접속2. ‘Menu’ -&amp;gt; ‘SUPPORT &amp;amp; SERVICES’ -&amp;gt; ‘Wind River Education Services’ -&amp;gt; ‘University Program’ 항목으로 이동3. 하단의 University Program 지원 서류를 작성한 다음 제출 총 3개(Research Proposal, Addendum, Agreement)의 서류를 작성 후 Wind River University Program 담당 수신 메일 주소인 ‘university@windriver.com’로 제출한다. 서류 심사 절차가 이루어지며, 이후 서류 내용이 부족하거나 미흡한 경우 메일이 오며, 추가로 서류 제출을 해야 한다. 연구 목적으로 University Program 라이선스를 신청하였으며, 1번의 부가적인 서류 제출 이후 University Program 라이선스를 발급받았다. 자세한 내용은 해당 페이지의 ‘Frequently Asked Questions: University Program’ 항목을 참고하면 된다.4. University Program 라이선스 발급 메일 수신 확인 서류 심사 후 라이선스 발급이 통과되면, 이메일 주소로 라이선스 발급 메일이 발송된다.Wind River 계정 생성 University Program 라이선스 발급 메일을 확인한다.1. ‘1. Registering for a Wind River support account’ 클릭2. Wind River 계정 생성 학교 메일 주소를 사용하여 계정을 생성한다.Wind River Workbench 설치 University Program 라이선스 발급 메일을 확인한다.1. ‘2. Downloading, installing, and act..’ 클릭 후 Wind River 소프트웨어 다운로드 페이지로 이동2. Wind River Workbench 설치 진행3. 다운로드받은 파일의 압축을 풀고, ‘setup.exe’ 파일을 실행하여 Wind River Workbench 설치Wind River Workbench University Program 라이선스 등록 University Program 라이선스 발급 메일을 확인한다.1. ‘3. Managing product licenses’ 클릭2. ‘Mangae Licenses’ 클릭3. ‘Activate Products’ 클릭4. 라이선스를 발급받을 ‘Product’ 클릭5. ‘Create New Host’ 클릭 노드락 라이선스 형태로, PC에서 라이선스 인증 후 해당 PC에서만 사용 가능하다.6. Host(라이선스를 등록하는 데스크탑) 정보 작성 후 생성 ‘Host ID*‘는 PC의 MAC 주소로 cmd 창에서 ‘ipconfig -all’를 입력하여 확인할 수 있다. ‘이더넷 어댑터 이더넷’ 항목의 물리적 주소에서 ‘-‘를 제외한 12자리 입력한다.7. ‘Continue with Activation process’ 클릭8. Host에 할당된 라이선스 정보를 최종적으로 확인 후 ‘Next’ 클릭9. License File 항목의 ‘Download’ 클릭 해당 파일에는 라이선스 키가 입력되어있다.10. 노드락 라이선스 파일 이동 ‘C\\Wind River\\license’(Wind River Workbench 설치된 경로)로 이동한 다음 ‘license.lic’ 파일을 생성한다. 해당 파일에 노드락 라이선스 파일 내용을 복사한다.11. Wind River Workbench 실행 라이선스 등록을 마치면 Workbench가 성공적으로 실행된다." } ]
